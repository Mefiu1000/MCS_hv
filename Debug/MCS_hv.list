
MCS_hv.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000000c0  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00005cec  080000c0  080000c0  000100c0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000078  08005dac  08005dac  00015dac  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08005e24  08005e24  0002005c  2**0
                  CONTENTS
  4 .ARM          00000000  08005e24  08005e24  0002005c  2**0
                  CONTENTS
  5 .preinit_array 00000000  08005e24  08005e24  0002005c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08005e24  08005e24  00015e24  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08005e28  08005e28  00015e28  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000005c  20000000  08005e2c  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000001dc  2000005c  08005e88  0002005c  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000238  08005e88  00020238  2**0
                  ALLOC
 11 .ARM.attributes 00000028  00000000  00000000  0002005c  2**0
                  CONTENTS, READONLY
 12 .debug_info   00010f5d  00000000  00000000  00020084  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 0000284f  00000000  00000000  00030fe1  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000f20  00000000  00000000  00033830  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00000e08  00000000  00000000  00034750  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0001a3c1  00000000  00000000  00035558  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00012b22  00000000  00000000  0004f919  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000971b5  00000000  00000000  0006243b  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  000f95f0  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00003748  00000000  00000000  000f9640  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080000c0 <__do_global_dtors_aux>:
 80000c0:	b510      	push	{r4, lr}
 80000c2:	4c06      	ldr	r4, [pc, #24]	; (80000dc <__do_global_dtors_aux+0x1c>)
 80000c4:	7823      	ldrb	r3, [r4, #0]
 80000c6:	2b00      	cmp	r3, #0
 80000c8:	d107      	bne.n	80000da <__do_global_dtors_aux+0x1a>
 80000ca:	4b05      	ldr	r3, [pc, #20]	; (80000e0 <__do_global_dtors_aux+0x20>)
 80000cc:	2b00      	cmp	r3, #0
 80000ce:	d002      	beq.n	80000d6 <__do_global_dtors_aux+0x16>
 80000d0:	4804      	ldr	r0, [pc, #16]	; (80000e4 <__do_global_dtors_aux+0x24>)
 80000d2:	e000      	b.n	80000d6 <__do_global_dtors_aux+0x16>
 80000d4:	bf00      	nop
 80000d6:	2301      	movs	r3, #1
 80000d8:	7023      	strb	r3, [r4, #0]
 80000da:	bd10      	pop	{r4, pc}
 80000dc:	2000005c 	.word	0x2000005c
 80000e0:	00000000 	.word	0x00000000
 80000e4:	08005d94 	.word	0x08005d94

080000e8 <frame_dummy>:
 80000e8:	4b04      	ldr	r3, [pc, #16]	; (80000fc <frame_dummy+0x14>)
 80000ea:	b510      	push	{r4, lr}
 80000ec:	2b00      	cmp	r3, #0
 80000ee:	d003      	beq.n	80000f8 <frame_dummy+0x10>
 80000f0:	4903      	ldr	r1, [pc, #12]	; (8000100 <frame_dummy+0x18>)
 80000f2:	4804      	ldr	r0, [pc, #16]	; (8000104 <frame_dummy+0x1c>)
 80000f4:	e000      	b.n	80000f8 <frame_dummy+0x10>
 80000f6:	bf00      	nop
 80000f8:	bd10      	pop	{r4, pc}
 80000fa:	46c0      	nop			; (mov r8, r8)
 80000fc:	00000000 	.word	0x00000000
 8000100:	20000060 	.word	0x20000060
 8000104:	08005d94 	.word	0x08005d94

08000108 <__udivsi3>:
 8000108:	2200      	movs	r2, #0
 800010a:	0843      	lsrs	r3, r0, #1
 800010c:	428b      	cmp	r3, r1
 800010e:	d374      	bcc.n	80001fa <__udivsi3+0xf2>
 8000110:	0903      	lsrs	r3, r0, #4
 8000112:	428b      	cmp	r3, r1
 8000114:	d35f      	bcc.n	80001d6 <__udivsi3+0xce>
 8000116:	0a03      	lsrs	r3, r0, #8
 8000118:	428b      	cmp	r3, r1
 800011a:	d344      	bcc.n	80001a6 <__udivsi3+0x9e>
 800011c:	0b03      	lsrs	r3, r0, #12
 800011e:	428b      	cmp	r3, r1
 8000120:	d328      	bcc.n	8000174 <__udivsi3+0x6c>
 8000122:	0c03      	lsrs	r3, r0, #16
 8000124:	428b      	cmp	r3, r1
 8000126:	d30d      	bcc.n	8000144 <__udivsi3+0x3c>
 8000128:	22ff      	movs	r2, #255	; 0xff
 800012a:	0209      	lsls	r1, r1, #8
 800012c:	ba12      	rev	r2, r2
 800012e:	0c03      	lsrs	r3, r0, #16
 8000130:	428b      	cmp	r3, r1
 8000132:	d302      	bcc.n	800013a <__udivsi3+0x32>
 8000134:	1212      	asrs	r2, r2, #8
 8000136:	0209      	lsls	r1, r1, #8
 8000138:	d065      	beq.n	8000206 <__udivsi3+0xfe>
 800013a:	0b03      	lsrs	r3, r0, #12
 800013c:	428b      	cmp	r3, r1
 800013e:	d319      	bcc.n	8000174 <__udivsi3+0x6c>
 8000140:	e000      	b.n	8000144 <__udivsi3+0x3c>
 8000142:	0a09      	lsrs	r1, r1, #8
 8000144:	0bc3      	lsrs	r3, r0, #15
 8000146:	428b      	cmp	r3, r1
 8000148:	d301      	bcc.n	800014e <__udivsi3+0x46>
 800014a:	03cb      	lsls	r3, r1, #15
 800014c:	1ac0      	subs	r0, r0, r3
 800014e:	4152      	adcs	r2, r2
 8000150:	0b83      	lsrs	r3, r0, #14
 8000152:	428b      	cmp	r3, r1
 8000154:	d301      	bcc.n	800015a <__udivsi3+0x52>
 8000156:	038b      	lsls	r3, r1, #14
 8000158:	1ac0      	subs	r0, r0, r3
 800015a:	4152      	adcs	r2, r2
 800015c:	0b43      	lsrs	r3, r0, #13
 800015e:	428b      	cmp	r3, r1
 8000160:	d301      	bcc.n	8000166 <__udivsi3+0x5e>
 8000162:	034b      	lsls	r3, r1, #13
 8000164:	1ac0      	subs	r0, r0, r3
 8000166:	4152      	adcs	r2, r2
 8000168:	0b03      	lsrs	r3, r0, #12
 800016a:	428b      	cmp	r3, r1
 800016c:	d301      	bcc.n	8000172 <__udivsi3+0x6a>
 800016e:	030b      	lsls	r3, r1, #12
 8000170:	1ac0      	subs	r0, r0, r3
 8000172:	4152      	adcs	r2, r2
 8000174:	0ac3      	lsrs	r3, r0, #11
 8000176:	428b      	cmp	r3, r1
 8000178:	d301      	bcc.n	800017e <__udivsi3+0x76>
 800017a:	02cb      	lsls	r3, r1, #11
 800017c:	1ac0      	subs	r0, r0, r3
 800017e:	4152      	adcs	r2, r2
 8000180:	0a83      	lsrs	r3, r0, #10
 8000182:	428b      	cmp	r3, r1
 8000184:	d301      	bcc.n	800018a <__udivsi3+0x82>
 8000186:	028b      	lsls	r3, r1, #10
 8000188:	1ac0      	subs	r0, r0, r3
 800018a:	4152      	adcs	r2, r2
 800018c:	0a43      	lsrs	r3, r0, #9
 800018e:	428b      	cmp	r3, r1
 8000190:	d301      	bcc.n	8000196 <__udivsi3+0x8e>
 8000192:	024b      	lsls	r3, r1, #9
 8000194:	1ac0      	subs	r0, r0, r3
 8000196:	4152      	adcs	r2, r2
 8000198:	0a03      	lsrs	r3, r0, #8
 800019a:	428b      	cmp	r3, r1
 800019c:	d301      	bcc.n	80001a2 <__udivsi3+0x9a>
 800019e:	020b      	lsls	r3, r1, #8
 80001a0:	1ac0      	subs	r0, r0, r3
 80001a2:	4152      	adcs	r2, r2
 80001a4:	d2cd      	bcs.n	8000142 <__udivsi3+0x3a>
 80001a6:	09c3      	lsrs	r3, r0, #7
 80001a8:	428b      	cmp	r3, r1
 80001aa:	d301      	bcc.n	80001b0 <__udivsi3+0xa8>
 80001ac:	01cb      	lsls	r3, r1, #7
 80001ae:	1ac0      	subs	r0, r0, r3
 80001b0:	4152      	adcs	r2, r2
 80001b2:	0983      	lsrs	r3, r0, #6
 80001b4:	428b      	cmp	r3, r1
 80001b6:	d301      	bcc.n	80001bc <__udivsi3+0xb4>
 80001b8:	018b      	lsls	r3, r1, #6
 80001ba:	1ac0      	subs	r0, r0, r3
 80001bc:	4152      	adcs	r2, r2
 80001be:	0943      	lsrs	r3, r0, #5
 80001c0:	428b      	cmp	r3, r1
 80001c2:	d301      	bcc.n	80001c8 <__udivsi3+0xc0>
 80001c4:	014b      	lsls	r3, r1, #5
 80001c6:	1ac0      	subs	r0, r0, r3
 80001c8:	4152      	adcs	r2, r2
 80001ca:	0903      	lsrs	r3, r0, #4
 80001cc:	428b      	cmp	r3, r1
 80001ce:	d301      	bcc.n	80001d4 <__udivsi3+0xcc>
 80001d0:	010b      	lsls	r3, r1, #4
 80001d2:	1ac0      	subs	r0, r0, r3
 80001d4:	4152      	adcs	r2, r2
 80001d6:	08c3      	lsrs	r3, r0, #3
 80001d8:	428b      	cmp	r3, r1
 80001da:	d301      	bcc.n	80001e0 <__udivsi3+0xd8>
 80001dc:	00cb      	lsls	r3, r1, #3
 80001de:	1ac0      	subs	r0, r0, r3
 80001e0:	4152      	adcs	r2, r2
 80001e2:	0883      	lsrs	r3, r0, #2
 80001e4:	428b      	cmp	r3, r1
 80001e6:	d301      	bcc.n	80001ec <__udivsi3+0xe4>
 80001e8:	008b      	lsls	r3, r1, #2
 80001ea:	1ac0      	subs	r0, r0, r3
 80001ec:	4152      	adcs	r2, r2
 80001ee:	0843      	lsrs	r3, r0, #1
 80001f0:	428b      	cmp	r3, r1
 80001f2:	d301      	bcc.n	80001f8 <__udivsi3+0xf0>
 80001f4:	004b      	lsls	r3, r1, #1
 80001f6:	1ac0      	subs	r0, r0, r3
 80001f8:	4152      	adcs	r2, r2
 80001fa:	1a41      	subs	r1, r0, r1
 80001fc:	d200      	bcs.n	8000200 <__udivsi3+0xf8>
 80001fe:	4601      	mov	r1, r0
 8000200:	4152      	adcs	r2, r2
 8000202:	4610      	mov	r0, r2
 8000204:	4770      	bx	lr
 8000206:	e7ff      	b.n	8000208 <__udivsi3+0x100>
 8000208:	b501      	push	{r0, lr}
 800020a:	2000      	movs	r0, #0
 800020c:	f000 f806 	bl	800021c <__aeabi_idiv0>
 8000210:	bd02      	pop	{r1, pc}
 8000212:	46c0      	nop			; (mov r8, r8)

08000214 <__aeabi_uidivmod>:
 8000214:	2900      	cmp	r1, #0
 8000216:	d0f7      	beq.n	8000208 <__udivsi3+0x100>
 8000218:	e776      	b.n	8000108 <__udivsi3>
 800021a:	4770      	bx	lr

0800021c <__aeabi_idiv0>:
 800021c:	4770      	bx	lr
 800021e:	46c0      	nop			; (mov r8, r8)

08000220 <__aeabi_d2uiz>:
 8000220:	b570      	push	{r4, r5, r6, lr}
 8000222:	2200      	movs	r2, #0
 8000224:	4b0c      	ldr	r3, [pc, #48]	; (8000258 <__aeabi_d2uiz+0x38>)
 8000226:	0004      	movs	r4, r0
 8000228:	000d      	movs	r5, r1
 800022a:	f001 f809 	bl	8001240 <__aeabi_dcmpge>
 800022e:	2800      	cmp	r0, #0
 8000230:	d104      	bne.n	800023c <__aeabi_d2uiz+0x1c>
 8000232:	0020      	movs	r0, r4
 8000234:	0029      	movs	r1, r5
 8000236:	f000 fe99 	bl	8000f6c <__aeabi_d2iz>
 800023a:	bd70      	pop	{r4, r5, r6, pc}
 800023c:	4b06      	ldr	r3, [pc, #24]	; (8000258 <__aeabi_d2uiz+0x38>)
 800023e:	2200      	movs	r2, #0
 8000240:	0020      	movs	r0, r4
 8000242:	0029      	movs	r1, r5
 8000244:	f000 fb00 	bl	8000848 <__aeabi_dsub>
 8000248:	f000 fe90 	bl	8000f6c <__aeabi_d2iz>
 800024c:	2380      	movs	r3, #128	; 0x80
 800024e:	061b      	lsls	r3, r3, #24
 8000250:	469c      	mov	ip, r3
 8000252:	4460      	add	r0, ip
 8000254:	e7f1      	b.n	800023a <__aeabi_d2uiz+0x1a>
 8000256:	46c0      	nop			; (mov r8, r8)
 8000258:	41e00000 	.word	0x41e00000

0800025c <__aeabi_ddiv>:
 800025c:	b5f0      	push	{r4, r5, r6, r7, lr}
 800025e:	4657      	mov	r7, sl
 8000260:	464e      	mov	r6, r9
 8000262:	4645      	mov	r5, r8
 8000264:	46de      	mov	lr, fp
 8000266:	b5e0      	push	{r5, r6, r7, lr}
 8000268:	4681      	mov	r9, r0
 800026a:	0005      	movs	r5, r0
 800026c:	030c      	lsls	r4, r1, #12
 800026e:	0048      	lsls	r0, r1, #1
 8000270:	4692      	mov	sl, r2
 8000272:	001f      	movs	r7, r3
 8000274:	b085      	sub	sp, #20
 8000276:	0b24      	lsrs	r4, r4, #12
 8000278:	0d40      	lsrs	r0, r0, #21
 800027a:	0fce      	lsrs	r6, r1, #31
 800027c:	2800      	cmp	r0, #0
 800027e:	d100      	bne.n	8000282 <__aeabi_ddiv+0x26>
 8000280:	e156      	b.n	8000530 <__aeabi_ddiv+0x2d4>
 8000282:	4bd4      	ldr	r3, [pc, #848]	; (80005d4 <__aeabi_ddiv+0x378>)
 8000284:	4298      	cmp	r0, r3
 8000286:	d100      	bne.n	800028a <__aeabi_ddiv+0x2e>
 8000288:	e172      	b.n	8000570 <__aeabi_ddiv+0x314>
 800028a:	0f6b      	lsrs	r3, r5, #29
 800028c:	00e4      	lsls	r4, r4, #3
 800028e:	431c      	orrs	r4, r3
 8000290:	2380      	movs	r3, #128	; 0x80
 8000292:	041b      	lsls	r3, r3, #16
 8000294:	4323      	orrs	r3, r4
 8000296:	4698      	mov	r8, r3
 8000298:	4bcf      	ldr	r3, [pc, #828]	; (80005d8 <__aeabi_ddiv+0x37c>)
 800029a:	00ed      	lsls	r5, r5, #3
 800029c:	469b      	mov	fp, r3
 800029e:	2300      	movs	r3, #0
 80002a0:	4699      	mov	r9, r3
 80002a2:	4483      	add	fp, r0
 80002a4:	9300      	str	r3, [sp, #0]
 80002a6:	033c      	lsls	r4, r7, #12
 80002a8:	007b      	lsls	r3, r7, #1
 80002aa:	4650      	mov	r0, sl
 80002ac:	0b24      	lsrs	r4, r4, #12
 80002ae:	0d5b      	lsrs	r3, r3, #21
 80002b0:	0fff      	lsrs	r7, r7, #31
 80002b2:	2b00      	cmp	r3, #0
 80002b4:	d100      	bne.n	80002b8 <__aeabi_ddiv+0x5c>
 80002b6:	e11f      	b.n	80004f8 <__aeabi_ddiv+0x29c>
 80002b8:	4ac6      	ldr	r2, [pc, #792]	; (80005d4 <__aeabi_ddiv+0x378>)
 80002ba:	4293      	cmp	r3, r2
 80002bc:	d100      	bne.n	80002c0 <__aeabi_ddiv+0x64>
 80002be:	e162      	b.n	8000586 <__aeabi_ddiv+0x32a>
 80002c0:	49c5      	ldr	r1, [pc, #788]	; (80005d8 <__aeabi_ddiv+0x37c>)
 80002c2:	0f42      	lsrs	r2, r0, #29
 80002c4:	468c      	mov	ip, r1
 80002c6:	00e4      	lsls	r4, r4, #3
 80002c8:	4659      	mov	r1, fp
 80002ca:	4314      	orrs	r4, r2
 80002cc:	2280      	movs	r2, #128	; 0x80
 80002ce:	4463      	add	r3, ip
 80002d0:	0412      	lsls	r2, r2, #16
 80002d2:	1acb      	subs	r3, r1, r3
 80002d4:	4314      	orrs	r4, r2
 80002d6:	469b      	mov	fp, r3
 80002d8:	00c2      	lsls	r2, r0, #3
 80002da:	2000      	movs	r0, #0
 80002dc:	0033      	movs	r3, r6
 80002de:	407b      	eors	r3, r7
 80002e0:	469a      	mov	sl, r3
 80002e2:	464b      	mov	r3, r9
 80002e4:	2b0f      	cmp	r3, #15
 80002e6:	d827      	bhi.n	8000338 <__aeabi_ddiv+0xdc>
 80002e8:	49bc      	ldr	r1, [pc, #752]	; (80005dc <__aeabi_ddiv+0x380>)
 80002ea:	009b      	lsls	r3, r3, #2
 80002ec:	58cb      	ldr	r3, [r1, r3]
 80002ee:	469f      	mov	pc, r3
 80002f0:	46b2      	mov	sl, r6
 80002f2:	9b00      	ldr	r3, [sp, #0]
 80002f4:	2b02      	cmp	r3, #2
 80002f6:	d016      	beq.n	8000326 <__aeabi_ddiv+0xca>
 80002f8:	2b03      	cmp	r3, #3
 80002fa:	d100      	bne.n	80002fe <__aeabi_ddiv+0xa2>
 80002fc:	e28e      	b.n	800081c <__aeabi_ddiv+0x5c0>
 80002fe:	2b01      	cmp	r3, #1
 8000300:	d000      	beq.n	8000304 <__aeabi_ddiv+0xa8>
 8000302:	e0d9      	b.n	80004b8 <__aeabi_ddiv+0x25c>
 8000304:	2300      	movs	r3, #0
 8000306:	2400      	movs	r4, #0
 8000308:	2500      	movs	r5, #0
 800030a:	4652      	mov	r2, sl
 800030c:	051b      	lsls	r3, r3, #20
 800030e:	4323      	orrs	r3, r4
 8000310:	07d2      	lsls	r2, r2, #31
 8000312:	4313      	orrs	r3, r2
 8000314:	0028      	movs	r0, r5
 8000316:	0019      	movs	r1, r3
 8000318:	b005      	add	sp, #20
 800031a:	bcf0      	pop	{r4, r5, r6, r7}
 800031c:	46bb      	mov	fp, r7
 800031e:	46b2      	mov	sl, r6
 8000320:	46a9      	mov	r9, r5
 8000322:	46a0      	mov	r8, r4
 8000324:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8000326:	2400      	movs	r4, #0
 8000328:	2500      	movs	r5, #0
 800032a:	4baa      	ldr	r3, [pc, #680]	; (80005d4 <__aeabi_ddiv+0x378>)
 800032c:	e7ed      	b.n	800030a <__aeabi_ddiv+0xae>
 800032e:	46ba      	mov	sl, r7
 8000330:	46a0      	mov	r8, r4
 8000332:	0015      	movs	r5, r2
 8000334:	9000      	str	r0, [sp, #0]
 8000336:	e7dc      	b.n	80002f2 <__aeabi_ddiv+0x96>
 8000338:	4544      	cmp	r4, r8
 800033a:	d200      	bcs.n	800033e <__aeabi_ddiv+0xe2>
 800033c:	e1c7      	b.n	80006ce <__aeabi_ddiv+0x472>
 800033e:	d100      	bne.n	8000342 <__aeabi_ddiv+0xe6>
 8000340:	e1c2      	b.n	80006c8 <__aeabi_ddiv+0x46c>
 8000342:	2301      	movs	r3, #1
 8000344:	425b      	negs	r3, r3
 8000346:	469c      	mov	ip, r3
 8000348:	002e      	movs	r6, r5
 800034a:	4640      	mov	r0, r8
 800034c:	2500      	movs	r5, #0
 800034e:	44e3      	add	fp, ip
 8000350:	0223      	lsls	r3, r4, #8
 8000352:	0e14      	lsrs	r4, r2, #24
 8000354:	431c      	orrs	r4, r3
 8000356:	0c1b      	lsrs	r3, r3, #16
 8000358:	4699      	mov	r9, r3
 800035a:	0423      	lsls	r3, r4, #16
 800035c:	0c1f      	lsrs	r7, r3, #16
 800035e:	0212      	lsls	r2, r2, #8
 8000360:	4649      	mov	r1, r9
 8000362:	9200      	str	r2, [sp, #0]
 8000364:	9701      	str	r7, [sp, #4]
 8000366:	f7ff ff55 	bl	8000214 <__aeabi_uidivmod>
 800036a:	0002      	movs	r2, r0
 800036c:	437a      	muls	r2, r7
 800036e:	040b      	lsls	r3, r1, #16
 8000370:	0c31      	lsrs	r1, r6, #16
 8000372:	4680      	mov	r8, r0
 8000374:	4319      	orrs	r1, r3
 8000376:	428a      	cmp	r2, r1
 8000378:	d907      	bls.n	800038a <__aeabi_ddiv+0x12e>
 800037a:	2301      	movs	r3, #1
 800037c:	425b      	negs	r3, r3
 800037e:	469c      	mov	ip, r3
 8000380:	1909      	adds	r1, r1, r4
 8000382:	44e0      	add	r8, ip
 8000384:	428c      	cmp	r4, r1
 8000386:	d800      	bhi.n	800038a <__aeabi_ddiv+0x12e>
 8000388:	e207      	b.n	800079a <__aeabi_ddiv+0x53e>
 800038a:	1a88      	subs	r0, r1, r2
 800038c:	4649      	mov	r1, r9
 800038e:	f7ff ff41 	bl	8000214 <__aeabi_uidivmod>
 8000392:	0409      	lsls	r1, r1, #16
 8000394:	468c      	mov	ip, r1
 8000396:	0431      	lsls	r1, r6, #16
 8000398:	4666      	mov	r6, ip
 800039a:	9a01      	ldr	r2, [sp, #4]
 800039c:	0c09      	lsrs	r1, r1, #16
 800039e:	4342      	muls	r2, r0
 80003a0:	0003      	movs	r3, r0
 80003a2:	4331      	orrs	r1, r6
 80003a4:	428a      	cmp	r2, r1
 80003a6:	d904      	bls.n	80003b2 <__aeabi_ddiv+0x156>
 80003a8:	1909      	adds	r1, r1, r4
 80003aa:	3b01      	subs	r3, #1
 80003ac:	428c      	cmp	r4, r1
 80003ae:	d800      	bhi.n	80003b2 <__aeabi_ddiv+0x156>
 80003b0:	e1ed      	b.n	800078e <__aeabi_ddiv+0x532>
 80003b2:	1a88      	subs	r0, r1, r2
 80003b4:	4642      	mov	r2, r8
 80003b6:	0412      	lsls	r2, r2, #16
 80003b8:	431a      	orrs	r2, r3
 80003ba:	4690      	mov	r8, r2
 80003bc:	4641      	mov	r1, r8
 80003be:	9b00      	ldr	r3, [sp, #0]
 80003c0:	040e      	lsls	r6, r1, #16
 80003c2:	0c1b      	lsrs	r3, r3, #16
 80003c4:	001f      	movs	r7, r3
 80003c6:	9302      	str	r3, [sp, #8]
 80003c8:	9b00      	ldr	r3, [sp, #0]
 80003ca:	0c36      	lsrs	r6, r6, #16
 80003cc:	041b      	lsls	r3, r3, #16
 80003ce:	0c19      	lsrs	r1, r3, #16
 80003d0:	000b      	movs	r3, r1
 80003d2:	4373      	muls	r3, r6
 80003d4:	0c12      	lsrs	r2, r2, #16
 80003d6:	437e      	muls	r6, r7
 80003d8:	9103      	str	r1, [sp, #12]
 80003da:	4351      	muls	r1, r2
 80003dc:	437a      	muls	r2, r7
 80003de:	0c1f      	lsrs	r7, r3, #16
 80003e0:	46bc      	mov	ip, r7
 80003e2:	1876      	adds	r6, r6, r1
 80003e4:	4466      	add	r6, ip
 80003e6:	42b1      	cmp	r1, r6
 80003e8:	d903      	bls.n	80003f2 <__aeabi_ddiv+0x196>
 80003ea:	2180      	movs	r1, #128	; 0x80
 80003ec:	0249      	lsls	r1, r1, #9
 80003ee:	468c      	mov	ip, r1
 80003f0:	4462      	add	r2, ip
 80003f2:	0c31      	lsrs	r1, r6, #16
 80003f4:	188a      	adds	r2, r1, r2
 80003f6:	0431      	lsls	r1, r6, #16
 80003f8:	041e      	lsls	r6, r3, #16
 80003fa:	0c36      	lsrs	r6, r6, #16
 80003fc:	198e      	adds	r6, r1, r6
 80003fe:	4290      	cmp	r0, r2
 8000400:	d302      	bcc.n	8000408 <__aeabi_ddiv+0x1ac>
 8000402:	d112      	bne.n	800042a <__aeabi_ddiv+0x1ce>
 8000404:	42b5      	cmp	r5, r6
 8000406:	d210      	bcs.n	800042a <__aeabi_ddiv+0x1ce>
 8000408:	4643      	mov	r3, r8
 800040a:	1e59      	subs	r1, r3, #1
 800040c:	9b00      	ldr	r3, [sp, #0]
 800040e:	469c      	mov	ip, r3
 8000410:	4465      	add	r5, ip
 8000412:	001f      	movs	r7, r3
 8000414:	429d      	cmp	r5, r3
 8000416:	419b      	sbcs	r3, r3
 8000418:	425b      	negs	r3, r3
 800041a:	191b      	adds	r3, r3, r4
 800041c:	18c0      	adds	r0, r0, r3
 800041e:	4284      	cmp	r4, r0
 8000420:	d200      	bcs.n	8000424 <__aeabi_ddiv+0x1c8>
 8000422:	e1a0      	b.n	8000766 <__aeabi_ddiv+0x50a>
 8000424:	d100      	bne.n	8000428 <__aeabi_ddiv+0x1cc>
 8000426:	e19b      	b.n	8000760 <__aeabi_ddiv+0x504>
 8000428:	4688      	mov	r8, r1
 800042a:	1bae      	subs	r6, r5, r6
 800042c:	42b5      	cmp	r5, r6
 800042e:	41ad      	sbcs	r5, r5
 8000430:	1a80      	subs	r0, r0, r2
 8000432:	426d      	negs	r5, r5
 8000434:	1b40      	subs	r0, r0, r5
 8000436:	4284      	cmp	r4, r0
 8000438:	d100      	bne.n	800043c <__aeabi_ddiv+0x1e0>
 800043a:	e1d5      	b.n	80007e8 <__aeabi_ddiv+0x58c>
 800043c:	4649      	mov	r1, r9
 800043e:	f7ff fee9 	bl	8000214 <__aeabi_uidivmod>
 8000442:	9a01      	ldr	r2, [sp, #4]
 8000444:	040b      	lsls	r3, r1, #16
 8000446:	4342      	muls	r2, r0
 8000448:	0c31      	lsrs	r1, r6, #16
 800044a:	0005      	movs	r5, r0
 800044c:	4319      	orrs	r1, r3
 800044e:	428a      	cmp	r2, r1
 8000450:	d900      	bls.n	8000454 <__aeabi_ddiv+0x1f8>
 8000452:	e16c      	b.n	800072e <__aeabi_ddiv+0x4d2>
 8000454:	1a88      	subs	r0, r1, r2
 8000456:	4649      	mov	r1, r9
 8000458:	f7ff fedc 	bl	8000214 <__aeabi_uidivmod>
 800045c:	9a01      	ldr	r2, [sp, #4]
 800045e:	0436      	lsls	r6, r6, #16
 8000460:	4342      	muls	r2, r0
 8000462:	0409      	lsls	r1, r1, #16
 8000464:	0c36      	lsrs	r6, r6, #16
 8000466:	0003      	movs	r3, r0
 8000468:	430e      	orrs	r6, r1
 800046a:	42b2      	cmp	r2, r6
 800046c:	d900      	bls.n	8000470 <__aeabi_ddiv+0x214>
 800046e:	e153      	b.n	8000718 <__aeabi_ddiv+0x4bc>
 8000470:	9803      	ldr	r0, [sp, #12]
 8000472:	1ab6      	subs	r6, r6, r2
 8000474:	0002      	movs	r2, r0
 8000476:	042d      	lsls	r5, r5, #16
 8000478:	431d      	orrs	r5, r3
 800047a:	9f02      	ldr	r7, [sp, #8]
 800047c:	042b      	lsls	r3, r5, #16
 800047e:	0c1b      	lsrs	r3, r3, #16
 8000480:	435a      	muls	r2, r3
 8000482:	437b      	muls	r3, r7
 8000484:	469c      	mov	ip, r3
 8000486:	0c29      	lsrs	r1, r5, #16
 8000488:	4348      	muls	r0, r1
 800048a:	0c13      	lsrs	r3, r2, #16
 800048c:	4484      	add	ip, r0
 800048e:	4463      	add	r3, ip
 8000490:	4379      	muls	r1, r7
 8000492:	4298      	cmp	r0, r3
 8000494:	d903      	bls.n	800049e <__aeabi_ddiv+0x242>
 8000496:	2080      	movs	r0, #128	; 0x80
 8000498:	0240      	lsls	r0, r0, #9
 800049a:	4684      	mov	ip, r0
 800049c:	4461      	add	r1, ip
 800049e:	0c18      	lsrs	r0, r3, #16
 80004a0:	0412      	lsls	r2, r2, #16
 80004a2:	041b      	lsls	r3, r3, #16
 80004a4:	0c12      	lsrs	r2, r2, #16
 80004a6:	1841      	adds	r1, r0, r1
 80004a8:	189b      	adds	r3, r3, r2
 80004aa:	428e      	cmp	r6, r1
 80004ac:	d200      	bcs.n	80004b0 <__aeabi_ddiv+0x254>
 80004ae:	e0ff      	b.n	80006b0 <__aeabi_ddiv+0x454>
 80004b0:	d100      	bne.n	80004b4 <__aeabi_ddiv+0x258>
 80004b2:	e0fa      	b.n	80006aa <__aeabi_ddiv+0x44e>
 80004b4:	2301      	movs	r3, #1
 80004b6:	431d      	orrs	r5, r3
 80004b8:	4a49      	ldr	r2, [pc, #292]	; (80005e0 <__aeabi_ddiv+0x384>)
 80004ba:	445a      	add	r2, fp
 80004bc:	2a00      	cmp	r2, #0
 80004be:	dc00      	bgt.n	80004c2 <__aeabi_ddiv+0x266>
 80004c0:	e0aa      	b.n	8000618 <__aeabi_ddiv+0x3bc>
 80004c2:	076b      	lsls	r3, r5, #29
 80004c4:	d000      	beq.n	80004c8 <__aeabi_ddiv+0x26c>
 80004c6:	e13d      	b.n	8000744 <__aeabi_ddiv+0x4e8>
 80004c8:	08ed      	lsrs	r5, r5, #3
 80004ca:	4643      	mov	r3, r8
 80004cc:	01db      	lsls	r3, r3, #7
 80004ce:	d506      	bpl.n	80004de <__aeabi_ddiv+0x282>
 80004d0:	4642      	mov	r2, r8
 80004d2:	4b44      	ldr	r3, [pc, #272]	; (80005e4 <__aeabi_ddiv+0x388>)
 80004d4:	401a      	ands	r2, r3
 80004d6:	4690      	mov	r8, r2
 80004d8:	2280      	movs	r2, #128	; 0x80
 80004da:	00d2      	lsls	r2, r2, #3
 80004dc:	445a      	add	r2, fp
 80004de:	4b42      	ldr	r3, [pc, #264]	; (80005e8 <__aeabi_ddiv+0x38c>)
 80004e0:	429a      	cmp	r2, r3
 80004e2:	dd00      	ble.n	80004e6 <__aeabi_ddiv+0x28a>
 80004e4:	e71f      	b.n	8000326 <__aeabi_ddiv+0xca>
 80004e6:	4643      	mov	r3, r8
 80004e8:	075b      	lsls	r3, r3, #29
 80004ea:	431d      	orrs	r5, r3
 80004ec:	4643      	mov	r3, r8
 80004ee:	0552      	lsls	r2, r2, #21
 80004f0:	025c      	lsls	r4, r3, #9
 80004f2:	0b24      	lsrs	r4, r4, #12
 80004f4:	0d53      	lsrs	r3, r2, #21
 80004f6:	e708      	b.n	800030a <__aeabi_ddiv+0xae>
 80004f8:	4652      	mov	r2, sl
 80004fa:	4322      	orrs	r2, r4
 80004fc:	d100      	bne.n	8000500 <__aeabi_ddiv+0x2a4>
 80004fe:	e07b      	b.n	80005f8 <__aeabi_ddiv+0x39c>
 8000500:	2c00      	cmp	r4, #0
 8000502:	d100      	bne.n	8000506 <__aeabi_ddiv+0x2aa>
 8000504:	e0fa      	b.n	80006fc <__aeabi_ddiv+0x4a0>
 8000506:	0020      	movs	r0, r4
 8000508:	f000 fea4 	bl	8001254 <__clzsi2>
 800050c:	0002      	movs	r2, r0
 800050e:	3a0b      	subs	r2, #11
 8000510:	231d      	movs	r3, #29
 8000512:	0001      	movs	r1, r0
 8000514:	1a9b      	subs	r3, r3, r2
 8000516:	4652      	mov	r2, sl
 8000518:	3908      	subs	r1, #8
 800051a:	40da      	lsrs	r2, r3
 800051c:	408c      	lsls	r4, r1
 800051e:	4314      	orrs	r4, r2
 8000520:	4652      	mov	r2, sl
 8000522:	408a      	lsls	r2, r1
 8000524:	4b31      	ldr	r3, [pc, #196]	; (80005ec <__aeabi_ddiv+0x390>)
 8000526:	4458      	add	r0, fp
 8000528:	469b      	mov	fp, r3
 800052a:	4483      	add	fp, r0
 800052c:	2000      	movs	r0, #0
 800052e:	e6d5      	b.n	80002dc <__aeabi_ddiv+0x80>
 8000530:	464b      	mov	r3, r9
 8000532:	4323      	orrs	r3, r4
 8000534:	4698      	mov	r8, r3
 8000536:	d044      	beq.n	80005c2 <__aeabi_ddiv+0x366>
 8000538:	2c00      	cmp	r4, #0
 800053a:	d100      	bne.n	800053e <__aeabi_ddiv+0x2e2>
 800053c:	e0ce      	b.n	80006dc <__aeabi_ddiv+0x480>
 800053e:	0020      	movs	r0, r4
 8000540:	f000 fe88 	bl	8001254 <__clzsi2>
 8000544:	0001      	movs	r1, r0
 8000546:	0002      	movs	r2, r0
 8000548:	390b      	subs	r1, #11
 800054a:	231d      	movs	r3, #29
 800054c:	1a5b      	subs	r3, r3, r1
 800054e:	4649      	mov	r1, r9
 8000550:	0010      	movs	r0, r2
 8000552:	40d9      	lsrs	r1, r3
 8000554:	3808      	subs	r0, #8
 8000556:	4084      	lsls	r4, r0
 8000558:	000b      	movs	r3, r1
 800055a:	464d      	mov	r5, r9
 800055c:	4323      	orrs	r3, r4
 800055e:	4698      	mov	r8, r3
 8000560:	4085      	lsls	r5, r0
 8000562:	4823      	ldr	r0, [pc, #140]	; (80005f0 <__aeabi_ddiv+0x394>)
 8000564:	1a83      	subs	r3, r0, r2
 8000566:	469b      	mov	fp, r3
 8000568:	2300      	movs	r3, #0
 800056a:	4699      	mov	r9, r3
 800056c:	9300      	str	r3, [sp, #0]
 800056e:	e69a      	b.n	80002a6 <__aeabi_ddiv+0x4a>
 8000570:	464b      	mov	r3, r9
 8000572:	4323      	orrs	r3, r4
 8000574:	4698      	mov	r8, r3
 8000576:	d11d      	bne.n	80005b4 <__aeabi_ddiv+0x358>
 8000578:	2308      	movs	r3, #8
 800057a:	4699      	mov	r9, r3
 800057c:	3b06      	subs	r3, #6
 800057e:	2500      	movs	r5, #0
 8000580:	4683      	mov	fp, r0
 8000582:	9300      	str	r3, [sp, #0]
 8000584:	e68f      	b.n	80002a6 <__aeabi_ddiv+0x4a>
 8000586:	4652      	mov	r2, sl
 8000588:	4322      	orrs	r2, r4
 800058a:	d109      	bne.n	80005a0 <__aeabi_ddiv+0x344>
 800058c:	2302      	movs	r3, #2
 800058e:	4649      	mov	r1, r9
 8000590:	4319      	orrs	r1, r3
 8000592:	4b18      	ldr	r3, [pc, #96]	; (80005f4 <__aeabi_ddiv+0x398>)
 8000594:	4689      	mov	r9, r1
 8000596:	469c      	mov	ip, r3
 8000598:	2400      	movs	r4, #0
 800059a:	2002      	movs	r0, #2
 800059c:	44e3      	add	fp, ip
 800059e:	e69d      	b.n	80002dc <__aeabi_ddiv+0x80>
 80005a0:	2303      	movs	r3, #3
 80005a2:	464a      	mov	r2, r9
 80005a4:	431a      	orrs	r2, r3
 80005a6:	4b13      	ldr	r3, [pc, #76]	; (80005f4 <__aeabi_ddiv+0x398>)
 80005a8:	4691      	mov	r9, r2
 80005aa:	469c      	mov	ip, r3
 80005ac:	4652      	mov	r2, sl
 80005ae:	2003      	movs	r0, #3
 80005b0:	44e3      	add	fp, ip
 80005b2:	e693      	b.n	80002dc <__aeabi_ddiv+0x80>
 80005b4:	230c      	movs	r3, #12
 80005b6:	4699      	mov	r9, r3
 80005b8:	3b09      	subs	r3, #9
 80005ba:	46a0      	mov	r8, r4
 80005bc:	4683      	mov	fp, r0
 80005be:	9300      	str	r3, [sp, #0]
 80005c0:	e671      	b.n	80002a6 <__aeabi_ddiv+0x4a>
 80005c2:	2304      	movs	r3, #4
 80005c4:	4699      	mov	r9, r3
 80005c6:	2300      	movs	r3, #0
 80005c8:	469b      	mov	fp, r3
 80005ca:	3301      	adds	r3, #1
 80005cc:	2500      	movs	r5, #0
 80005ce:	9300      	str	r3, [sp, #0]
 80005d0:	e669      	b.n	80002a6 <__aeabi_ddiv+0x4a>
 80005d2:	46c0      	nop			; (mov r8, r8)
 80005d4:	000007ff 	.word	0x000007ff
 80005d8:	fffffc01 	.word	0xfffffc01
 80005dc:	08005dac 	.word	0x08005dac
 80005e0:	000003ff 	.word	0x000003ff
 80005e4:	feffffff 	.word	0xfeffffff
 80005e8:	000007fe 	.word	0x000007fe
 80005ec:	000003f3 	.word	0x000003f3
 80005f0:	fffffc0d 	.word	0xfffffc0d
 80005f4:	fffff801 	.word	0xfffff801
 80005f8:	4649      	mov	r1, r9
 80005fa:	2301      	movs	r3, #1
 80005fc:	4319      	orrs	r1, r3
 80005fe:	4689      	mov	r9, r1
 8000600:	2400      	movs	r4, #0
 8000602:	2001      	movs	r0, #1
 8000604:	e66a      	b.n	80002dc <__aeabi_ddiv+0x80>
 8000606:	2300      	movs	r3, #0
 8000608:	2480      	movs	r4, #128	; 0x80
 800060a:	469a      	mov	sl, r3
 800060c:	2500      	movs	r5, #0
 800060e:	4b8a      	ldr	r3, [pc, #552]	; (8000838 <__aeabi_ddiv+0x5dc>)
 8000610:	0324      	lsls	r4, r4, #12
 8000612:	e67a      	b.n	800030a <__aeabi_ddiv+0xae>
 8000614:	2501      	movs	r5, #1
 8000616:	426d      	negs	r5, r5
 8000618:	2301      	movs	r3, #1
 800061a:	1a9b      	subs	r3, r3, r2
 800061c:	2b38      	cmp	r3, #56	; 0x38
 800061e:	dd00      	ble.n	8000622 <__aeabi_ddiv+0x3c6>
 8000620:	e670      	b.n	8000304 <__aeabi_ddiv+0xa8>
 8000622:	2b1f      	cmp	r3, #31
 8000624:	dc00      	bgt.n	8000628 <__aeabi_ddiv+0x3cc>
 8000626:	e0bf      	b.n	80007a8 <__aeabi_ddiv+0x54c>
 8000628:	211f      	movs	r1, #31
 800062a:	4249      	negs	r1, r1
 800062c:	1a8a      	subs	r2, r1, r2
 800062e:	4641      	mov	r1, r8
 8000630:	40d1      	lsrs	r1, r2
 8000632:	000a      	movs	r2, r1
 8000634:	2b20      	cmp	r3, #32
 8000636:	d004      	beq.n	8000642 <__aeabi_ddiv+0x3e6>
 8000638:	4641      	mov	r1, r8
 800063a:	4b80      	ldr	r3, [pc, #512]	; (800083c <__aeabi_ddiv+0x5e0>)
 800063c:	445b      	add	r3, fp
 800063e:	4099      	lsls	r1, r3
 8000640:	430d      	orrs	r5, r1
 8000642:	1e6b      	subs	r3, r5, #1
 8000644:	419d      	sbcs	r5, r3
 8000646:	2307      	movs	r3, #7
 8000648:	432a      	orrs	r2, r5
 800064a:	001d      	movs	r5, r3
 800064c:	2400      	movs	r4, #0
 800064e:	4015      	ands	r5, r2
 8000650:	4213      	tst	r3, r2
 8000652:	d100      	bne.n	8000656 <__aeabi_ddiv+0x3fa>
 8000654:	e0d4      	b.n	8000800 <__aeabi_ddiv+0x5a4>
 8000656:	210f      	movs	r1, #15
 8000658:	2300      	movs	r3, #0
 800065a:	4011      	ands	r1, r2
 800065c:	2904      	cmp	r1, #4
 800065e:	d100      	bne.n	8000662 <__aeabi_ddiv+0x406>
 8000660:	e0cb      	b.n	80007fa <__aeabi_ddiv+0x59e>
 8000662:	1d11      	adds	r1, r2, #4
 8000664:	4291      	cmp	r1, r2
 8000666:	4192      	sbcs	r2, r2
 8000668:	4252      	negs	r2, r2
 800066a:	189b      	adds	r3, r3, r2
 800066c:	000a      	movs	r2, r1
 800066e:	0219      	lsls	r1, r3, #8
 8000670:	d400      	bmi.n	8000674 <__aeabi_ddiv+0x418>
 8000672:	e0c2      	b.n	80007fa <__aeabi_ddiv+0x59e>
 8000674:	2301      	movs	r3, #1
 8000676:	2400      	movs	r4, #0
 8000678:	2500      	movs	r5, #0
 800067a:	e646      	b.n	800030a <__aeabi_ddiv+0xae>
 800067c:	2380      	movs	r3, #128	; 0x80
 800067e:	4641      	mov	r1, r8
 8000680:	031b      	lsls	r3, r3, #12
 8000682:	4219      	tst	r1, r3
 8000684:	d008      	beq.n	8000698 <__aeabi_ddiv+0x43c>
 8000686:	421c      	tst	r4, r3
 8000688:	d106      	bne.n	8000698 <__aeabi_ddiv+0x43c>
 800068a:	431c      	orrs	r4, r3
 800068c:	0324      	lsls	r4, r4, #12
 800068e:	46ba      	mov	sl, r7
 8000690:	0015      	movs	r5, r2
 8000692:	4b69      	ldr	r3, [pc, #420]	; (8000838 <__aeabi_ddiv+0x5dc>)
 8000694:	0b24      	lsrs	r4, r4, #12
 8000696:	e638      	b.n	800030a <__aeabi_ddiv+0xae>
 8000698:	2480      	movs	r4, #128	; 0x80
 800069a:	4643      	mov	r3, r8
 800069c:	0324      	lsls	r4, r4, #12
 800069e:	431c      	orrs	r4, r3
 80006a0:	0324      	lsls	r4, r4, #12
 80006a2:	46b2      	mov	sl, r6
 80006a4:	4b64      	ldr	r3, [pc, #400]	; (8000838 <__aeabi_ddiv+0x5dc>)
 80006a6:	0b24      	lsrs	r4, r4, #12
 80006a8:	e62f      	b.n	800030a <__aeabi_ddiv+0xae>
 80006aa:	2b00      	cmp	r3, #0
 80006ac:	d100      	bne.n	80006b0 <__aeabi_ddiv+0x454>
 80006ae:	e703      	b.n	80004b8 <__aeabi_ddiv+0x25c>
 80006b0:	19a6      	adds	r6, r4, r6
 80006b2:	1e68      	subs	r0, r5, #1
 80006b4:	42a6      	cmp	r6, r4
 80006b6:	d200      	bcs.n	80006ba <__aeabi_ddiv+0x45e>
 80006b8:	e08d      	b.n	80007d6 <__aeabi_ddiv+0x57a>
 80006ba:	428e      	cmp	r6, r1
 80006bc:	d200      	bcs.n	80006c0 <__aeabi_ddiv+0x464>
 80006be:	e0a3      	b.n	8000808 <__aeabi_ddiv+0x5ac>
 80006c0:	d100      	bne.n	80006c4 <__aeabi_ddiv+0x468>
 80006c2:	e0b3      	b.n	800082c <__aeabi_ddiv+0x5d0>
 80006c4:	0005      	movs	r5, r0
 80006c6:	e6f5      	b.n	80004b4 <__aeabi_ddiv+0x258>
 80006c8:	42aa      	cmp	r2, r5
 80006ca:	d900      	bls.n	80006ce <__aeabi_ddiv+0x472>
 80006cc:	e639      	b.n	8000342 <__aeabi_ddiv+0xe6>
 80006ce:	4643      	mov	r3, r8
 80006d0:	07de      	lsls	r6, r3, #31
 80006d2:	0858      	lsrs	r0, r3, #1
 80006d4:	086b      	lsrs	r3, r5, #1
 80006d6:	431e      	orrs	r6, r3
 80006d8:	07ed      	lsls	r5, r5, #31
 80006da:	e639      	b.n	8000350 <__aeabi_ddiv+0xf4>
 80006dc:	4648      	mov	r0, r9
 80006de:	f000 fdb9 	bl	8001254 <__clzsi2>
 80006e2:	0001      	movs	r1, r0
 80006e4:	0002      	movs	r2, r0
 80006e6:	3115      	adds	r1, #21
 80006e8:	3220      	adds	r2, #32
 80006ea:	291c      	cmp	r1, #28
 80006ec:	dc00      	bgt.n	80006f0 <__aeabi_ddiv+0x494>
 80006ee:	e72c      	b.n	800054a <__aeabi_ddiv+0x2ee>
 80006f0:	464b      	mov	r3, r9
 80006f2:	3808      	subs	r0, #8
 80006f4:	4083      	lsls	r3, r0
 80006f6:	2500      	movs	r5, #0
 80006f8:	4698      	mov	r8, r3
 80006fa:	e732      	b.n	8000562 <__aeabi_ddiv+0x306>
 80006fc:	f000 fdaa 	bl	8001254 <__clzsi2>
 8000700:	0003      	movs	r3, r0
 8000702:	001a      	movs	r2, r3
 8000704:	3215      	adds	r2, #21
 8000706:	3020      	adds	r0, #32
 8000708:	2a1c      	cmp	r2, #28
 800070a:	dc00      	bgt.n	800070e <__aeabi_ddiv+0x4b2>
 800070c:	e700      	b.n	8000510 <__aeabi_ddiv+0x2b4>
 800070e:	4654      	mov	r4, sl
 8000710:	3b08      	subs	r3, #8
 8000712:	2200      	movs	r2, #0
 8000714:	409c      	lsls	r4, r3
 8000716:	e705      	b.n	8000524 <__aeabi_ddiv+0x2c8>
 8000718:	1936      	adds	r6, r6, r4
 800071a:	3b01      	subs	r3, #1
 800071c:	42b4      	cmp	r4, r6
 800071e:	d900      	bls.n	8000722 <__aeabi_ddiv+0x4c6>
 8000720:	e6a6      	b.n	8000470 <__aeabi_ddiv+0x214>
 8000722:	42b2      	cmp	r2, r6
 8000724:	d800      	bhi.n	8000728 <__aeabi_ddiv+0x4cc>
 8000726:	e6a3      	b.n	8000470 <__aeabi_ddiv+0x214>
 8000728:	1e83      	subs	r3, r0, #2
 800072a:	1936      	adds	r6, r6, r4
 800072c:	e6a0      	b.n	8000470 <__aeabi_ddiv+0x214>
 800072e:	1909      	adds	r1, r1, r4
 8000730:	3d01      	subs	r5, #1
 8000732:	428c      	cmp	r4, r1
 8000734:	d900      	bls.n	8000738 <__aeabi_ddiv+0x4dc>
 8000736:	e68d      	b.n	8000454 <__aeabi_ddiv+0x1f8>
 8000738:	428a      	cmp	r2, r1
 800073a:	d800      	bhi.n	800073e <__aeabi_ddiv+0x4e2>
 800073c:	e68a      	b.n	8000454 <__aeabi_ddiv+0x1f8>
 800073e:	1e85      	subs	r5, r0, #2
 8000740:	1909      	adds	r1, r1, r4
 8000742:	e687      	b.n	8000454 <__aeabi_ddiv+0x1f8>
 8000744:	230f      	movs	r3, #15
 8000746:	402b      	ands	r3, r5
 8000748:	2b04      	cmp	r3, #4
 800074a:	d100      	bne.n	800074e <__aeabi_ddiv+0x4f2>
 800074c:	e6bc      	b.n	80004c8 <__aeabi_ddiv+0x26c>
 800074e:	2305      	movs	r3, #5
 8000750:	425b      	negs	r3, r3
 8000752:	42ab      	cmp	r3, r5
 8000754:	419b      	sbcs	r3, r3
 8000756:	3504      	adds	r5, #4
 8000758:	425b      	negs	r3, r3
 800075a:	08ed      	lsrs	r5, r5, #3
 800075c:	4498      	add	r8, r3
 800075e:	e6b4      	b.n	80004ca <__aeabi_ddiv+0x26e>
 8000760:	42af      	cmp	r7, r5
 8000762:	d900      	bls.n	8000766 <__aeabi_ddiv+0x50a>
 8000764:	e660      	b.n	8000428 <__aeabi_ddiv+0x1cc>
 8000766:	4282      	cmp	r2, r0
 8000768:	d804      	bhi.n	8000774 <__aeabi_ddiv+0x518>
 800076a:	d000      	beq.n	800076e <__aeabi_ddiv+0x512>
 800076c:	e65c      	b.n	8000428 <__aeabi_ddiv+0x1cc>
 800076e:	42ae      	cmp	r6, r5
 8000770:	d800      	bhi.n	8000774 <__aeabi_ddiv+0x518>
 8000772:	e659      	b.n	8000428 <__aeabi_ddiv+0x1cc>
 8000774:	2302      	movs	r3, #2
 8000776:	425b      	negs	r3, r3
 8000778:	469c      	mov	ip, r3
 800077a:	9b00      	ldr	r3, [sp, #0]
 800077c:	44e0      	add	r8, ip
 800077e:	469c      	mov	ip, r3
 8000780:	4465      	add	r5, ip
 8000782:	429d      	cmp	r5, r3
 8000784:	419b      	sbcs	r3, r3
 8000786:	425b      	negs	r3, r3
 8000788:	191b      	adds	r3, r3, r4
 800078a:	18c0      	adds	r0, r0, r3
 800078c:	e64d      	b.n	800042a <__aeabi_ddiv+0x1ce>
 800078e:	428a      	cmp	r2, r1
 8000790:	d800      	bhi.n	8000794 <__aeabi_ddiv+0x538>
 8000792:	e60e      	b.n	80003b2 <__aeabi_ddiv+0x156>
 8000794:	1e83      	subs	r3, r0, #2
 8000796:	1909      	adds	r1, r1, r4
 8000798:	e60b      	b.n	80003b2 <__aeabi_ddiv+0x156>
 800079a:	428a      	cmp	r2, r1
 800079c:	d800      	bhi.n	80007a0 <__aeabi_ddiv+0x544>
 800079e:	e5f4      	b.n	800038a <__aeabi_ddiv+0x12e>
 80007a0:	1e83      	subs	r3, r0, #2
 80007a2:	4698      	mov	r8, r3
 80007a4:	1909      	adds	r1, r1, r4
 80007a6:	e5f0      	b.n	800038a <__aeabi_ddiv+0x12e>
 80007a8:	4925      	ldr	r1, [pc, #148]	; (8000840 <__aeabi_ddiv+0x5e4>)
 80007aa:	0028      	movs	r0, r5
 80007ac:	4459      	add	r1, fp
 80007ae:	408d      	lsls	r5, r1
 80007b0:	4642      	mov	r2, r8
 80007b2:	408a      	lsls	r2, r1
 80007b4:	1e69      	subs	r1, r5, #1
 80007b6:	418d      	sbcs	r5, r1
 80007b8:	4641      	mov	r1, r8
 80007ba:	40d8      	lsrs	r0, r3
 80007bc:	40d9      	lsrs	r1, r3
 80007be:	4302      	orrs	r2, r0
 80007c0:	432a      	orrs	r2, r5
 80007c2:	000b      	movs	r3, r1
 80007c4:	0751      	lsls	r1, r2, #29
 80007c6:	d100      	bne.n	80007ca <__aeabi_ddiv+0x56e>
 80007c8:	e751      	b.n	800066e <__aeabi_ddiv+0x412>
 80007ca:	210f      	movs	r1, #15
 80007cc:	4011      	ands	r1, r2
 80007ce:	2904      	cmp	r1, #4
 80007d0:	d000      	beq.n	80007d4 <__aeabi_ddiv+0x578>
 80007d2:	e746      	b.n	8000662 <__aeabi_ddiv+0x406>
 80007d4:	e74b      	b.n	800066e <__aeabi_ddiv+0x412>
 80007d6:	0005      	movs	r5, r0
 80007d8:	428e      	cmp	r6, r1
 80007da:	d000      	beq.n	80007de <__aeabi_ddiv+0x582>
 80007dc:	e66a      	b.n	80004b4 <__aeabi_ddiv+0x258>
 80007de:	9a00      	ldr	r2, [sp, #0]
 80007e0:	4293      	cmp	r3, r2
 80007e2:	d000      	beq.n	80007e6 <__aeabi_ddiv+0x58a>
 80007e4:	e666      	b.n	80004b4 <__aeabi_ddiv+0x258>
 80007e6:	e667      	b.n	80004b8 <__aeabi_ddiv+0x25c>
 80007e8:	4a16      	ldr	r2, [pc, #88]	; (8000844 <__aeabi_ddiv+0x5e8>)
 80007ea:	445a      	add	r2, fp
 80007ec:	2a00      	cmp	r2, #0
 80007ee:	dc00      	bgt.n	80007f2 <__aeabi_ddiv+0x596>
 80007f0:	e710      	b.n	8000614 <__aeabi_ddiv+0x3b8>
 80007f2:	2301      	movs	r3, #1
 80007f4:	2500      	movs	r5, #0
 80007f6:	4498      	add	r8, r3
 80007f8:	e667      	b.n	80004ca <__aeabi_ddiv+0x26e>
 80007fa:	075d      	lsls	r5, r3, #29
 80007fc:	025b      	lsls	r3, r3, #9
 80007fe:	0b1c      	lsrs	r4, r3, #12
 8000800:	08d2      	lsrs	r2, r2, #3
 8000802:	2300      	movs	r3, #0
 8000804:	4315      	orrs	r5, r2
 8000806:	e580      	b.n	800030a <__aeabi_ddiv+0xae>
 8000808:	9800      	ldr	r0, [sp, #0]
 800080a:	3d02      	subs	r5, #2
 800080c:	0042      	lsls	r2, r0, #1
 800080e:	4282      	cmp	r2, r0
 8000810:	41bf      	sbcs	r7, r7
 8000812:	427f      	negs	r7, r7
 8000814:	193c      	adds	r4, r7, r4
 8000816:	1936      	adds	r6, r6, r4
 8000818:	9200      	str	r2, [sp, #0]
 800081a:	e7dd      	b.n	80007d8 <__aeabi_ddiv+0x57c>
 800081c:	2480      	movs	r4, #128	; 0x80
 800081e:	4643      	mov	r3, r8
 8000820:	0324      	lsls	r4, r4, #12
 8000822:	431c      	orrs	r4, r3
 8000824:	0324      	lsls	r4, r4, #12
 8000826:	4b04      	ldr	r3, [pc, #16]	; (8000838 <__aeabi_ddiv+0x5dc>)
 8000828:	0b24      	lsrs	r4, r4, #12
 800082a:	e56e      	b.n	800030a <__aeabi_ddiv+0xae>
 800082c:	9a00      	ldr	r2, [sp, #0]
 800082e:	429a      	cmp	r2, r3
 8000830:	d3ea      	bcc.n	8000808 <__aeabi_ddiv+0x5ac>
 8000832:	0005      	movs	r5, r0
 8000834:	e7d3      	b.n	80007de <__aeabi_ddiv+0x582>
 8000836:	46c0      	nop			; (mov r8, r8)
 8000838:	000007ff 	.word	0x000007ff
 800083c:	0000043e 	.word	0x0000043e
 8000840:	0000041e 	.word	0x0000041e
 8000844:	000003ff 	.word	0x000003ff

08000848 <__aeabi_dsub>:
 8000848:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800084a:	4657      	mov	r7, sl
 800084c:	464e      	mov	r6, r9
 800084e:	4645      	mov	r5, r8
 8000850:	46de      	mov	lr, fp
 8000852:	b5e0      	push	{r5, r6, r7, lr}
 8000854:	001e      	movs	r6, r3
 8000856:	0017      	movs	r7, r2
 8000858:	004a      	lsls	r2, r1, #1
 800085a:	030b      	lsls	r3, r1, #12
 800085c:	0d52      	lsrs	r2, r2, #21
 800085e:	0a5b      	lsrs	r3, r3, #9
 8000860:	4690      	mov	r8, r2
 8000862:	0f42      	lsrs	r2, r0, #29
 8000864:	431a      	orrs	r2, r3
 8000866:	0fcd      	lsrs	r5, r1, #31
 8000868:	4ccd      	ldr	r4, [pc, #820]	; (8000ba0 <__aeabi_dsub+0x358>)
 800086a:	0331      	lsls	r1, r6, #12
 800086c:	00c3      	lsls	r3, r0, #3
 800086e:	4694      	mov	ip, r2
 8000870:	0070      	lsls	r0, r6, #1
 8000872:	0f7a      	lsrs	r2, r7, #29
 8000874:	0a49      	lsrs	r1, r1, #9
 8000876:	00ff      	lsls	r7, r7, #3
 8000878:	469a      	mov	sl, r3
 800087a:	46b9      	mov	r9, r7
 800087c:	0d40      	lsrs	r0, r0, #21
 800087e:	0ff6      	lsrs	r6, r6, #31
 8000880:	4311      	orrs	r1, r2
 8000882:	42a0      	cmp	r0, r4
 8000884:	d100      	bne.n	8000888 <__aeabi_dsub+0x40>
 8000886:	e0b1      	b.n	80009ec <__aeabi_dsub+0x1a4>
 8000888:	2201      	movs	r2, #1
 800088a:	4056      	eors	r6, r2
 800088c:	46b3      	mov	fp, r6
 800088e:	42b5      	cmp	r5, r6
 8000890:	d100      	bne.n	8000894 <__aeabi_dsub+0x4c>
 8000892:	e088      	b.n	80009a6 <__aeabi_dsub+0x15e>
 8000894:	4642      	mov	r2, r8
 8000896:	1a12      	subs	r2, r2, r0
 8000898:	2a00      	cmp	r2, #0
 800089a:	dc00      	bgt.n	800089e <__aeabi_dsub+0x56>
 800089c:	e0ae      	b.n	80009fc <__aeabi_dsub+0x1b4>
 800089e:	2800      	cmp	r0, #0
 80008a0:	d100      	bne.n	80008a4 <__aeabi_dsub+0x5c>
 80008a2:	e0c1      	b.n	8000a28 <__aeabi_dsub+0x1e0>
 80008a4:	48be      	ldr	r0, [pc, #760]	; (8000ba0 <__aeabi_dsub+0x358>)
 80008a6:	4580      	cmp	r8, r0
 80008a8:	d100      	bne.n	80008ac <__aeabi_dsub+0x64>
 80008aa:	e151      	b.n	8000b50 <__aeabi_dsub+0x308>
 80008ac:	2080      	movs	r0, #128	; 0x80
 80008ae:	0400      	lsls	r0, r0, #16
 80008b0:	4301      	orrs	r1, r0
 80008b2:	2a38      	cmp	r2, #56	; 0x38
 80008b4:	dd00      	ble.n	80008b8 <__aeabi_dsub+0x70>
 80008b6:	e17b      	b.n	8000bb0 <__aeabi_dsub+0x368>
 80008b8:	2a1f      	cmp	r2, #31
 80008ba:	dd00      	ble.n	80008be <__aeabi_dsub+0x76>
 80008bc:	e1ee      	b.n	8000c9c <__aeabi_dsub+0x454>
 80008be:	2020      	movs	r0, #32
 80008c0:	003e      	movs	r6, r7
 80008c2:	1a80      	subs	r0, r0, r2
 80008c4:	000c      	movs	r4, r1
 80008c6:	40d6      	lsrs	r6, r2
 80008c8:	40d1      	lsrs	r1, r2
 80008ca:	4087      	lsls	r7, r0
 80008cc:	4662      	mov	r2, ip
 80008ce:	4084      	lsls	r4, r0
 80008d0:	1a52      	subs	r2, r2, r1
 80008d2:	1e78      	subs	r0, r7, #1
 80008d4:	4187      	sbcs	r7, r0
 80008d6:	4694      	mov	ip, r2
 80008d8:	4334      	orrs	r4, r6
 80008da:	4327      	orrs	r7, r4
 80008dc:	1bdc      	subs	r4, r3, r7
 80008de:	42a3      	cmp	r3, r4
 80008e0:	419b      	sbcs	r3, r3
 80008e2:	4662      	mov	r2, ip
 80008e4:	425b      	negs	r3, r3
 80008e6:	1ad3      	subs	r3, r2, r3
 80008e8:	4699      	mov	r9, r3
 80008ea:	464b      	mov	r3, r9
 80008ec:	021b      	lsls	r3, r3, #8
 80008ee:	d400      	bmi.n	80008f2 <__aeabi_dsub+0xaa>
 80008f0:	e118      	b.n	8000b24 <__aeabi_dsub+0x2dc>
 80008f2:	464b      	mov	r3, r9
 80008f4:	0258      	lsls	r0, r3, #9
 80008f6:	0a43      	lsrs	r3, r0, #9
 80008f8:	4699      	mov	r9, r3
 80008fa:	464b      	mov	r3, r9
 80008fc:	2b00      	cmp	r3, #0
 80008fe:	d100      	bne.n	8000902 <__aeabi_dsub+0xba>
 8000900:	e137      	b.n	8000b72 <__aeabi_dsub+0x32a>
 8000902:	4648      	mov	r0, r9
 8000904:	f000 fca6 	bl	8001254 <__clzsi2>
 8000908:	0001      	movs	r1, r0
 800090a:	3908      	subs	r1, #8
 800090c:	2320      	movs	r3, #32
 800090e:	0022      	movs	r2, r4
 8000910:	4648      	mov	r0, r9
 8000912:	1a5b      	subs	r3, r3, r1
 8000914:	40da      	lsrs	r2, r3
 8000916:	4088      	lsls	r0, r1
 8000918:	408c      	lsls	r4, r1
 800091a:	4643      	mov	r3, r8
 800091c:	4310      	orrs	r0, r2
 800091e:	4588      	cmp	r8, r1
 8000920:	dd00      	ble.n	8000924 <__aeabi_dsub+0xdc>
 8000922:	e136      	b.n	8000b92 <__aeabi_dsub+0x34a>
 8000924:	1ac9      	subs	r1, r1, r3
 8000926:	1c4b      	adds	r3, r1, #1
 8000928:	2b1f      	cmp	r3, #31
 800092a:	dd00      	ble.n	800092e <__aeabi_dsub+0xe6>
 800092c:	e0ea      	b.n	8000b04 <__aeabi_dsub+0x2bc>
 800092e:	2220      	movs	r2, #32
 8000930:	0026      	movs	r6, r4
 8000932:	1ad2      	subs	r2, r2, r3
 8000934:	0001      	movs	r1, r0
 8000936:	4094      	lsls	r4, r2
 8000938:	40de      	lsrs	r6, r3
 800093a:	40d8      	lsrs	r0, r3
 800093c:	2300      	movs	r3, #0
 800093e:	4091      	lsls	r1, r2
 8000940:	1e62      	subs	r2, r4, #1
 8000942:	4194      	sbcs	r4, r2
 8000944:	4681      	mov	r9, r0
 8000946:	4698      	mov	r8, r3
 8000948:	4331      	orrs	r1, r6
 800094a:	430c      	orrs	r4, r1
 800094c:	0763      	lsls	r3, r4, #29
 800094e:	d009      	beq.n	8000964 <__aeabi_dsub+0x11c>
 8000950:	230f      	movs	r3, #15
 8000952:	4023      	ands	r3, r4
 8000954:	2b04      	cmp	r3, #4
 8000956:	d005      	beq.n	8000964 <__aeabi_dsub+0x11c>
 8000958:	1d23      	adds	r3, r4, #4
 800095a:	42a3      	cmp	r3, r4
 800095c:	41a4      	sbcs	r4, r4
 800095e:	4264      	negs	r4, r4
 8000960:	44a1      	add	r9, r4
 8000962:	001c      	movs	r4, r3
 8000964:	464b      	mov	r3, r9
 8000966:	021b      	lsls	r3, r3, #8
 8000968:	d400      	bmi.n	800096c <__aeabi_dsub+0x124>
 800096a:	e0de      	b.n	8000b2a <__aeabi_dsub+0x2e2>
 800096c:	4641      	mov	r1, r8
 800096e:	4b8c      	ldr	r3, [pc, #560]	; (8000ba0 <__aeabi_dsub+0x358>)
 8000970:	3101      	adds	r1, #1
 8000972:	4299      	cmp	r1, r3
 8000974:	d100      	bne.n	8000978 <__aeabi_dsub+0x130>
 8000976:	e0e7      	b.n	8000b48 <__aeabi_dsub+0x300>
 8000978:	464b      	mov	r3, r9
 800097a:	488a      	ldr	r0, [pc, #552]	; (8000ba4 <__aeabi_dsub+0x35c>)
 800097c:	08e4      	lsrs	r4, r4, #3
 800097e:	4003      	ands	r3, r0
 8000980:	0018      	movs	r0, r3
 8000982:	0549      	lsls	r1, r1, #21
 8000984:	075b      	lsls	r3, r3, #29
 8000986:	0240      	lsls	r0, r0, #9
 8000988:	4323      	orrs	r3, r4
 800098a:	0d4a      	lsrs	r2, r1, #21
 800098c:	0b04      	lsrs	r4, r0, #12
 800098e:	0512      	lsls	r2, r2, #20
 8000990:	07ed      	lsls	r5, r5, #31
 8000992:	4322      	orrs	r2, r4
 8000994:	432a      	orrs	r2, r5
 8000996:	0018      	movs	r0, r3
 8000998:	0011      	movs	r1, r2
 800099a:	bcf0      	pop	{r4, r5, r6, r7}
 800099c:	46bb      	mov	fp, r7
 800099e:	46b2      	mov	sl, r6
 80009a0:	46a9      	mov	r9, r5
 80009a2:	46a0      	mov	r8, r4
 80009a4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80009a6:	4642      	mov	r2, r8
 80009a8:	1a12      	subs	r2, r2, r0
 80009aa:	2a00      	cmp	r2, #0
 80009ac:	dd52      	ble.n	8000a54 <__aeabi_dsub+0x20c>
 80009ae:	2800      	cmp	r0, #0
 80009b0:	d100      	bne.n	80009b4 <__aeabi_dsub+0x16c>
 80009b2:	e09c      	b.n	8000aee <__aeabi_dsub+0x2a6>
 80009b4:	45a0      	cmp	r8, r4
 80009b6:	d100      	bne.n	80009ba <__aeabi_dsub+0x172>
 80009b8:	e0ca      	b.n	8000b50 <__aeabi_dsub+0x308>
 80009ba:	2080      	movs	r0, #128	; 0x80
 80009bc:	0400      	lsls	r0, r0, #16
 80009be:	4301      	orrs	r1, r0
 80009c0:	2a38      	cmp	r2, #56	; 0x38
 80009c2:	dd00      	ble.n	80009c6 <__aeabi_dsub+0x17e>
 80009c4:	e149      	b.n	8000c5a <__aeabi_dsub+0x412>
 80009c6:	2a1f      	cmp	r2, #31
 80009c8:	dc00      	bgt.n	80009cc <__aeabi_dsub+0x184>
 80009ca:	e197      	b.n	8000cfc <__aeabi_dsub+0x4b4>
 80009cc:	0010      	movs	r0, r2
 80009ce:	000e      	movs	r6, r1
 80009d0:	3820      	subs	r0, #32
 80009d2:	40c6      	lsrs	r6, r0
 80009d4:	2a20      	cmp	r2, #32
 80009d6:	d004      	beq.n	80009e2 <__aeabi_dsub+0x19a>
 80009d8:	2040      	movs	r0, #64	; 0x40
 80009da:	1a82      	subs	r2, r0, r2
 80009dc:	4091      	lsls	r1, r2
 80009de:	430f      	orrs	r7, r1
 80009e0:	46b9      	mov	r9, r7
 80009e2:	464c      	mov	r4, r9
 80009e4:	1e62      	subs	r2, r4, #1
 80009e6:	4194      	sbcs	r4, r2
 80009e8:	4334      	orrs	r4, r6
 80009ea:	e13a      	b.n	8000c62 <__aeabi_dsub+0x41a>
 80009ec:	000a      	movs	r2, r1
 80009ee:	433a      	orrs	r2, r7
 80009f0:	d028      	beq.n	8000a44 <__aeabi_dsub+0x1fc>
 80009f2:	46b3      	mov	fp, r6
 80009f4:	42b5      	cmp	r5, r6
 80009f6:	d02b      	beq.n	8000a50 <__aeabi_dsub+0x208>
 80009f8:	4a6b      	ldr	r2, [pc, #428]	; (8000ba8 <__aeabi_dsub+0x360>)
 80009fa:	4442      	add	r2, r8
 80009fc:	2a00      	cmp	r2, #0
 80009fe:	d05d      	beq.n	8000abc <__aeabi_dsub+0x274>
 8000a00:	4642      	mov	r2, r8
 8000a02:	4644      	mov	r4, r8
 8000a04:	1a82      	subs	r2, r0, r2
 8000a06:	2c00      	cmp	r4, #0
 8000a08:	d000      	beq.n	8000a0c <__aeabi_dsub+0x1c4>
 8000a0a:	e0f5      	b.n	8000bf8 <__aeabi_dsub+0x3b0>
 8000a0c:	4665      	mov	r5, ip
 8000a0e:	431d      	orrs	r5, r3
 8000a10:	d100      	bne.n	8000a14 <__aeabi_dsub+0x1cc>
 8000a12:	e19c      	b.n	8000d4e <__aeabi_dsub+0x506>
 8000a14:	1e55      	subs	r5, r2, #1
 8000a16:	2a01      	cmp	r2, #1
 8000a18:	d100      	bne.n	8000a1c <__aeabi_dsub+0x1d4>
 8000a1a:	e1fb      	b.n	8000e14 <__aeabi_dsub+0x5cc>
 8000a1c:	4c60      	ldr	r4, [pc, #384]	; (8000ba0 <__aeabi_dsub+0x358>)
 8000a1e:	42a2      	cmp	r2, r4
 8000a20:	d100      	bne.n	8000a24 <__aeabi_dsub+0x1dc>
 8000a22:	e1bd      	b.n	8000da0 <__aeabi_dsub+0x558>
 8000a24:	002a      	movs	r2, r5
 8000a26:	e0f0      	b.n	8000c0a <__aeabi_dsub+0x3c2>
 8000a28:	0008      	movs	r0, r1
 8000a2a:	4338      	orrs	r0, r7
 8000a2c:	d100      	bne.n	8000a30 <__aeabi_dsub+0x1e8>
 8000a2e:	e0c3      	b.n	8000bb8 <__aeabi_dsub+0x370>
 8000a30:	1e50      	subs	r0, r2, #1
 8000a32:	2a01      	cmp	r2, #1
 8000a34:	d100      	bne.n	8000a38 <__aeabi_dsub+0x1f0>
 8000a36:	e1a8      	b.n	8000d8a <__aeabi_dsub+0x542>
 8000a38:	4c59      	ldr	r4, [pc, #356]	; (8000ba0 <__aeabi_dsub+0x358>)
 8000a3a:	42a2      	cmp	r2, r4
 8000a3c:	d100      	bne.n	8000a40 <__aeabi_dsub+0x1f8>
 8000a3e:	e087      	b.n	8000b50 <__aeabi_dsub+0x308>
 8000a40:	0002      	movs	r2, r0
 8000a42:	e736      	b.n	80008b2 <__aeabi_dsub+0x6a>
 8000a44:	2201      	movs	r2, #1
 8000a46:	4056      	eors	r6, r2
 8000a48:	46b3      	mov	fp, r6
 8000a4a:	42b5      	cmp	r5, r6
 8000a4c:	d000      	beq.n	8000a50 <__aeabi_dsub+0x208>
 8000a4e:	e721      	b.n	8000894 <__aeabi_dsub+0x4c>
 8000a50:	4a55      	ldr	r2, [pc, #340]	; (8000ba8 <__aeabi_dsub+0x360>)
 8000a52:	4442      	add	r2, r8
 8000a54:	2a00      	cmp	r2, #0
 8000a56:	d100      	bne.n	8000a5a <__aeabi_dsub+0x212>
 8000a58:	e0b5      	b.n	8000bc6 <__aeabi_dsub+0x37e>
 8000a5a:	4642      	mov	r2, r8
 8000a5c:	4644      	mov	r4, r8
 8000a5e:	1a82      	subs	r2, r0, r2
 8000a60:	2c00      	cmp	r4, #0
 8000a62:	d100      	bne.n	8000a66 <__aeabi_dsub+0x21e>
 8000a64:	e138      	b.n	8000cd8 <__aeabi_dsub+0x490>
 8000a66:	4e4e      	ldr	r6, [pc, #312]	; (8000ba0 <__aeabi_dsub+0x358>)
 8000a68:	42b0      	cmp	r0, r6
 8000a6a:	d100      	bne.n	8000a6e <__aeabi_dsub+0x226>
 8000a6c:	e1de      	b.n	8000e2c <__aeabi_dsub+0x5e4>
 8000a6e:	2680      	movs	r6, #128	; 0x80
 8000a70:	4664      	mov	r4, ip
 8000a72:	0436      	lsls	r6, r6, #16
 8000a74:	4334      	orrs	r4, r6
 8000a76:	46a4      	mov	ip, r4
 8000a78:	2a38      	cmp	r2, #56	; 0x38
 8000a7a:	dd00      	ble.n	8000a7e <__aeabi_dsub+0x236>
 8000a7c:	e196      	b.n	8000dac <__aeabi_dsub+0x564>
 8000a7e:	2a1f      	cmp	r2, #31
 8000a80:	dd00      	ble.n	8000a84 <__aeabi_dsub+0x23c>
 8000a82:	e224      	b.n	8000ece <__aeabi_dsub+0x686>
 8000a84:	2620      	movs	r6, #32
 8000a86:	1ab4      	subs	r4, r6, r2
 8000a88:	46a2      	mov	sl, r4
 8000a8a:	4664      	mov	r4, ip
 8000a8c:	4656      	mov	r6, sl
 8000a8e:	40b4      	lsls	r4, r6
 8000a90:	46a1      	mov	r9, r4
 8000a92:	001c      	movs	r4, r3
 8000a94:	464e      	mov	r6, r9
 8000a96:	40d4      	lsrs	r4, r2
 8000a98:	4326      	orrs	r6, r4
 8000a9a:	0034      	movs	r4, r6
 8000a9c:	4656      	mov	r6, sl
 8000a9e:	40b3      	lsls	r3, r6
 8000aa0:	1e5e      	subs	r6, r3, #1
 8000aa2:	41b3      	sbcs	r3, r6
 8000aa4:	431c      	orrs	r4, r3
 8000aa6:	4663      	mov	r3, ip
 8000aa8:	40d3      	lsrs	r3, r2
 8000aaa:	18c9      	adds	r1, r1, r3
 8000aac:	19e4      	adds	r4, r4, r7
 8000aae:	42bc      	cmp	r4, r7
 8000ab0:	41bf      	sbcs	r7, r7
 8000ab2:	427f      	negs	r7, r7
 8000ab4:	46b9      	mov	r9, r7
 8000ab6:	4680      	mov	r8, r0
 8000ab8:	4489      	add	r9, r1
 8000aba:	e0d8      	b.n	8000c6e <__aeabi_dsub+0x426>
 8000abc:	4640      	mov	r0, r8
 8000abe:	4c3b      	ldr	r4, [pc, #236]	; (8000bac <__aeabi_dsub+0x364>)
 8000ac0:	3001      	adds	r0, #1
 8000ac2:	4220      	tst	r0, r4
 8000ac4:	d000      	beq.n	8000ac8 <__aeabi_dsub+0x280>
 8000ac6:	e0b4      	b.n	8000c32 <__aeabi_dsub+0x3ea>
 8000ac8:	4640      	mov	r0, r8
 8000aca:	2800      	cmp	r0, #0
 8000acc:	d000      	beq.n	8000ad0 <__aeabi_dsub+0x288>
 8000ace:	e144      	b.n	8000d5a <__aeabi_dsub+0x512>
 8000ad0:	4660      	mov	r0, ip
 8000ad2:	4318      	orrs	r0, r3
 8000ad4:	d100      	bne.n	8000ad8 <__aeabi_dsub+0x290>
 8000ad6:	e190      	b.n	8000dfa <__aeabi_dsub+0x5b2>
 8000ad8:	0008      	movs	r0, r1
 8000ada:	4338      	orrs	r0, r7
 8000adc:	d000      	beq.n	8000ae0 <__aeabi_dsub+0x298>
 8000ade:	e1aa      	b.n	8000e36 <__aeabi_dsub+0x5ee>
 8000ae0:	4661      	mov	r1, ip
 8000ae2:	08db      	lsrs	r3, r3, #3
 8000ae4:	0749      	lsls	r1, r1, #29
 8000ae6:	430b      	orrs	r3, r1
 8000ae8:	4661      	mov	r1, ip
 8000aea:	08cc      	lsrs	r4, r1, #3
 8000aec:	e027      	b.n	8000b3e <__aeabi_dsub+0x2f6>
 8000aee:	0008      	movs	r0, r1
 8000af0:	4338      	orrs	r0, r7
 8000af2:	d061      	beq.n	8000bb8 <__aeabi_dsub+0x370>
 8000af4:	1e50      	subs	r0, r2, #1
 8000af6:	2a01      	cmp	r2, #1
 8000af8:	d100      	bne.n	8000afc <__aeabi_dsub+0x2b4>
 8000afa:	e139      	b.n	8000d70 <__aeabi_dsub+0x528>
 8000afc:	42a2      	cmp	r2, r4
 8000afe:	d027      	beq.n	8000b50 <__aeabi_dsub+0x308>
 8000b00:	0002      	movs	r2, r0
 8000b02:	e75d      	b.n	80009c0 <__aeabi_dsub+0x178>
 8000b04:	0002      	movs	r2, r0
 8000b06:	391f      	subs	r1, #31
 8000b08:	40ca      	lsrs	r2, r1
 8000b0a:	0011      	movs	r1, r2
 8000b0c:	2b20      	cmp	r3, #32
 8000b0e:	d003      	beq.n	8000b18 <__aeabi_dsub+0x2d0>
 8000b10:	2240      	movs	r2, #64	; 0x40
 8000b12:	1ad3      	subs	r3, r2, r3
 8000b14:	4098      	lsls	r0, r3
 8000b16:	4304      	orrs	r4, r0
 8000b18:	1e63      	subs	r3, r4, #1
 8000b1a:	419c      	sbcs	r4, r3
 8000b1c:	2300      	movs	r3, #0
 8000b1e:	4699      	mov	r9, r3
 8000b20:	4698      	mov	r8, r3
 8000b22:	430c      	orrs	r4, r1
 8000b24:	0763      	lsls	r3, r4, #29
 8000b26:	d000      	beq.n	8000b2a <__aeabi_dsub+0x2e2>
 8000b28:	e712      	b.n	8000950 <__aeabi_dsub+0x108>
 8000b2a:	464b      	mov	r3, r9
 8000b2c:	464a      	mov	r2, r9
 8000b2e:	08e4      	lsrs	r4, r4, #3
 8000b30:	075b      	lsls	r3, r3, #29
 8000b32:	4323      	orrs	r3, r4
 8000b34:	08d4      	lsrs	r4, r2, #3
 8000b36:	4642      	mov	r2, r8
 8000b38:	4919      	ldr	r1, [pc, #100]	; (8000ba0 <__aeabi_dsub+0x358>)
 8000b3a:	428a      	cmp	r2, r1
 8000b3c:	d00e      	beq.n	8000b5c <__aeabi_dsub+0x314>
 8000b3e:	0324      	lsls	r4, r4, #12
 8000b40:	0552      	lsls	r2, r2, #21
 8000b42:	0b24      	lsrs	r4, r4, #12
 8000b44:	0d52      	lsrs	r2, r2, #21
 8000b46:	e722      	b.n	800098e <__aeabi_dsub+0x146>
 8000b48:	000a      	movs	r2, r1
 8000b4a:	2400      	movs	r4, #0
 8000b4c:	2300      	movs	r3, #0
 8000b4e:	e71e      	b.n	800098e <__aeabi_dsub+0x146>
 8000b50:	08db      	lsrs	r3, r3, #3
 8000b52:	4662      	mov	r2, ip
 8000b54:	0752      	lsls	r2, r2, #29
 8000b56:	4313      	orrs	r3, r2
 8000b58:	4662      	mov	r2, ip
 8000b5a:	08d4      	lsrs	r4, r2, #3
 8000b5c:	001a      	movs	r2, r3
 8000b5e:	4322      	orrs	r2, r4
 8000b60:	d100      	bne.n	8000b64 <__aeabi_dsub+0x31c>
 8000b62:	e1fc      	b.n	8000f5e <__aeabi_dsub+0x716>
 8000b64:	2280      	movs	r2, #128	; 0x80
 8000b66:	0312      	lsls	r2, r2, #12
 8000b68:	4314      	orrs	r4, r2
 8000b6a:	0324      	lsls	r4, r4, #12
 8000b6c:	4a0c      	ldr	r2, [pc, #48]	; (8000ba0 <__aeabi_dsub+0x358>)
 8000b6e:	0b24      	lsrs	r4, r4, #12
 8000b70:	e70d      	b.n	800098e <__aeabi_dsub+0x146>
 8000b72:	0020      	movs	r0, r4
 8000b74:	f000 fb6e 	bl	8001254 <__clzsi2>
 8000b78:	0001      	movs	r1, r0
 8000b7a:	3118      	adds	r1, #24
 8000b7c:	291f      	cmp	r1, #31
 8000b7e:	dc00      	bgt.n	8000b82 <__aeabi_dsub+0x33a>
 8000b80:	e6c4      	b.n	800090c <__aeabi_dsub+0xc4>
 8000b82:	3808      	subs	r0, #8
 8000b84:	4084      	lsls	r4, r0
 8000b86:	4643      	mov	r3, r8
 8000b88:	0020      	movs	r0, r4
 8000b8a:	2400      	movs	r4, #0
 8000b8c:	4588      	cmp	r8, r1
 8000b8e:	dc00      	bgt.n	8000b92 <__aeabi_dsub+0x34a>
 8000b90:	e6c8      	b.n	8000924 <__aeabi_dsub+0xdc>
 8000b92:	4a04      	ldr	r2, [pc, #16]	; (8000ba4 <__aeabi_dsub+0x35c>)
 8000b94:	1a5b      	subs	r3, r3, r1
 8000b96:	4010      	ands	r0, r2
 8000b98:	4698      	mov	r8, r3
 8000b9a:	4681      	mov	r9, r0
 8000b9c:	e6d6      	b.n	800094c <__aeabi_dsub+0x104>
 8000b9e:	46c0      	nop			; (mov r8, r8)
 8000ba0:	000007ff 	.word	0x000007ff
 8000ba4:	ff7fffff 	.word	0xff7fffff
 8000ba8:	fffff801 	.word	0xfffff801
 8000bac:	000007fe 	.word	0x000007fe
 8000bb0:	430f      	orrs	r7, r1
 8000bb2:	1e7a      	subs	r2, r7, #1
 8000bb4:	4197      	sbcs	r7, r2
 8000bb6:	e691      	b.n	80008dc <__aeabi_dsub+0x94>
 8000bb8:	4661      	mov	r1, ip
 8000bba:	08db      	lsrs	r3, r3, #3
 8000bbc:	0749      	lsls	r1, r1, #29
 8000bbe:	430b      	orrs	r3, r1
 8000bc0:	4661      	mov	r1, ip
 8000bc2:	08cc      	lsrs	r4, r1, #3
 8000bc4:	e7b8      	b.n	8000b38 <__aeabi_dsub+0x2f0>
 8000bc6:	4640      	mov	r0, r8
 8000bc8:	4cd3      	ldr	r4, [pc, #844]	; (8000f18 <__aeabi_dsub+0x6d0>)
 8000bca:	3001      	adds	r0, #1
 8000bcc:	4220      	tst	r0, r4
 8000bce:	d000      	beq.n	8000bd2 <__aeabi_dsub+0x38a>
 8000bd0:	e0a2      	b.n	8000d18 <__aeabi_dsub+0x4d0>
 8000bd2:	4640      	mov	r0, r8
 8000bd4:	2800      	cmp	r0, #0
 8000bd6:	d000      	beq.n	8000bda <__aeabi_dsub+0x392>
 8000bd8:	e101      	b.n	8000dde <__aeabi_dsub+0x596>
 8000bda:	4660      	mov	r0, ip
 8000bdc:	4318      	orrs	r0, r3
 8000bde:	d100      	bne.n	8000be2 <__aeabi_dsub+0x39a>
 8000be0:	e15e      	b.n	8000ea0 <__aeabi_dsub+0x658>
 8000be2:	0008      	movs	r0, r1
 8000be4:	4338      	orrs	r0, r7
 8000be6:	d000      	beq.n	8000bea <__aeabi_dsub+0x3a2>
 8000be8:	e15f      	b.n	8000eaa <__aeabi_dsub+0x662>
 8000bea:	4661      	mov	r1, ip
 8000bec:	08db      	lsrs	r3, r3, #3
 8000bee:	0749      	lsls	r1, r1, #29
 8000bf0:	430b      	orrs	r3, r1
 8000bf2:	4661      	mov	r1, ip
 8000bf4:	08cc      	lsrs	r4, r1, #3
 8000bf6:	e7a2      	b.n	8000b3e <__aeabi_dsub+0x2f6>
 8000bf8:	4dc8      	ldr	r5, [pc, #800]	; (8000f1c <__aeabi_dsub+0x6d4>)
 8000bfa:	42a8      	cmp	r0, r5
 8000bfc:	d100      	bne.n	8000c00 <__aeabi_dsub+0x3b8>
 8000bfe:	e0cf      	b.n	8000da0 <__aeabi_dsub+0x558>
 8000c00:	2580      	movs	r5, #128	; 0x80
 8000c02:	4664      	mov	r4, ip
 8000c04:	042d      	lsls	r5, r5, #16
 8000c06:	432c      	orrs	r4, r5
 8000c08:	46a4      	mov	ip, r4
 8000c0a:	2a38      	cmp	r2, #56	; 0x38
 8000c0c:	dc56      	bgt.n	8000cbc <__aeabi_dsub+0x474>
 8000c0e:	2a1f      	cmp	r2, #31
 8000c10:	dd00      	ble.n	8000c14 <__aeabi_dsub+0x3cc>
 8000c12:	e0d1      	b.n	8000db8 <__aeabi_dsub+0x570>
 8000c14:	2520      	movs	r5, #32
 8000c16:	001e      	movs	r6, r3
 8000c18:	1aad      	subs	r5, r5, r2
 8000c1a:	4664      	mov	r4, ip
 8000c1c:	40ab      	lsls	r3, r5
 8000c1e:	40ac      	lsls	r4, r5
 8000c20:	40d6      	lsrs	r6, r2
 8000c22:	1e5d      	subs	r5, r3, #1
 8000c24:	41ab      	sbcs	r3, r5
 8000c26:	4334      	orrs	r4, r6
 8000c28:	4323      	orrs	r3, r4
 8000c2a:	4664      	mov	r4, ip
 8000c2c:	40d4      	lsrs	r4, r2
 8000c2e:	1b09      	subs	r1, r1, r4
 8000c30:	e049      	b.n	8000cc6 <__aeabi_dsub+0x47e>
 8000c32:	4660      	mov	r0, ip
 8000c34:	1bdc      	subs	r4, r3, r7
 8000c36:	1a46      	subs	r6, r0, r1
 8000c38:	42a3      	cmp	r3, r4
 8000c3a:	4180      	sbcs	r0, r0
 8000c3c:	4240      	negs	r0, r0
 8000c3e:	4681      	mov	r9, r0
 8000c40:	0030      	movs	r0, r6
 8000c42:	464e      	mov	r6, r9
 8000c44:	1b80      	subs	r0, r0, r6
 8000c46:	4681      	mov	r9, r0
 8000c48:	0200      	lsls	r0, r0, #8
 8000c4a:	d476      	bmi.n	8000d3a <__aeabi_dsub+0x4f2>
 8000c4c:	464b      	mov	r3, r9
 8000c4e:	4323      	orrs	r3, r4
 8000c50:	d000      	beq.n	8000c54 <__aeabi_dsub+0x40c>
 8000c52:	e652      	b.n	80008fa <__aeabi_dsub+0xb2>
 8000c54:	2400      	movs	r4, #0
 8000c56:	2500      	movs	r5, #0
 8000c58:	e771      	b.n	8000b3e <__aeabi_dsub+0x2f6>
 8000c5a:	4339      	orrs	r1, r7
 8000c5c:	000c      	movs	r4, r1
 8000c5e:	1e62      	subs	r2, r4, #1
 8000c60:	4194      	sbcs	r4, r2
 8000c62:	18e4      	adds	r4, r4, r3
 8000c64:	429c      	cmp	r4, r3
 8000c66:	419b      	sbcs	r3, r3
 8000c68:	425b      	negs	r3, r3
 8000c6a:	4463      	add	r3, ip
 8000c6c:	4699      	mov	r9, r3
 8000c6e:	464b      	mov	r3, r9
 8000c70:	021b      	lsls	r3, r3, #8
 8000c72:	d400      	bmi.n	8000c76 <__aeabi_dsub+0x42e>
 8000c74:	e756      	b.n	8000b24 <__aeabi_dsub+0x2dc>
 8000c76:	2301      	movs	r3, #1
 8000c78:	469c      	mov	ip, r3
 8000c7a:	4ba8      	ldr	r3, [pc, #672]	; (8000f1c <__aeabi_dsub+0x6d4>)
 8000c7c:	44e0      	add	r8, ip
 8000c7e:	4598      	cmp	r8, r3
 8000c80:	d038      	beq.n	8000cf4 <__aeabi_dsub+0x4ac>
 8000c82:	464b      	mov	r3, r9
 8000c84:	48a6      	ldr	r0, [pc, #664]	; (8000f20 <__aeabi_dsub+0x6d8>)
 8000c86:	2201      	movs	r2, #1
 8000c88:	4003      	ands	r3, r0
 8000c8a:	0018      	movs	r0, r3
 8000c8c:	0863      	lsrs	r3, r4, #1
 8000c8e:	4014      	ands	r4, r2
 8000c90:	431c      	orrs	r4, r3
 8000c92:	07c3      	lsls	r3, r0, #31
 8000c94:	431c      	orrs	r4, r3
 8000c96:	0843      	lsrs	r3, r0, #1
 8000c98:	4699      	mov	r9, r3
 8000c9a:	e657      	b.n	800094c <__aeabi_dsub+0x104>
 8000c9c:	0010      	movs	r0, r2
 8000c9e:	000e      	movs	r6, r1
 8000ca0:	3820      	subs	r0, #32
 8000ca2:	40c6      	lsrs	r6, r0
 8000ca4:	2a20      	cmp	r2, #32
 8000ca6:	d004      	beq.n	8000cb2 <__aeabi_dsub+0x46a>
 8000ca8:	2040      	movs	r0, #64	; 0x40
 8000caa:	1a82      	subs	r2, r0, r2
 8000cac:	4091      	lsls	r1, r2
 8000cae:	430f      	orrs	r7, r1
 8000cb0:	46b9      	mov	r9, r7
 8000cb2:	464f      	mov	r7, r9
 8000cb4:	1e7a      	subs	r2, r7, #1
 8000cb6:	4197      	sbcs	r7, r2
 8000cb8:	4337      	orrs	r7, r6
 8000cba:	e60f      	b.n	80008dc <__aeabi_dsub+0x94>
 8000cbc:	4662      	mov	r2, ip
 8000cbe:	431a      	orrs	r2, r3
 8000cc0:	0013      	movs	r3, r2
 8000cc2:	1e5a      	subs	r2, r3, #1
 8000cc4:	4193      	sbcs	r3, r2
 8000cc6:	1afc      	subs	r4, r7, r3
 8000cc8:	42a7      	cmp	r7, r4
 8000cca:	41bf      	sbcs	r7, r7
 8000ccc:	427f      	negs	r7, r7
 8000cce:	1bcb      	subs	r3, r1, r7
 8000cd0:	4699      	mov	r9, r3
 8000cd2:	465d      	mov	r5, fp
 8000cd4:	4680      	mov	r8, r0
 8000cd6:	e608      	b.n	80008ea <__aeabi_dsub+0xa2>
 8000cd8:	4666      	mov	r6, ip
 8000cda:	431e      	orrs	r6, r3
 8000cdc:	d100      	bne.n	8000ce0 <__aeabi_dsub+0x498>
 8000cde:	e0be      	b.n	8000e5e <__aeabi_dsub+0x616>
 8000ce0:	1e56      	subs	r6, r2, #1
 8000ce2:	2a01      	cmp	r2, #1
 8000ce4:	d100      	bne.n	8000ce8 <__aeabi_dsub+0x4a0>
 8000ce6:	e109      	b.n	8000efc <__aeabi_dsub+0x6b4>
 8000ce8:	4c8c      	ldr	r4, [pc, #560]	; (8000f1c <__aeabi_dsub+0x6d4>)
 8000cea:	42a2      	cmp	r2, r4
 8000cec:	d100      	bne.n	8000cf0 <__aeabi_dsub+0x4a8>
 8000cee:	e119      	b.n	8000f24 <__aeabi_dsub+0x6dc>
 8000cf0:	0032      	movs	r2, r6
 8000cf2:	e6c1      	b.n	8000a78 <__aeabi_dsub+0x230>
 8000cf4:	4642      	mov	r2, r8
 8000cf6:	2400      	movs	r4, #0
 8000cf8:	2300      	movs	r3, #0
 8000cfa:	e648      	b.n	800098e <__aeabi_dsub+0x146>
 8000cfc:	2020      	movs	r0, #32
 8000cfe:	000c      	movs	r4, r1
 8000d00:	1a80      	subs	r0, r0, r2
 8000d02:	003e      	movs	r6, r7
 8000d04:	4087      	lsls	r7, r0
 8000d06:	4084      	lsls	r4, r0
 8000d08:	40d6      	lsrs	r6, r2
 8000d0a:	1e78      	subs	r0, r7, #1
 8000d0c:	4187      	sbcs	r7, r0
 8000d0e:	40d1      	lsrs	r1, r2
 8000d10:	4334      	orrs	r4, r6
 8000d12:	433c      	orrs	r4, r7
 8000d14:	448c      	add	ip, r1
 8000d16:	e7a4      	b.n	8000c62 <__aeabi_dsub+0x41a>
 8000d18:	4a80      	ldr	r2, [pc, #512]	; (8000f1c <__aeabi_dsub+0x6d4>)
 8000d1a:	4290      	cmp	r0, r2
 8000d1c:	d100      	bne.n	8000d20 <__aeabi_dsub+0x4d8>
 8000d1e:	e0e9      	b.n	8000ef4 <__aeabi_dsub+0x6ac>
 8000d20:	19df      	adds	r7, r3, r7
 8000d22:	429f      	cmp	r7, r3
 8000d24:	419b      	sbcs	r3, r3
 8000d26:	4461      	add	r1, ip
 8000d28:	425b      	negs	r3, r3
 8000d2a:	18c9      	adds	r1, r1, r3
 8000d2c:	07cc      	lsls	r4, r1, #31
 8000d2e:	087f      	lsrs	r7, r7, #1
 8000d30:	084b      	lsrs	r3, r1, #1
 8000d32:	4699      	mov	r9, r3
 8000d34:	4680      	mov	r8, r0
 8000d36:	433c      	orrs	r4, r7
 8000d38:	e6f4      	b.n	8000b24 <__aeabi_dsub+0x2dc>
 8000d3a:	1afc      	subs	r4, r7, r3
 8000d3c:	42a7      	cmp	r7, r4
 8000d3e:	41bf      	sbcs	r7, r7
 8000d40:	4663      	mov	r3, ip
 8000d42:	427f      	negs	r7, r7
 8000d44:	1ac9      	subs	r1, r1, r3
 8000d46:	1bcb      	subs	r3, r1, r7
 8000d48:	4699      	mov	r9, r3
 8000d4a:	465d      	mov	r5, fp
 8000d4c:	e5d5      	b.n	80008fa <__aeabi_dsub+0xb2>
 8000d4e:	08ff      	lsrs	r7, r7, #3
 8000d50:	074b      	lsls	r3, r1, #29
 8000d52:	465d      	mov	r5, fp
 8000d54:	433b      	orrs	r3, r7
 8000d56:	08cc      	lsrs	r4, r1, #3
 8000d58:	e6ee      	b.n	8000b38 <__aeabi_dsub+0x2f0>
 8000d5a:	4662      	mov	r2, ip
 8000d5c:	431a      	orrs	r2, r3
 8000d5e:	d000      	beq.n	8000d62 <__aeabi_dsub+0x51a>
 8000d60:	e082      	b.n	8000e68 <__aeabi_dsub+0x620>
 8000d62:	000b      	movs	r3, r1
 8000d64:	433b      	orrs	r3, r7
 8000d66:	d11b      	bne.n	8000da0 <__aeabi_dsub+0x558>
 8000d68:	2480      	movs	r4, #128	; 0x80
 8000d6a:	2500      	movs	r5, #0
 8000d6c:	0324      	lsls	r4, r4, #12
 8000d6e:	e6f9      	b.n	8000b64 <__aeabi_dsub+0x31c>
 8000d70:	19dc      	adds	r4, r3, r7
 8000d72:	429c      	cmp	r4, r3
 8000d74:	419b      	sbcs	r3, r3
 8000d76:	4461      	add	r1, ip
 8000d78:	4689      	mov	r9, r1
 8000d7a:	425b      	negs	r3, r3
 8000d7c:	4499      	add	r9, r3
 8000d7e:	464b      	mov	r3, r9
 8000d80:	021b      	lsls	r3, r3, #8
 8000d82:	d444      	bmi.n	8000e0e <__aeabi_dsub+0x5c6>
 8000d84:	2301      	movs	r3, #1
 8000d86:	4698      	mov	r8, r3
 8000d88:	e6cc      	b.n	8000b24 <__aeabi_dsub+0x2dc>
 8000d8a:	1bdc      	subs	r4, r3, r7
 8000d8c:	4662      	mov	r2, ip
 8000d8e:	42a3      	cmp	r3, r4
 8000d90:	419b      	sbcs	r3, r3
 8000d92:	1a51      	subs	r1, r2, r1
 8000d94:	425b      	negs	r3, r3
 8000d96:	1acb      	subs	r3, r1, r3
 8000d98:	4699      	mov	r9, r3
 8000d9a:	2301      	movs	r3, #1
 8000d9c:	4698      	mov	r8, r3
 8000d9e:	e5a4      	b.n	80008ea <__aeabi_dsub+0xa2>
 8000da0:	08ff      	lsrs	r7, r7, #3
 8000da2:	074b      	lsls	r3, r1, #29
 8000da4:	465d      	mov	r5, fp
 8000da6:	433b      	orrs	r3, r7
 8000da8:	08cc      	lsrs	r4, r1, #3
 8000daa:	e6d7      	b.n	8000b5c <__aeabi_dsub+0x314>
 8000dac:	4662      	mov	r2, ip
 8000dae:	431a      	orrs	r2, r3
 8000db0:	0014      	movs	r4, r2
 8000db2:	1e63      	subs	r3, r4, #1
 8000db4:	419c      	sbcs	r4, r3
 8000db6:	e679      	b.n	8000aac <__aeabi_dsub+0x264>
 8000db8:	0015      	movs	r5, r2
 8000dba:	4664      	mov	r4, ip
 8000dbc:	3d20      	subs	r5, #32
 8000dbe:	40ec      	lsrs	r4, r5
 8000dc0:	46a0      	mov	r8, r4
 8000dc2:	2a20      	cmp	r2, #32
 8000dc4:	d005      	beq.n	8000dd2 <__aeabi_dsub+0x58a>
 8000dc6:	2540      	movs	r5, #64	; 0x40
 8000dc8:	4664      	mov	r4, ip
 8000dca:	1aaa      	subs	r2, r5, r2
 8000dcc:	4094      	lsls	r4, r2
 8000dce:	4323      	orrs	r3, r4
 8000dd0:	469a      	mov	sl, r3
 8000dd2:	4654      	mov	r4, sl
 8000dd4:	1e63      	subs	r3, r4, #1
 8000dd6:	419c      	sbcs	r4, r3
 8000dd8:	4643      	mov	r3, r8
 8000dda:	4323      	orrs	r3, r4
 8000ddc:	e773      	b.n	8000cc6 <__aeabi_dsub+0x47e>
 8000dde:	4662      	mov	r2, ip
 8000de0:	431a      	orrs	r2, r3
 8000de2:	d023      	beq.n	8000e2c <__aeabi_dsub+0x5e4>
 8000de4:	000a      	movs	r2, r1
 8000de6:	433a      	orrs	r2, r7
 8000de8:	d000      	beq.n	8000dec <__aeabi_dsub+0x5a4>
 8000dea:	e0a0      	b.n	8000f2e <__aeabi_dsub+0x6e6>
 8000dec:	4662      	mov	r2, ip
 8000dee:	08db      	lsrs	r3, r3, #3
 8000df0:	0752      	lsls	r2, r2, #29
 8000df2:	4313      	orrs	r3, r2
 8000df4:	4662      	mov	r2, ip
 8000df6:	08d4      	lsrs	r4, r2, #3
 8000df8:	e6b0      	b.n	8000b5c <__aeabi_dsub+0x314>
 8000dfa:	000b      	movs	r3, r1
 8000dfc:	433b      	orrs	r3, r7
 8000dfe:	d100      	bne.n	8000e02 <__aeabi_dsub+0x5ba>
 8000e00:	e728      	b.n	8000c54 <__aeabi_dsub+0x40c>
 8000e02:	08ff      	lsrs	r7, r7, #3
 8000e04:	074b      	lsls	r3, r1, #29
 8000e06:	465d      	mov	r5, fp
 8000e08:	433b      	orrs	r3, r7
 8000e0a:	08cc      	lsrs	r4, r1, #3
 8000e0c:	e697      	b.n	8000b3e <__aeabi_dsub+0x2f6>
 8000e0e:	2302      	movs	r3, #2
 8000e10:	4698      	mov	r8, r3
 8000e12:	e736      	b.n	8000c82 <__aeabi_dsub+0x43a>
 8000e14:	1afc      	subs	r4, r7, r3
 8000e16:	42a7      	cmp	r7, r4
 8000e18:	41bf      	sbcs	r7, r7
 8000e1a:	4663      	mov	r3, ip
 8000e1c:	427f      	negs	r7, r7
 8000e1e:	1ac9      	subs	r1, r1, r3
 8000e20:	1bcb      	subs	r3, r1, r7
 8000e22:	4699      	mov	r9, r3
 8000e24:	2301      	movs	r3, #1
 8000e26:	465d      	mov	r5, fp
 8000e28:	4698      	mov	r8, r3
 8000e2a:	e55e      	b.n	80008ea <__aeabi_dsub+0xa2>
 8000e2c:	074b      	lsls	r3, r1, #29
 8000e2e:	08ff      	lsrs	r7, r7, #3
 8000e30:	433b      	orrs	r3, r7
 8000e32:	08cc      	lsrs	r4, r1, #3
 8000e34:	e692      	b.n	8000b5c <__aeabi_dsub+0x314>
 8000e36:	1bdc      	subs	r4, r3, r7
 8000e38:	4660      	mov	r0, ip
 8000e3a:	42a3      	cmp	r3, r4
 8000e3c:	41b6      	sbcs	r6, r6
 8000e3e:	1a40      	subs	r0, r0, r1
 8000e40:	4276      	negs	r6, r6
 8000e42:	1b80      	subs	r0, r0, r6
 8000e44:	4681      	mov	r9, r0
 8000e46:	0200      	lsls	r0, r0, #8
 8000e48:	d560      	bpl.n	8000f0c <__aeabi_dsub+0x6c4>
 8000e4a:	1afc      	subs	r4, r7, r3
 8000e4c:	42a7      	cmp	r7, r4
 8000e4e:	41bf      	sbcs	r7, r7
 8000e50:	4663      	mov	r3, ip
 8000e52:	427f      	negs	r7, r7
 8000e54:	1ac9      	subs	r1, r1, r3
 8000e56:	1bcb      	subs	r3, r1, r7
 8000e58:	4699      	mov	r9, r3
 8000e5a:	465d      	mov	r5, fp
 8000e5c:	e576      	b.n	800094c <__aeabi_dsub+0x104>
 8000e5e:	08ff      	lsrs	r7, r7, #3
 8000e60:	074b      	lsls	r3, r1, #29
 8000e62:	433b      	orrs	r3, r7
 8000e64:	08cc      	lsrs	r4, r1, #3
 8000e66:	e667      	b.n	8000b38 <__aeabi_dsub+0x2f0>
 8000e68:	000a      	movs	r2, r1
 8000e6a:	08db      	lsrs	r3, r3, #3
 8000e6c:	433a      	orrs	r2, r7
 8000e6e:	d100      	bne.n	8000e72 <__aeabi_dsub+0x62a>
 8000e70:	e66f      	b.n	8000b52 <__aeabi_dsub+0x30a>
 8000e72:	4662      	mov	r2, ip
 8000e74:	0752      	lsls	r2, r2, #29
 8000e76:	4313      	orrs	r3, r2
 8000e78:	4662      	mov	r2, ip
 8000e7a:	08d4      	lsrs	r4, r2, #3
 8000e7c:	2280      	movs	r2, #128	; 0x80
 8000e7e:	0312      	lsls	r2, r2, #12
 8000e80:	4214      	tst	r4, r2
 8000e82:	d007      	beq.n	8000e94 <__aeabi_dsub+0x64c>
 8000e84:	08c8      	lsrs	r0, r1, #3
 8000e86:	4210      	tst	r0, r2
 8000e88:	d104      	bne.n	8000e94 <__aeabi_dsub+0x64c>
 8000e8a:	465d      	mov	r5, fp
 8000e8c:	0004      	movs	r4, r0
 8000e8e:	08fb      	lsrs	r3, r7, #3
 8000e90:	0749      	lsls	r1, r1, #29
 8000e92:	430b      	orrs	r3, r1
 8000e94:	0f5a      	lsrs	r2, r3, #29
 8000e96:	00db      	lsls	r3, r3, #3
 8000e98:	08db      	lsrs	r3, r3, #3
 8000e9a:	0752      	lsls	r2, r2, #29
 8000e9c:	4313      	orrs	r3, r2
 8000e9e:	e65d      	b.n	8000b5c <__aeabi_dsub+0x314>
 8000ea0:	074b      	lsls	r3, r1, #29
 8000ea2:	08ff      	lsrs	r7, r7, #3
 8000ea4:	433b      	orrs	r3, r7
 8000ea6:	08cc      	lsrs	r4, r1, #3
 8000ea8:	e649      	b.n	8000b3e <__aeabi_dsub+0x2f6>
 8000eaa:	19dc      	adds	r4, r3, r7
 8000eac:	429c      	cmp	r4, r3
 8000eae:	419b      	sbcs	r3, r3
 8000eb0:	4461      	add	r1, ip
 8000eb2:	4689      	mov	r9, r1
 8000eb4:	425b      	negs	r3, r3
 8000eb6:	4499      	add	r9, r3
 8000eb8:	464b      	mov	r3, r9
 8000eba:	021b      	lsls	r3, r3, #8
 8000ebc:	d400      	bmi.n	8000ec0 <__aeabi_dsub+0x678>
 8000ebe:	e631      	b.n	8000b24 <__aeabi_dsub+0x2dc>
 8000ec0:	464a      	mov	r2, r9
 8000ec2:	4b17      	ldr	r3, [pc, #92]	; (8000f20 <__aeabi_dsub+0x6d8>)
 8000ec4:	401a      	ands	r2, r3
 8000ec6:	2301      	movs	r3, #1
 8000ec8:	4691      	mov	r9, r2
 8000eca:	4698      	mov	r8, r3
 8000ecc:	e62a      	b.n	8000b24 <__aeabi_dsub+0x2dc>
 8000ece:	0016      	movs	r6, r2
 8000ed0:	4664      	mov	r4, ip
 8000ed2:	3e20      	subs	r6, #32
 8000ed4:	40f4      	lsrs	r4, r6
 8000ed6:	46a0      	mov	r8, r4
 8000ed8:	2a20      	cmp	r2, #32
 8000eda:	d005      	beq.n	8000ee8 <__aeabi_dsub+0x6a0>
 8000edc:	2640      	movs	r6, #64	; 0x40
 8000ede:	4664      	mov	r4, ip
 8000ee0:	1ab2      	subs	r2, r6, r2
 8000ee2:	4094      	lsls	r4, r2
 8000ee4:	4323      	orrs	r3, r4
 8000ee6:	469a      	mov	sl, r3
 8000ee8:	4654      	mov	r4, sl
 8000eea:	1e63      	subs	r3, r4, #1
 8000eec:	419c      	sbcs	r4, r3
 8000eee:	4643      	mov	r3, r8
 8000ef0:	431c      	orrs	r4, r3
 8000ef2:	e5db      	b.n	8000aac <__aeabi_dsub+0x264>
 8000ef4:	0002      	movs	r2, r0
 8000ef6:	2400      	movs	r4, #0
 8000ef8:	2300      	movs	r3, #0
 8000efa:	e548      	b.n	800098e <__aeabi_dsub+0x146>
 8000efc:	19dc      	adds	r4, r3, r7
 8000efe:	42bc      	cmp	r4, r7
 8000f00:	41bf      	sbcs	r7, r7
 8000f02:	4461      	add	r1, ip
 8000f04:	4689      	mov	r9, r1
 8000f06:	427f      	negs	r7, r7
 8000f08:	44b9      	add	r9, r7
 8000f0a:	e738      	b.n	8000d7e <__aeabi_dsub+0x536>
 8000f0c:	464b      	mov	r3, r9
 8000f0e:	4323      	orrs	r3, r4
 8000f10:	d100      	bne.n	8000f14 <__aeabi_dsub+0x6cc>
 8000f12:	e69f      	b.n	8000c54 <__aeabi_dsub+0x40c>
 8000f14:	e606      	b.n	8000b24 <__aeabi_dsub+0x2dc>
 8000f16:	46c0      	nop			; (mov r8, r8)
 8000f18:	000007fe 	.word	0x000007fe
 8000f1c:	000007ff 	.word	0x000007ff
 8000f20:	ff7fffff 	.word	0xff7fffff
 8000f24:	08ff      	lsrs	r7, r7, #3
 8000f26:	074b      	lsls	r3, r1, #29
 8000f28:	433b      	orrs	r3, r7
 8000f2a:	08cc      	lsrs	r4, r1, #3
 8000f2c:	e616      	b.n	8000b5c <__aeabi_dsub+0x314>
 8000f2e:	4662      	mov	r2, ip
 8000f30:	08db      	lsrs	r3, r3, #3
 8000f32:	0752      	lsls	r2, r2, #29
 8000f34:	4313      	orrs	r3, r2
 8000f36:	4662      	mov	r2, ip
 8000f38:	08d4      	lsrs	r4, r2, #3
 8000f3a:	2280      	movs	r2, #128	; 0x80
 8000f3c:	0312      	lsls	r2, r2, #12
 8000f3e:	4214      	tst	r4, r2
 8000f40:	d007      	beq.n	8000f52 <__aeabi_dsub+0x70a>
 8000f42:	08c8      	lsrs	r0, r1, #3
 8000f44:	4210      	tst	r0, r2
 8000f46:	d104      	bne.n	8000f52 <__aeabi_dsub+0x70a>
 8000f48:	465d      	mov	r5, fp
 8000f4a:	0004      	movs	r4, r0
 8000f4c:	08fb      	lsrs	r3, r7, #3
 8000f4e:	0749      	lsls	r1, r1, #29
 8000f50:	430b      	orrs	r3, r1
 8000f52:	0f5a      	lsrs	r2, r3, #29
 8000f54:	00db      	lsls	r3, r3, #3
 8000f56:	0752      	lsls	r2, r2, #29
 8000f58:	08db      	lsrs	r3, r3, #3
 8000f5a:	4313      	orrs	r3, r2
 8000f5c:	e5fe      	b.n	8000b5c <__aeabi_dsub+0x314>
 8000f5e:	2300      	movs	r3, #0
 8000f60:	4a01      	ldr	r2, [pc, #4]	; (8000f68 <__aeabi_dsub+0x720>)
 8000f62:	001c      	movs	r4, r3
 8000f64:	e513      	b.n	800098e <__aeabi_dsub+0x146>
 8000f66:	46c0      	nop			; (mov r8, r8)
 8000f68:	000007ff 	.word	0x000007ff

08000f6c <__aeabi_d2iz>:
 8000f6c:	000a      	movs	r2, r1
 8000f6e:	b530      	push	{r4, r5, lr}
 8000f70:	4c13      	ldr	r4, [pc, #76]	; (8000fc0 <__aeabi_d2iz+0x54>)
 8000f72:	0053      	lsls	r3, r2, #1
 8000f74:	0309      	lsls	r1, r1, #12
 8000f76:	0005      	movs	r5, r0
 8000f78:	0b09      	lsrs	r1, r1, #12
 8000f7a:	2000      	movs	r0, #0
 8000f7c:	0d5b      	lsrs	r3, r3, #21
 8000f7e:	0fd2      	lsrs	r2, r2, #31
 8000f80:	42a3      	cmp	r3, r4
 8000f82:	dd04      	ble.n	8000f8e <__aeabi_d2iz+0x22>
 8000f84:	480f      	ldr	r0, [pc, #60]	; (8000fc4 <__aeabi_d2iz+0x58>)
 8000f86:	4283      	cmp	r3, r0
 8000f88:	dd02      	ble.n	8000f90 <__aeabi_d2iz+0x24>
 8000f8a:	4b0f      	ldr	r3, [pc, #60]	; (8000fc8 <__aeabi_d2iz+0x5c>)
 8000f8c:	18d0      	adds	r0, r2, r3
 8000f8e:	bd30      	pop	{r4, r5, pc}
 8000f90:	2080      	movs	r0, #128	; 0x80
 8000f92:	0340      	lsls	r0, r0, #13
 8000f94:	4301      	orrs	r1, r0
 8000f96:	480d      	ldr	r0, [pc, #52]	; (8000fcc <__aeabi_d2iz+0x60>)
 8000f98:	1ac0      	subs	r0, r0, r3
 8000f9a:	281f      	cmp	r0, #31
 8000f9c:	dd08      	ble.n	8000fb0 <__aeabi_d2iz+0x44>
 8000f9e:	480c      	ldr	r0, [pc, #48]	; (8000fd0 <__aeabi_d2iz+0x64>)
 8000fa0:	1ac3      	subs	r3, r0, r3
 8000fa2:	40d9      	lsrs	r1, r3
 8000fa4:	000b      	movs	r3, r1
 8000fa6:	4258      	negs	r0, r3
 8000fa8:	2a00      	cmp	r2, #0
 8000faa:	d1f0      	bne.n	8000f8e <__aeabi_d2iz+0x22>
 8000fac:	0018      	movs	r0, r3
 8000fae:	e7ee      	b.n	8000f8e <__aeabi_d2iz+0x22>
 8000fb0:	4c08      	ldr	r4, [pc, #32]	; (8000fd4 <__aeabi_d2iz+0x68>)
 8000fb2:	40c5      	lsrs	r5, r0
 8000fb4:	46a4      	mov	ip, r4
 8000fb6:	4463      	add	r3, ip
 8000fb8:	4099      	lsls	r1, r3
 8000fba:	000b      	movs	r3, r1
 8000fbc:	432b      	orrs	r3, r5
 8000fbe:	e7f2      	b.n	8000fa6 <__aeabi_d2iz+0x3a>
 8000fc0:	000003fe 	.word	0x000003fe
 8000fc4:	0000041d 	.word	0x0000041d
 8000fc8:	7fffffff 	.word	0x7fffffff
 8000fcc:	00000433 	.word	0x00000433
 8000fd0:	00000413 	.word	0x00000413
 8000fd4:	fffffbed 	.word	0xfffffbed

08000fd8 <__aeabi_i2d>:
 8000fd8:	b570      	push	{r4, r5, r6, lr}
 8000fda:	2800      	cmp	r0, #0
 8000fdc:	d016      	beq.n	800100c <__aeabi_i2d+0x34>
 8000fde:	17c3      	asrs	r3, r0, #31
 8000fe0:	18c5      	adds	r5, r0, r3
 8000fe2:	405d      	eors	r5, r3
 8000fe4:	0fc4      	lsrs	r4, r0, #31
 8000fe6:	0028      	movs	r0, r5
 8000fe8:	f000 f934 	bl	8001254 <__clzsi2>
 8000fec:	4a11      	ldr	r2, [pc, #68]	; (8001034 <__aeabi_i2d+0x5c>)
 8000fee:	1a12      	subs	r2, r2, r0
 8000ff0:	280a      	cmp	r0, #10
 8000ff2:	dc16      	bgt.n	8001022 <__aeabi_i2d+0x4a>
 8000ff4:	0003      	movs	r3, r0
 8000ff6:	002e      	movs	r6, r5
 8000ff8:	3315      	adds	r3, #21
 8000ffa:	409e      	lsls	r6, r3
 8000ffc:	230b      	movs	r3, #11
 8000ffe:	1a18      	subs	r0, r3, r0
 8001000:	40c5      	lsrs	r5, r0
 8001002:	0552      	lsls	r2, r2, #21
 8001004:	032d      	lsls	r5, r5, #12
 8001006:	0b2d      	lsrs	r5, r5, #12
 8001008:	0d53      	lsrs	r3, r2, #21
 800100a:	e003      	b.n	8001014 <__aeabi_i2d+0x3c>
 800100c:	2400      	movs	r4, #0
 800100e:	2300      	movs	r3, #0
 8001010:	2500      	movs	r5, #0
 8001012:	2600      	movs	r6, #0
 8001014:	051b      	lsls	r3, r3, #20
 8001016:	432b      	orrs	r3, r5
 8001018:	07e4      	lsls	r4, r4, #31
 800101a:	4323      	orrs	r3, r4
 800101c:	0030      	movs	r0, r6
 800101e:	0019      	movs	r1, r3
 8001020:	bd70      	pop	{r4, r5, r6, pc}
 8001022:	380b      	subs	r0, #11
 8001024:	4085      	lsls	r5, r0
 8001026:	0552      	lsls	r2, r2, #21
 8001028:	032d      	lsls	r5, r5, #12
 800102a:	2600      	movs	r6, #0
 800102c:	0b2d      	lsrs	r5, r5, #12
 800102e:	0d53      	lsrs	r3, r2, #21
 8001030:	e7f0      	b.n	8001014 <__aeabi_i2d+0x3c>
 8001032:	46c0      	nop			; (mov r8, r8)
 8001034:	0000041e 	.word	0x0000041e

08001038 <__aeabi_f2d>:
 8001038:	b570      	push	{r4, r5, r6, lr}
 800103a:	0043      	lsls	r3, r0, #1
 800103c:	0246      	lsls	r6, r0, #9
 800103e:	0fc4      	lsrs	r4, r0, #31
 8001040:	20fe      	movs	r0, #254	; 0xfe
 8001042:	0e1b      	lsrs	r3, r3, #24
 8001044:	1c59      	adds	r1, r3, #1
 8001046:	0a75      	lsrs	r5, r6, #9
 8001048:	4208      	tst	r0, r1
 800104a:	d00c      	beq.n	8001066 <__aeabi_f2d+0x2e>
 800104c:	22e0      	movs	r2, #224	; 0xe0
 800104e:	0092      	lsls	r2, r2, #2
 8001050:	4694      	mov	ip, r2
 8001052:	076d      	lsls	r5, r5, #29
 8001054:	0b36      	lsrs	r6, r6, #12
 8001056:	4463      	add	r3, ip
 8001058:	051b      	lsls	r3, r3, #20
 800105a:	4333      	orrs	r3, r6
 800105c:	07e4      	lsls	r4, r4, #31
 800105e:	4323      	orrs	r3, r4
 8001060:	0028      	movs	r0, r5
 8001062:	0019      	movs	r1, r3
 8001064:	bd70      	pop	{r4, r5, r6, pc}
 8001066:	2b00      	cmp	r3, #0
 8001068:	d114      	bne.n	8001094 <__aeabi_f2d+0x5c>
 800106a:	2d00      	cmp	r5, #0
 800106c:	d01b      	beq.n	80010a6 <__aeabi_f2d+0x6e>
 800106e:	0028      	movs	r0, r5
 8001070:	f000 f8f0 	bl	8001254 <__clzsi2>
 8001074:	280a      	cmp	r0, #10
 8001076:	dc1c      	bgt.n	80010b2 <__aeabi_f2d+0x7a>
 8001078:	230b      	movs	r3, #11
 800107a:	002e      	movs	r6, r5
 800107c:	1a1b      	subs	r3, r3, r0
 800107e:	40de      	lsrs	r6, r3
 8001080:	0003      	movs	r3, r0
 8001082:	3315      	adds	r3, #21
 8001084:	409d      	lsls	r5, r3
 8001086:	4a0e      	ldr	r2, [pc, #56]	; (80010c0 <__aeabi_f2d+0x88>)
 8001088:	0336      	lsls	r6, r6, #12
 800108a:	1a12      	subs	r2, r2, r0
 800108c:	0552      	lsls	r2, r2, #21
 800108e:	0b36      	lsrs	r6, r6, #12
 8001090:	0d53      	lsrs	r3, r2, #21
 8001092:	e7e1      	b.n	8001058 <__aeabi_f2d+0x20>
 8001094:	2d00      	cmp	r5, #0
 8001096:	d009      	beq.n	80010ac <__aeabi_f2d+0x74>
 8001098:	2280      	movs	r2, #128	; 0x80
 800109a:	0b36      	lsrs	r6, r6, #12
 800109c:	0312      	lsls	r2, r2, #12
 800109e:	4b09      	ldr	r3, [pc, #36]	; (80010c4 <__aeabi_f2d+0x8c>)
 80010a0:	076d      	lsls	r5, r5, #29
 80010a2:	4316      	orrs	r6, r2
 80010a4:	e7d8      	b.n	8001058 <__aeabi_f2d+0x20>
 80010a6:	2300      	movs	r3, #0
 80010a8:	2600      	movs	r6, #0
 80010aa:	e7d5      	b.n	8001058 <__aeabi_f2d+0x20>
 80010ac:	2600      	movs	r6, #0
 80010ae:	4b05      	ldr	r3, [pc, #20]	; (80010c4 <__aeabi_f2d+0x8c>)
 80010b0:	e7d2      	b.n	8001058 <__aeabi_f2d+0x20>
 80010b2:	0003      	movs	r3, r0
 80010b4:	3b0b      	subs	r3, #11
 80010b6:	409d      	lsls	r5, r3
 80010b8:	002e      	movs	r6, r5
 80010ba:	2500      	movs	r5, #0
 80010bc:	e7e3      	b.n	8001086 <__aeabi_f2d+0x4e>
 80010be:	46c0      	nop			; (mov r8, r8)
 80010c0:	00000389 	.word	0x00000389
 80010c4:	000007ff 	.word	0x000007ff

080010c8 <__aeabi_d2f>:
 80010c8:	0002      	movs	r2, r0
 80010ca:	004b      	lsls	r3, r1, #1
 80010cc:	b5f0      	push	{r4, r5, r6, r7, lr}
 80010ce:	0d5b      	lsrs	r3, r3, #21
 80010d0:	030c      	lsls	r4, r1, #12
 80010d2:	4e3d      	ldr	r6, [pc, #244]	; (80011c8 <__aeabi_d2f+0x100>)
 80010d4:	0a64      	lsrs	r4, r4, #9
 80010d6:	0f40      	lsrs	r0, r0, #29
 80010d8:	1c5f      	adds	r7, r3, #1
 80010da:	0fc9      	lsrs	r1, r1, #31
 80010dc:	4304      	orrs	r4, r0
 80010de:	00d5      	lsls	r5, r2, #3
 80010e0:	4237      	tst	r7, r6
 80010e2:	d00a      	beq.n	80010fa <__aeabi_d2f+0x32>
 80010e4:	4839      	ldr	r0, [pc, #228]	; (80011cc <__aeabi_d2f+0x104>)
 80010e6:	181e      	adds	r6, r3, r0
 80010e8:	2efe      	cmp	r6, #254	; 0xfe
 80010ea:	dd16      	ble.n	800111a <__aeabi_d2f+0x52>
 80010ec:	20ff      	movs	r0, #255	; 0xff
 80010ee:	2400      	movs	r4, #0
 80010f0:	05c0      	lsls	r0, r0, #23
 80010f2:	4320      	orrs	r0, r4
 80010f4:	07c9      	lsls	r1, r1, #31
 80010f6:	4308      	orrs	r0, r1
 80010f8:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80010fa:	2b00      	cmp	r3, #0
 80010fc:	d106      	bne.n	800110c <__aeabi_d2f+0x44>
 80010fe:	432c      	orrs	r4, r5
 8001100:	d026      	beq.n	8001150 <__aeabi_d2f+0x88>
 8001102:	2205      	movs	r2, #5
 8001104:	0192      	lsls	r2, r2, #6
 8001106:	0a54      	lsrs	r4, r2, #9
 8001108:	b2d8      	uxtb	r0, r3
 800110a:	e7f1      	b.n	80010f0 <__aeabi_d2f+0x28>
 800110c:	4325      	orrs	r5, r4
 800110e:	d0ed      	beq.n	80010ec <__aeabi_d2f+0x24>
 8001110:	2080      	movs	r0, #128	; 0x80
 8001112:	03c0      	lsls	r0, r0, #15
 8001114:	4304      	orrs	r4, r0
 8001116:	20ff      	movs	r0, #255	; 0xff
 8001118:	e7ea      	b.n	80010f0 <__aeabi_d2f+0x28>
 800111a:	2e00      	cmp	r6, #0
 800111c:	dd1b      	ble.n	8001156 <__aeabi_d2f+0x8e>
 800111e:	0192      	lsls	r2, r2, #6
 8001120:	1e53      	subs	r3, r2, #1
 8001122:	419a      	sbcs	r2, r3
 8001124:	00e4      	lsls	r4, r4, #3
 8001126:	0f6d      	lsrs	r5, r5, #29
 8001128:	4322      	orrs	r2, r4
 800112a:	432a      	orrs	r2, r5
 800112c:	0753      	lsls	r3, r2, #29
 800112e:	d048      	beq.n	80011c2 <__aeabi_d2f+0xfa>
 8001130:	230f      	movs	r3, #15
 8001132:	4013      	ands	r3, r2
 8001134:	2b04      	cmp	r3, #4
 8001136:	d000      	beq.n	800113a <__aeabi_d2f+0x72>
 8001138:	3204      	adds	r2, #4
 800113a:	2380      	movs	r3, #128	; 0x80
 800113c:	04db      	lsls	r3, r3, #19
 800113e:	4013      	ands	r3, r2
 8001140:	d03f      	beq.n	80011c2 <__aeabi_d2f+0xfa>
 8001142:	1c70      	adds	r0, r6, #1
 8001144:	2efe      	cmp	r6, #254	; 0xfe
 8001146:	d0d1      	beq.n	80010ec <__aeabi_d2f+0x24>
 8001148:	0192      	lsls	r2, r2, #6
 800114a:	0a54      	lsrs	r4, r2, #9
 800114c:	b2c0      	uxtb	r0, r0
 800114e:	e7cf      	b.n	80010f0 <__aeabi_d2f+0x28>
 8001150:	2000      	movs	r0, #0
 8001152:	2400      	movs	r4, #0
 8001154:	e7cc      	b.n	80010f0 <__aeabi_d2f+0x28>
 8001156:	0032      	movs	r2, r6
 8001158:	3217      	adds	r2, #23
 800115a:	db22      	blt.n	80011a2 <__aeabi_d2f+0xda>
 800115c:	2080      	movs	r0, #128	; 0x80
 800115e:	0400      	lsls	r0, r0, #16
 8001160:	4320      	orrs	r0, r4
 8001162:	241e      	movs	r4, #30
 8001164:	1ba4      	subs	r4, r4, r6
 8001166:	2c1f      	cmp	r4, #31
 8001168:	dd1d      	ble.n	80011a6 <__aeabi_d2f+0xde>
 800116a:	2202      	movs	r2, #2
 800116c:	4252      	negs	r2, r2
 800116e:	1b96      	subs	r6, r2, r6
 8001170:	0002      	movs	r2, r0
 8001172:	40f2      	lsrs	r2, r6
 8001174:	0016      	movs	r6, r2
 8001176:	2c20      	cmp	r4, #32
 8001178:	d004      	beq.n	8001184 <__aeabi_d2f+0xbc>
 800117a:	4a15      	ldr	r2, [pc, #84]	; (80011d0 <__aeabi_d2f+0x108>)
 800117c:	4694      	mov	ip, r2
 800117e:	4463      	add	r3, ip
 8001180:	4098      	lsls	r0, r3
 8001182:	4305      	orrs	r5, r0
 8001184:	002a      	movs	r2, r5
 8001186:	1e53      	subs	r3, r2, #1
 8001188:	419a      	sbcs	r2, r3
 800118a:	4332      	orrs	r2, r6
 800118c:	2600      	movs	r6, #0
 800118e:	0753      	lsls	r3, r2, #29
 8001190:	d1ce      	bne.n	8001130 <__aeabi_d2f+0x68>
 8001192:	2480      	movs	r4, #128	; 0x80
 8001194:	0013      	movs	r3, r2
 8001196:	04e4      	lsls	r4, r4, #19
 8001198:	2001      	movs	r0, #1
 800119a:	4023      	ands	r3, r4
 800119c:	4222      	tst	r2, r4
 800119e:	d1d3      	bne.n	8001148 <__aeabi_d2f+0x80>
 80011a0:	e7b0      	b.n	8001104 <__aeabi_d2f+0x3c>
 80011a2:	2300      	movs	r3, #0
 80011a4:	e7ad      	b.n	8001102 <__aeabi_d2f+0x3a>
 80011a6:	4a0b      	ldr	r2, [pc, #44]	; (80011d4 <__aeabi_d2f+0x10c>)
 80011a8:	4694      	mov	ip, r2
 80011aa:	002a      	movs	r2, r5
 80011ac:	40e2      	lsrs	r2, r4
 80011ae:	0014      	movs	r4, r2
 80011b0:	002a      	movs	r2, r5
 80011b2:	4463      	add	r3, ip
 80011b4:	409a      	lsls	r2, r3
 80011b6:	4098      	lsls	r0, r3
 80011b8:	1e55      	subs	r5, r2, #1
 80011ba:	41aa      	sbcs	r2, r5
 80011bc:	4302      	orrs	r2, r0
 80011be:	4322      	orrs	r2, r4
 80011c0:	e7e4      	b.n	800118c <__aeabi_d2f+0xc4>
 80011c2:	0033      	movs	r3, r6
 80011c4:	e79e      	b.n	8001104 <__aeabi_d2f+0x3c>
 80011c6:	46c0      	nop			; (mov r8, r8)
 80011c8:	000007fe 	.word	0x000007fe
 80011cc:	fffffc80 	.word	0xfffffc80
 80011d0:	fffffca2 	.word	0xfffffca2
 80011d4:	fffffc82 	.word	0xfffffc82

080011d8 <__aeabi_cdrcmple>:
 80011d8:	4684      	mov	ip, r0
 80011da:	0010      	movs	r0, r2
 80011dc:	4662      	mov	r2, ip
 80011de:	468c      	mov	ip, r1
 80011e0:	0019      	movs	r1, r3
 80011e2:	4663      	mov	r3, ip
 80011e4:	e000      	b.n	80011e8 <__aeabi_cdcmpeq>
 80011e6:	46c0      	nop			; (mov r8, r8)

080011e8 <__aeabi_cdcmpeq>:
 80011e8:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 80011ea:	f000 f8f9 	bl	80013e0 <__ledf2>
 80011ee:	2800      	cmp	r0, #0
 80011f0:	d401      	bmi.n	80011f6 <__aeabi_cdcmpeq+0xe>
 80011f2:	2100      	movs	r1, #0
 80011f4:	42c8      	cmn	r0, r1
 80011f6:	bd1f      	pop	{r0, r1, r2, r3, r4, pc}

080011f8 <__aeabi_dcmpeq>:
 80011f8:	b510      	push	{r4, lr}
 80011fa:	f000 f849 	bl	8001290 <__eqdf2>
 80011fe:	4240      	negs	r0, r0
 8001200:	3001      	adds	r0, #1
 8001202:	bd10      	pop	{r4, pc}

08001204 <__aeabi_dcmplt>:
 8001204:	b510      	push	{r4, lr}
 8001206:	f000 f8eb 	bl	80013e0 <__ledf2>
 800120a:	2800      	cmp	r0, #0
 800120c:	db01      	blt.n	8001212 <__aeabi_dcmplt+0xe>
 800120e:	2000      	movs	r0, #0
 8001210:	bd10      	pop	{r4, pc}
 8001212:	2001      	movs	r0, #1
 8001214:	bd10      	pop	{r4, pc}
 8001216:	46c0      	nop			; (mov r8, r8)

08001218 <__aeabi_dcmple>:
 8001218:	b510      	push	{r4, lr}
 800121a:	f000 f8e1 	bl	80013e0 <__ledf2>
 800121e:	2800      	cmp	r0, #0
 8001220:	dd01      	ble.n	8001226 <__aeabi_dcmple+0xe>
 8001222:	2000      	movs	r0, #0
 8001224:	bd10      	pop	{r4, pc}
 8001226:	2001      	movs	r0, #1
 8001228:	bd10      	pop	{r4, pc}
 800122a:	46c0      	nop			; (mov r8, r8)

0800122c <__aeabi_dcmpgt>:
 800122c:	b510      	push	{r4, lr}
 800122e:	f000 f871 	bl	8001314 <__gedf2>
 8001232:	2800      	cmp	r0, #0
 8001234:	dc01      	bgt.n	800123a <__aeabi_dcmpgt+0xe>
 8001236:	2000      	movs	r0, #0
 8001238:	bd10      	pop	{r4, pc}
 800123a:	2001      	movs	r0, #1
 800123c:	bd10      	pop	{r4, pc}
 800123e:	46c0      	nop			; (mov r8, r8)

08001240 <__aeabi_dcmpge>:
 8001240:	b510      	push	{r4, lr}
 8001242:	f000 f867 	bl	8001314 <__gedf2>
 8001246:	2800      	cmp	r0, #0
 8001248:	da01      	bge.n	800124e <__aeabi_dcmpge+0xe>
 800124a:	2000      	movs	r0, #0
 800124c:	bd10      	pop	{r4, pc}
 800124e:	2001      	movs	r0, #1
 8001250:	bd10      	pop	{r4, pc}
 8001252:	46c0      	nop			; (mov r8, r8)

08001254 <__clzsi2>:
 8001254:	211c      	movs	r1, #28
 8001256:	2301      	movs	r3, #1
 8001258:	041b      	lsls	r3, r3, #16
 800125a:	4298      	cmp	r0, r3
 800125c:	d301      	bcc.n	8001262 <__clzsi2+0xe>
 800125e:	0c00      	lsrs	r0, r0, #16
 8001260:	3910      	subs	r1, #16
 8001262:	0a1b      	lsrs	r3, r3, #8
 8001264:	4298      	cmp	r0, r3
 8001266:	d301      	bcc.n	800126c <__clzsi2+0x18>
 8001268:	0a00      	lsrs	r0, r0, #8
 800126a:	3908      	subs	r1, #8
 800126c:	091b      	lsrs	r3, r3, #4
 800126e:	4298      	cmp	r0, r3
 8001270:	d301      	bcc.n	8001276 <__clzsi2+0x22>
 8001272:	0900      	lsrs	r0, r0, #4
 8001274:	3904      	subs	r1, #4
 8001276:	a202      	add	r2, pc, #8	; (adr r2, 8001280 <__clzsi2+0x2c>)
 8001278:	5c10      	ldrb	r0, [r2, r0]
 800127a:	1840      	adds	r0, r0, r1
 800127c:	4770      	bx	lr
 800127e:	46c0      	nop			; (mov r8, r8)
 8001280:	02020304 	.word	0x02020304
 8001284:	01010101 	.word	0x01010101
	...

08001290 <__eqdf2>:
 8001290:	b5f0      	push	{r4, r5, r6, r7, lr}
 8001292:	464e      	mov	r6, r9
 8001294:	4645      	mov	r5, r8
 8001296:	46de      	mov	lr, fp
 8001298:	4657      	mov	r7, sl
 800129a:	4690      	mov	r8, r2
 800129c:	b5e0      	push	{r5, r6, r7, lr}
 800129e:	0017      	movs	r7, r2
 80012a0:	031a      	lsls	r2, r3, #12
 80012a2:	0b12      	lsrs	r2, r2, #12
 80012a4:	0005      	movs	r5, r0
 80012a6:	4684      	mov	ip, r0
 80012a8:	4819      	ldr	r0, [pc, #100]	; (8001310 <__eqdf2+0x80>)
 80012aa:	030e      	lsls	r6, r1, #12
 80012ac:	004c      	lsls	r4, r1, #1
 80012ae:	4691      	mov	r9, r2
 80012b0:	005a      	lsls	r2, r3, #1
 80012b2:	0fdb      	lsrs	r3, r3, #31
 80012b4:	469b      	mov	fp, r3
 80012b6:	0b36      	lsrs	r6, r6, #12
 80012b8:	0d64      	lsrs	r4, r4, #21
 80012ba:	0fc9      	lsrs	r1, r1, #31
 80012bc:	0d52      	lsrs	r2, r2, #21
 80012be:	4284      	cmp	r4, r0
 80012c0:	d019      	beq.n	80012f6 <__eqdf2+0x66>
 80012c2:	4282      	cmp	r2, r0
 80012c4:	d010      	beq.n	80012e8 <__eqdf2+0x58>
 80012c6:	2001      	movs	r0, #1
 80012c8:	4294      	cmp	r4, r2
 80012ca:	d10e      	bne.n	80012ea <__eqdf2+0x5a>
 80012cc:	454e      	cmp	r6, r9
 80012ce:	d10c      	bne.n	80012ea <__eqdf2+0x5a>
 80012d0:	2001      	movs	r0, #1
 80012d2:	45c4      	cmp	ip, r8
 80012d4:	d109      	bne.n	80012ea <__eqdf2+0x5a>
 80012d6:	4559      	cmp	r1, fp
 80012d8:	d017      	beq.n	800130a <__eqdf2+0x7a>
 80012da:	2c00      	cmp	r4, #0
 80012dc:	d105      	bne.n	80012ea <__eqdf2+0x5a>
 80012de:	0030      	movs	r0, r6
 80012e0:	4328      	orrs	r0, r5
 80012e2:	1e43      	subs	r3, r0, #1
 80012e4:	4198      	sbcs	r0, r3
 80012e6:	e000      	b.n	80012ea <__eqdf2+0x5a>
 80012e8:	2001      	movs	r0, #1
 80012ea:	bcf0      	pop	{r4, r5, r6, r7}
 80012ec:	46bb      	mov	fp, r7
 80012ee:	46b2      	mov	sl, r6
 80012f0:	46a9      	mov	r9, r5
 80012f2:	46a0      	mov	r8, r4
 80012f4:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80012f6:	0033      	movs	r3, r6
 80012f8:	2001      	movs	r0, #1
 80012fa:	432b      	orrs	r3, r5
 80012fc:	d1f5      	bne.n	80012ea <__eqdf2+0x5a>
 80012fe:	42a2      	cmp	r2, r4
 8001300:	d1f3      	bne.n	80012ea <__eqdf2+0x5a>
 8001302:	464b      	mov	r3, r9
 8001304:	433b      	orrs	r3, r7
 8001306:	d1f0      	bne.n	80012ea <__eqdf2+0x5a>
 8001308:	e7e2      	b.n	80012d0 <__eqdf2+0x40>
 800130a:	2000      	movs	r0, #0
 800130c:	e7ed      	b.n	80012ea <__eqdf2+0x5a>
 800130e:	46c0      	nop			; (mov r8, r8)
 8001310:	000007ff 	.word	0x000007ff

08001314 <__gedf2>:
 8001314:	b5f0      	push	{r4, r5, r6, r7, lr}
 8001316:	4647      	mov	r7, r8
 8001318:	46ce      	mov	lr, r9
 800131a:	0004      	movs	r4, r0
 800131c:	0018      	movs	r0, r3
 800131e:	0016      	movs	r6, r2
 8001320:	031b      	lsls	r3, r3, #12
 8001322:	0b1b      	lsrs	r3, r3, #12
 8001324:	4d2d      	ldr	r5, [pc, #180]	; (80013dc <__gedf2+0xc8>)
 8001326:	004a      	lsls	r2, r1, #1
 8001328:	4699      	mov	r9, r3
 800132a:	b580      	push	{r7, lr}
 800132c:	0043      	lsls	r3, r0, #1
 800132e:	030f      	lsls	r7, r1, #12
 8001330:	46a4      	mov	ip, r4
 8001332:	46b0      	mov	r8, r6
 8001334:	0b3f      	lsrs	r7, r7, #12
 8001336:	0d52      	lsrs	r2, r2, #21
 8001338:	0fc9      	lsrs	r1, r1, #31
 800133a:	0d5b      	lsrs	r3, r3, #21
 800133c:	0fc0      	lsrs	r0, r0, #31
 800133e:	42aa      	cmp	r2, r5
 8001340:	d021      	beq.n	8001386 <__gedf2+0x72>
 8001342:	42ab      	cmp	r3, r5
 8001344:	d013      	beq.n	800136e <__gedf2+0x5a>
 8001346:	2a00      	cmp	r2, #0
 8001348:	d122      	bne.n	8001390 <__gedf2+0x7c>
 800134a:	433c      	orrs	r4, r7
 800134c:	2b00      	cmp	r3, #0
 800134e:	d102      	bne.n	8001356 <__gedf2+0x42>
 8001350:	464d      	mov	r5, r9
 8001352:	432e      	orrs	r6, r5
 8001354:	d022      	beq.n	800139c <__gedf2+0x88>
 8001356:	2c00      	cmp	r4, #0
 8001358:	d010      	beq.n	800137c <__gedf2+0x68>
 800135a:	4281      	cmp	r1, r0
 800135c:	d022      	beq.n	80013a4 <__gedf2+0x90>
 800135e:	2002      	movs	r0, #2
 8001360:	3901      	subs	r1, #1
 8001362:	4008      	ands	r0, r1
 8001364:	3801      	subs	r0, #1
 8001366:	bcc0      	pop	{r6, r7}
 8001368:	46b9      	mov	r9, r7
 800136a:	46b0      	mov	r8, r6
 800136c:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800136e:	464d      	mov	r5, r9
 8001370:	432e      	orrs	r6, r5
 8001372:	d129      	bne.n	80013c8 <__gedf2+0xb4>
 8001374:	2a00      	cmp	r2, #0
 8001376:	d1f0      	bne.n	800135a <__gedf2+0x46>
 8001378:	433c      	orrs	r4, r7
 800137a:	d1ee      	bne.n	800135a <__gedf2+0x46>
 800137c:	2800      	cmp	r0, #0
 800137e:	d1f2      	bne.n	8001366 <__gedf2+0x52>
 8001380:	2001      	movs	r0, #1
 8001382:	4240      	negs	r0, r0
 8001384:	e7ef      	b.n	8001366 <__gedf2+0x52>
 8001386:	003d      	movs	r5, r7
 8001388:	4325      	orrs	r5, r4
 800138a:	d11d      	bne.n	80013c8 <__gedf2+0xb4>
 800138c:	4293      	cmp	r3, r2
 800138e:	d0ee      	beq.n	800136e <__gedf2+0x5a>
 8001390:	2b00      	cmp	r3, #0
 8001392:	d1e2      	bne.n	800135a <__gedf2+0x46>
 8001394:	464c      	mov	r4, r9
 8001396:	4326      	orrs	r6, r4
 8001398:	d1df      	bne.n	800135a <__gedf2+0x46>
 800139a:	e7e0      	b.n	800135e <__gedf2+0x4a>
 800139c:	2000      	movs	r0, #0
 800139e:	2c00      	cmp	r4, #0
 80013a0:	d0e1      	beq.n	8001366 <__gedf2+0x52>
 80013a2:	e7dc      	b.n	800135e <__gedf2+0x4a>
 80013a4:	429a      	cmp	r2, r3
 80013a6:	dc0a      	bgt.n	80013be <__gedf2+0xaa>
 80013a8:	dbe8      	blt.n	800137c <__gedf2+0x68>
 80013aa:	454f      	cmp	r7, r9
 80013ac:	d8d7      	bhi.n	800135e <__gedf2+0x4a>
 80013ae:	d00e      	beq.n	80013ce <__gedf2+0xba>
 80013b0:	2000      	movs	r0, #0
 80013b2:	454f      	cmp	r7, r9
 80013b4:	d2d7      	bcs.n	8001366 <__gedf2+0x52>
 80013b6:	2900      	cmp	r1, #0
 80013b8:	d0e2      	beq.n	8001380 <__gedf2+0x6c>
 80013ba:	0008      	movs	r0, r1
 80013bc:	e7d3      	b.n	8001366 <__gedf2+0x52>
 80013be:	4243      	negs	r3, r0
 80013c0:	4158      	adcs	r0, r3
 80013c2:	0040      	lsls	r0, r0, #1
 80013c4:	3801      	subs	r0, #1
 80013c6:	e7ce      	b.n	8001366 <__gedf2+0x52>
 80013c8:	2002      	movs	r0, #2
 80013ca:	4240      	negs	r0, r0
 80013cc:	e7cb      	b.n	8001366 <__gedf2+0x52>
 80013ce:	45c4      	cmp	ip, r8
 80013d0:	d8c5      	bhi.n	800135e <__gedf2+0x4a>
 80013d2:	2000      	movs	r0, #0
 80013d4:	45c4      	cmp	ip, r8
 80013d6:	d2c6      	bcs.n	8001366 <__gedf2+0x52>
 80013d8:	e7ed      	b.n	80013b6 <__gedf2+0xa2>
 80013da:	46c0      	nop			; (mov r8, r8)
 80013dc:	000007ff 	.word	0x000007ff

080013e0 <__ledf2>:
 80013e0:	b5f0      	push	{r4, r5, r6, r7, lr}
 80013e2:	4647      	mov	r7, r8
 80013e4:	46ce      	mov	lr, r9
 80013e6:	0004      	movs	r4, r0
 80013e8:	0018      	movs	r0, r3
 80013ea:	0016      	movs	r6, r2
 80013ec:	031b      	lsls	r3, r3, #12
 80013ee:	0b1b      	lsrs	r3, r3, #12
 80013f0:	4d2c      	ldr	r5, [pc, #176]	; (80014a4 <__ledf2+0xc4>)
 80013f2:	004a      	lsls	r2, r1, #1
 80013f4:	4699      	mov	r9, r3
 80013f6:	b580      	push	{r7, lr}
 80013f8:	0043      	lsls	r3, r0, #1
 80013fa:	030f      	lsls	r7, r1, #12
 80013fc:	46a4      	mov	ip, r4
 80013fe:	46b0      	mov	r8, r6
 8001400:	0b3f      	lsrs	r7, r7, #12
 8001402:	0d52      	lsrs	r2, r2, #21
 8001404:	0fc9      	lsrs	r1, r1, #31
 8001406:	0d5b      	lsrs	r3, r3, #21
 8001408:	0fc0      	lsrs	r0, r0, #31
 800140a:	42aa      	cmp	r2, r5
 800140c:	d00d      	beq.n	800142a <__ledf2+0x4a>
 800140e:	42ab      	cmp	r3, r5
 8001410:	d010      	beq.n	8001434 <__ledf2+0x54>
 8001412:	2a00      	cmp	r2, #0
 8001414:	d127      	bne.n	8001466 <__ledf2+0x86>
 8001416:	433c      	orrs	r4, r7
 8001418:	2b00      	cmp	r3, #0
 800141a:	d111      	bne.n	8001440 <__ledf2+0x60>
 800141c:	464d      	mov	r5, r9
 800141e:	432e      	orrs	r6, r5
 8001420:	d10e      	bne.n	8001440 <__ledf2+0x60>
 8001422:	2000      	movs	r0, #0
 8001424:	2c00      	cmp	r4, #0
 8001426:	d015      	beq.n	8001454 <__ledf2+0x74>
 8001428:	e00e      	b.n	8001448 <__ledf2+0x68>
 800142a:	003d      	movs	r5, r7
 800142c:	4325      	orrs	r5, r4
 800142e:	d110      	bne.n	8001452 <__ledf2+0x72>
 8001430:	4293      	cmp	r3, r2
 8001432:	d118      	bne.n	8001466 <__ledf2+0x86>
 8001434:	464d      	mov	r5, r9
 8001436:	432e      	orrs	r6, r5
 8001438:	d10b      	bne.n	8001452 <__ledf2+0x72>
 800143a:	2a00      	cmp	r2, #0
 800143c:	d102      	bne.n	8001444 <__ledf2+0x64>
 800143e:	433c      	orrs	r4, r7
 8001440:	2c00      	cmp	r4, #0
 8001442:	d00b      	beq.n	800145c <__ledf2+0x7c>
 8001444:	4281      	cmp	r1, r0
 8001446:	d014      	beq.n	8001472 <__ledf2+0x92>
 8001448:	2002      	movs	r0, #2
 800144a:	3901      	subs	r1, #1
 800144c:	4008      	ands	r0, r1
 800144e:	3801      	subs	r0, #1
 8001450:	e000      	b.n	8001454 <__ledf2+0x74>
 8001452:	2002      	movs	r0, #2
 8001454:	bcc0      	pop	{r6, r7}
 8001456:	46b9      	mov	r9, r7
 8001458:	46b0      	mov	r8, r6
 800145a:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800145c:	2800      	cmp	r0, #0
 800145e:	d1f9      	bne.n	8001454 <__ledf2+0x74>
 8001460:	2001      	movs	r0, #1
 8001462:	4240      	negs	r0, r0
 8001464:	e7f6      	b.n	8001454 <__ledf2+0x74>
 8001466:	2b00      	cmp	r3, #0
 8001468:	d1ec      	bne.n	8001444 <__ledf2+0x64>
 800146a:	464c      	mov	r4, r9
 800146c:	4326      	orrs	r6, r4
 800146e:	d1e9      	bne.n	8001444 <__ledf2+0x64>
 8001470:	e7ea      	b.n	8001448 <__ledf2+0x68>
 8001472:	429a      	cmp	r2, r3
 8001474:	dd04      	ble.n	8001480 <__ledf2+0xa0>
 8001476:	4243      	negs	r3, r0
 8001478:	4158      	adcs	r0, r3
 800147a:	0040      	lsls	r0, r0, #1
 800147c:	3801      	subs	r0, #1
 800147e:	e7e9      	b.n	8001454 <__ledf2+0x74>
 8001480:	429a      	cmp	r2, r3
 8001482:	dbeb      	blt.n	800145c <__ledf2+0x7c>
 8001484:	454f      	cmp	r7, r9
 8001486:	d8df      	bhi.n	8001448 <__ledf2+0x68>
 8001488:	d006      	beq.n	8001498 <__ledf2+0xb8>
 800148a:	2000      	movs	r0, #0
 800148c:	454f      	cmp	r7, r9
 800148e:	d2e1      	bcs.n	8001454 <__ledf2+0x74>
 8001490:	2900      	cmp	r1, #0
 8001492:	d0e5      	beq.n	8001460 <__ledf2+0x80>
 8001494:	0008      	movs	r0, r1
 8001496:	e7dd      	b.n	8001454 <__ledf2+0x74>
 8001498:	45c4      	cmp	ip, r8
 800149a:	d8d5      	bhi.n	8001448 <__ledf2+0x68>
 800149c:	2000      	movs	r0, #0
 800149e:	45c4      	cmp	ip, r8
 80014a0:	d2d8      	bcs.n	8001454 <__ledf2+0x74>
 80014a2:	e7f5      	b.n	8001490 <__ledf2+0xb0>
 80014a4:	000007ff 	.word	0x000007ff

080014a8 <MX_ADC_Init>:

ADC_HandleTypeDef hadc;

/* ADC init function */
void MX_ADC_Init(void)
{
 80014a8:	b580      	push	{r7, lr}
 80014aa:	b084      	sub	sp, #16
 80014ac:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC_Init 0 */

  /* USER CODE END ADC_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 80014ae:	1d3b      	adds	r3, r7, #4
 80014b0:	0018      	movs	r0, r3
 80014b2:	230c      	movs	r3, #12
 80014b4:	001a      	movs	r2, r3
 80014b6:	2100      	movs	r1, #0
 80014b8:	f004 fc64 	bl	8005d84 <memset>

  /* USER CODE END ADC_Init 1 */

  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion)
  */
  hadc.Instance = ADC1;
 80014bc:	4b2c      	ldr	r3, [pc, #176]	; (8001570 <MX_ADC_Init+0xc8>)
 80014be:	4a2d      	ldr	r2, [pc, #180]	; (8001574 <MX_ADC_Init+0xcc>)
 80014c0:	601a      	str	r2, [r3, #0]
  hadc.Init.ClockPrescaler = ADC_CLOCK_ASYNC_DIV1;
 80014c2:	4b2b      	ldr	r3, [pc, #172]	; (8001570 <MX_ADC_Init+0xc8>)
 80014c4:	2200      	movs	r2, #0
 80014c6:	605a      	str	r2, [r3, #4]
  hadc.Init.Resolution = ADC_RESOLUTION_12B;
 80014c8:	4b29      	ldr	r3, [pc, #164]	; (8001570 <MX_ADC_Init+0xc8>)
 80014ca:	2200      	movs	r2, #0
 80014cc:	609a      	str	r2, [r3, #8]
  hadc.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 80014ce:	4b28      	ldr	r3, [pc, #160]	; (8001570 <MX_ADC_Init+0xc8>)
 80014d0:	2200      	movs	r2, #0
 80014d2:	60da      	str	r2, [r3, #12]
  hadc.Init.ScanConvMode = ADC_SCAN_DIRECTION_FORWARD;
 80014d4:	4b26      	ldr	r3, [pc, #152]	; (8001570 <MX_ADC_Init+0xc8>)
 80014d6:	2201      	movs	r2, #1
 80014d8:	611a      	str	r2, [r3, #16]
  hadc.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 80014da:	4b25      	ldr	r3, [pc, #148]	; (8001570 <MX_ADC_Init+0xc8>)
 80014dc:	2204      	movs	r2, #4
 80014de:	615a      	str	r2, [r3, #20]
  hadc.Init.LowPowerAutoWait = DISABLE;
 80014e0:	4b23      	ldr	r3, [pc, #140]	; (8001570 <MX_ADC_Init+0xc8>)
 80014e2:	2200      	movs	r2, #0
 80014e4:	761a      	strb	r2, [r3, #24]
  hadc.Init.LowPowerAutoPowerOff = DISABLE;
 80014e6:	4b22      	ldr	r3, [pc, #136]	; (8001570 <MX_ADC_Init+0xc8>)
 80014e8:	2200      	movs	r2, #0
 80014ea:	765a      	strb	r2, [r3, #25]
  hadc.Init.ContinuousConvMode = DISABLE;
 80014ec:	4b20      	ldr	r3, [pc, #128]	; (8001570 <MX_ADC_Init+0xc8>)
 80014ee:	2200      	movs	r2, #0
 80014f0:	769a      	strb	r2, [r3, #26]
  hadc.Init.DiscontinuousConvMode = DISABLE;
 80014f2:	4b1f      	ldr	r3, [pc, #124]	; (8001570 <MX_ADC_Init+0xc8>)
 80014f4:	2200      	movs	r2, #0
 80014f6:	76da      	strb	r2, [r3, #27]
  hadc.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 80014f8:	4b1d      	ldr	r3, [pc, #116]	; (8001570 <MX_ADC_Init+0xc8>)
 80014fa:	22c2      	movs	r2, #194	; 0xc2
 80014fc:	32ff      	adds	r2, #255	; 0xff
 80014fe:	61da      	str	r2, [r3, #28]
  hadc.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8001500:	4b1b      	ldr	r3, [pc, #108]	; (8001570 <MX_ADC_Init+0xc8>)
 8001502:	2200      	movs	r2, #0
 8001504:	621a      	str	r2, [r3, #32]
  hadc.Init.DMAContinuousRequests = DISABLE;
 8001506:	4b1a      	ldr	r3, [pc, #104]	; (8001570 <MX_ADC_Init+0xc8>)
 8001508:	2224      	movs	r2, #36	; 0x24
 800150a:	2100      	movs	r1, #0
 800150c:	5499      	strb	r1, [r3, r2]
  hadc.Init.Overrun = ADC_OVR_DATA_PRESERVED;
 800150e:	4b18      	ldr	r3, [pc, #96]	; (8001570 <MX_ADC_Init+0xc8>)
 8001510:	2201      	movs	r2, #1
 8001512:	629a      	str	r2, [r3, #40]	; 0x28
  if (HAL_ADC_Init(&hadc) != HAL_OK)
 8001514:	4b16      	ldr	r3, [pc, #88]	; (8001570 <MX_ADC_Init+0xc8>)
 8001516:	0018      	movs	r0, r3
 8001518:	f000 ff90 	bl	800243c <HAL_ADC_Init>
 800151c:	1e03      	subs	r3, r0, #0
 800151e:	d001      	beq.n	8001524 <MX_ADC_Init+0x7c>
  {
    Error_Handler();
 8001520:	f000 fd3c 	bl	8001f9c <Error_Handler>
  }

  /** Configure for the selected ADC regular channel to be converted.
  */
  sConfig.Channel = ADC_CHANNEL_8;
 8001524:	1d3b      	adds	r3, r7, #4
 8001526:	2208      	movs	r2, #8
 8001528:	601a      	str	r2, [r3, #0]
  sConfig.Rank = ADC_RANK_CHANNEL_NUMBER;
 800152a:	1d3b      	adds	r3, r7, #4
 800152c:	2280      	movs	r2, #128	; 0x80
 800152e:	0152      	lsls	r2, r2, #5
 8001530:	605a      	str	r2, [r3, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_7CYCLES_5;
 8001532:	1d3b      	adds	r3, r7, #4
 8001534:	2201      	movs	r2, #1
 8001536:	609a      	str	r2, [r3, #8]
  if (HAL_ADC_ConfigChannel(&hadc, &sConfig) != HAL_OK)
 8001538:	1d3a      	adds	r2, r7, #4
 800153a:	4b0d      	ldr	r3, [pc, #52]	; (8001570 <MX_ADC_Init+0xc8>)
 800153c:	0011      	movs	r1, r2
 800153e:	0018      	movs	r0, r3
 8001540:	f001 f9b4 	bl	80028ac <HAL_ADC_ConfigChannel>
 8001544:	1e03      	subs	r3, r0, #0
 8001546:	d001      	beq.n	800154c <MX_ADC_Init+0xa4>
  {
    Error_Handler();
 8001548:	f000 fd28 	bl	8001f9c <Error_Handler>
  }

  /** Configure for the selected ADC regular channel to be converted.
  */
  sConfig.Channel = ADC_CHANNEL_9;
 800154c:	1d3b      	adds	r3, r7, #4
 800154e:	2209      	movs	r2, #9
 8001550:	601a      	str	r2, [r3, #0]
  if (HAL_ADC_ConfigChannel(&hadc, &sConfig) != HAL_OK)
 8001552:	1d3a      	adds	r2, r7, #4
 8001554:	4b06      	ldr	r3, [pc, #24]	; (8001570 <MX_ADC_Init+0xc8>)
 8001556:	0011      	movs	r1, r2
 8001558:	0018      	movs	r0, r3
 800155a:	f001 f9a7 	bl	80028ac <HAL_ADC_ConfigChannel>
 800155e:	1e03      	subs	r3, r0, #0
 8001560:	d001      	beq.n	8001566 <MX_ADC_Init+0xbe>
  {
    Error_Handler();
 8001562:	f000 fd1b 	bl	8001f9c <Error_Handler>
  }
  /* USER CODE BEGIN ADC_Init 2 */

  /* USER CODE END ADC_Init 2 */

}
 8001566:	46c0      	nop			; (mov r8, r8)
 8001568:	46bd      	mov	sp, r7
 800156a:	b004      	add	sp, #16
 800156c:	bd80      	pop	{r7, pc}
 800156e:	46c0      	nop			; (mov r8, r8)
 8001570:	20000078 	.word	0x20000078
 8001574:	40012400 	.word	0x40012400

08001578 <HAL_ADC_MspInit>:

void HAL_ADC_MspInit(ADC_HandleTypeDef* adcHandle)
{
 8001578:	b590      	push	{r4, r7, lr}
 800157a:	b08b      	sub	sp, #44	; 0x2c
 800157c:	af00      	add	r7, sp, #0
 800157e:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001580:	2414      	movs	r4, #20
 8001582:	193b      	adds	r3, r7, r4
 8001584:	0018      	movs	r0, r3
 8001586:	2314      	movs	r3, #20
 8001588:	001a      	movs	r2, r3
 800158a:	2100      	movs	r1, #0
 800158c:	f004 fbfa 	bl	8005d84 <memset>
  if(adcHandle->Instance==ADC1)
 8001590:	687b      	ldr	r3, [r7, #4]
 8001592:	681b      	ldr	r3, [r3, #0]
 8001594:	4a18      	ldr	r2, [pc, #96]	; (80015f8 <HAL_ADC_MspInit+0x80>)
 8001596:	4293      	cmp	r3, r2
 8001598:	d12a      	bne.n	80015f0 <HAL_ADC_MspInit+0x78>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* ADC1 clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 800159a:	4b18      	ldr	r3, [pc, #96]	; (80015fc <HAL_ADC_MspInit+0x84>)
 800159c:	699a      	ldr	r2, [r3, #24]
 800159e:	4b17      	ldr	r3, [pc, #92]	; (80015fc <HAL_ADC_MspInit+0x84>)
 80015a0:	2180      	movs	r1, #128	; 0x80
 80015a2:	0089      	lsls	r1, r1, #2
 80015a4:	430a      	orrs	r2, r1
 80015a6:	619a      	str	r2, [r3, #24]
 80015a8:	4b14      	ldr	r3, [pc, #80]	; (80015fc <HAL_ADC_MspInit+0x84>)
 80015aa:	699a      	ldr	r2, [r3, #24]
 80015ac:	2380      	movs	r3, #128	; 0x80
 80015ae:	009b      	lsls	r3, r3, #2
 80015b0:	4013      	ands	r3, r2
 80015b2:	613b      	str	r3, [r7, #16]
 80015b4:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 80015b6:	4b11      	ldr	r3, [pc, #68]	; (80015fc <HAL_ADC_MspInit+0x84>)
 80015b8:	695a      	ldr	r2, [r3, #20]
 80015ba:	4b10      	ldr	r3, [pc, #64]	; (80015fc <HAL_ADC_MspInit+0x84>)
 80015bc:	2180      	movs	r1, #128	; 0x80
 80015be:	02c9      	lsls	r1, r1, #11
 80015c0:	430a      	orrs	r2, r1
 80015c2:	615a      	str	r2, [r3, #20]
 80015c4:	4b0d      	ldr	r3, [pc, #52]	; (80015fc <HAL_ADC_MspInit+0x84>)
 80015c6:	695a      	ldr	r2, [r3, #20]
 80015c8:	2380      	movs	r3, #128	; 0x80
 80015ca:	02db      	lsls	r3, r3, #11
 80015cc:	4013      	ands	r3, r2
 80015ce:	60fb      	str	r3, [r7, #12]
 80015d0:	68fb      	ldr	r3, [r7, #12]
    /**ADC GPIO Configuration
    PB0     ------> ADC_IN8
    PB1     ------> ADC_IN9
    */
    GPIO_InitStruct.Pin = AIR_N_CURRENT_SENSOR_uC_Pin|AIR_P_CURRENT_SENSOR_uC_Pin;
 80015d2:	193b      	adds	r3, r7, r4
 80015d4:	2203      	movs	r2, #3
 80015d6:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 80015d8:	193b      	adds	r3, r7, r4
 80015da:	2203      	movs	r2, #3
 80015dc:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80015de:	193b      	adds	r3, r7, r4
 80015e0:	2200      	movs	r2, #0
 80015e2:	609a      	str	r2, [r3, #8]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80015e4:	193b      	adds	r3, r7, r4
 80015e6:	4a06      	ldr	r2, [pc, #24]	; (8001600 <HAL_ADC_MspInit+0x88>)
 80015e8:	0019      	movs	r1, r3
 80015ea:	0010      	movs	r0, r2
 80015ec:	f002 fa40 	bl	8003a70 <HAL_GPIO_Init>

  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }
}
 80015f0:	46c0      	nop			; (mov r8, r8)
 80015f2:	46bd      	mov	sp, r7
 80015f4:	b00b      	add	sp, #44	; 0x2c
 80015f6:	bd90      	pop	{r4, r7, pc}
 80015f8:	40012400 	.word	0x40012400
 80015fc:	40021000 	.word	0x40021000
 8001600:	48000400 	.word	0x48000400

08001604 <MX_CAN_Init>:

CAN_HandleTypeDef hcan;

/* CAN init function */
void MX_CAN_Init(void)
{
 8001604:	b580      	push	{r7, lr}
 8001606:	af00      	add	r7, sp, #0
  /* USER CODE END CAN_Init 0 */

  /* USER CODE BEGIN CAN_Init 1 */

  /* USER CODE END CAN_Init 1 */
  hcan.Instance = CAN;
 8001608:	4b18      	ldr	r3, [pc, #96]	; (800166c <MX_CAN_Init+0x68>)
 800160a:	4a19      	ldr	r2, [pc, #100]	; (8001670 <MX_CAN_Init+0x6c>)
 800160c:	601a      	str	r2, [r3, #0]
  hcan.Init.Prescaler = 2;
 800160e:	4b17      	ldr	r3, [pc, #92]	; (800166c <MX_CAN_Init+0x68>)
 8001610:	2202      	movs	r2, #2
 8001612:	605a      	str	r2, [r3, #4]
  hcan.Init.Mode = CAN_MODE_NORMAL;
 8001614:	4b15      	ldr	r3, [pc, #84]	; (800166c <MX_CAN_Init+0x68>)
 8001616:	2200      	movs	r2, #0
 8001618:	609a      	str	r2, [r3, #8]
  hcan.Init.SyncJumpWidth = CAN_SJW_1TQ;
 800161a:	4b14      	ldr	r3, [pc, #80]	; (800166c <MX_CAN_Init+0x68>)
 800161c:	2200      	movs	r2, #0
 800161e:	60da      	str	r2, [r3, #12]
  hcan.Init.TimeSeg1 = CAN_BS1_13TQ;
 8001620:	4b12      	ldr	r3, [pc, #72]	; (800166c <MX_CAN_Init+0x68>)
 8001622:	22c0      	movs	r2, #192	; 0xc0
 8001624:	0312      	lsls	r2, r2, #12
 8001626:	611a      	str	r2, [r3, #16]
  hcan.Init.TimeSeg2 = CAN_BS2_2TQ;
 8001628:	4b10      	ldr	r3, [pc, #64]	; (800166c <MX_CAN_Init+0x68>)
 800162a:	2280      	movs	r2, #128	; 0x80
 800162c:	0352      	lsls	r2, r2, #13
 800162e:	615a      	str	r2, [r3, #20]
  hcan.Init.TimeTriggeredMode = DISABLE;
 8001630:	4b0e      	ldr	r3, [pc, #56]	; (800166c <MX_CAN_Init+0x68>)
 8001632:	2200      	movs	r2, #0
 8001634:	761a      	strb	r2, [r3, #24]
  hcan.Init.AutoBusOff = DISABLE;
 8001636:	4b0d      	ldr	r3, [pc, #52]	; (800166c <MX_CAN_Init+0x68>)
 8001638:	2200      	movs	r2, #0
 800163a:	765a      	strb	r2, [r3, #25]
  hcan.Init.AutoWakeUp = DISABLE;
 800163c:	4b0b      	ldr	r3, [pc, #44]	; (800166c <MX_CAN_Init+0x68>)
 800163e:	2200      	movs	r2, #0
 8001640:	769a      	strb	r2, [r3, #26]
  hcan.Init.AutoRetransmission = DISABLE;
 8001642:	4b0a      	ldr	r3, [pc, #40]	; (800166c <MX_CAN_Init+0x68>)
 8001644:	2200      	movs	r2, #0
 8001646:	76da      	strb	r2, [r3, #27]
  hcan.Init.ReceiveFifoLocked = DISABLE;
 8001648:	4b08      	ldr	r3, [pc, #32]	; (800166c <MX_CAN_Init+0x68>)
 800164a:	2200      	movs	r2, #0
 800164c:	771a      	strb	r2, [r3, #28]
  hcan.Init.TransmitFifoPriority = DISABLE;
 800164e:	4b07      	ldr	r3, [pc, #28]	; (800166c <MX_CAN_Init+0x68>)
 8001650:	2200      	movs	r2, #0
 8001652:	775a      	strb	r2, [r3, #29]
  if (HAL_CAN_Init(&hcan) != HAL_OK)
 8001654:	4b05      	ldr	r3, [pc, #20]	; (800166c <MX_CAN_Init+0x68>)
 8001656:	0018      	movs	r0, r3
 8001658:	f001 faba 	bl	8002bd0 <HAL_CAN_Init>
 800165c:	1e03      	subs	r3, r0, #0
 800165e:	d001      	beq.n	8001664 <MX_CAN_Init+0x60>
  {
    Error_Handler();
 8001660:	f000 fc9c 	bl	8001f9c <Error_Handler>
  }
  /* USER CODE BEGIN CAN_Init 2 */

  /* USER CODE END CAN_Init 2 */

}
 8001664:	46c0      	nop			; (mov r8, r8)
 8001666:	46bd      	mov	sp, r7
 8001668:	bd80      	pop	{r7, pc}
 800166a:	46c0      	nop			; (mov r8, r8)
 800166c:	200000b8 	.word	0x200000b8
 8001670:	40006400 	.word	0x40006400

08001674 <HAL_CAN_MspInit>:

void HAL_CAN_MspInit(CAN_HandleTypeDef* canHandle)
{
 8001674:	b590      	push	{r4, r7, lr}
 8001676:	b08b      	sub	sp, #44	; 0x2c
 8001678:	af00      	add	r7, sp, #0
 800167a:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800167c:	2414      	movs	r4, #20
 800167e:	193b      	adds	r3, r7, r4
 8001680:	0018      	movs	r0, r3
 8001682:	2314      	movs	r3, #20
 8001684:	001a      	movs	r2, r3
 8001686:	2100      	movs	r1, #0
 8001688:	f004 fb7c 	bl	8005d84 <memset>
  if(canHandle->Instance==CAN)
 800168c:	687b      	ldr	r3, [r7, #4]
 800168e:	681b      	ldr	r3, [r3, #0]
 8001690:	4a21      	ldr	r2, [pc, #132]	; (8001718 <HAL_CAN_MspInit+0xa4>)
 8001692:	4293      	cmp	r3, r2
 8001694:	d13b      	bne.n	800170e <HAL_CAN_MspInit+0x9a>
  {
  /* USER CODE BEGIN CAN_MspInit 0 */

  /* USER CODE END CAN_MspInit 0 */
    /* CAN clock enable */
    __HAL_RCC_CAN1_CLK_ENABLE();
 8001696:	4b21      	ldr	r3, [pc, #132]	; (800171c <HAL_CAN_MspInit+0xa8>)
 8001698:	69da      	ldr	r2, [r3, #28]
 800169a:	4b20      	ldr	r3, [pc, #128]	; (800171c <HAL_CAN_MspInit+0xa8>)
 800169c:	2180      	movs	r1, #128	; 0x80
 800169e:	0489      	lsls	r1, r1, #18
 80016a0:	430a      	orrs	r2, r1
 80016a2:	61da      	str	r2, [r3, #28]
 80016a4:	4b1d      	ldr	r3, [pc, #116]	; (800171c <HAL_CAN_MspInit+0xa8>)
 80016a6:	69da      	ldr	r2, [r3, #28]
 80016a8:	2380      	movs	r3, #128	; 0x80
 80016aa:	049b      	lsls	r3, r3, #18
 80016ac:	4013      	ands	r3, r2
 80016ae:	613b      	str	r3, [r7, #16]
 80016b0:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80016b2:	4b1a      	ldr	r3, [pc, #104]	; (800171c <HAL_CAN_MspInit+0xa8>)
 80016b4:	695a      	ldr	r2, [r3, #20]
 80016b6:	4b19      	ldr	r3, [pc, #100]	; (800171c <HAL_CAN_MspInit+0xa8>)
 80016b8:	2180      	movs	r1, #128	; 0x80
 80016ba:	0289      	lsls	r1, r1, #10
 80016bc:	430a      	orrs	r2, r1
 80016be:	615a      	str	r2, [r3, #20]
 80016c0:	4b16      	ldr	r3, [pc, #88]	; (800171c <HAL_CAN_MspInit+0xa8>)
 80016c2:	695a      	ldr	r2, [r3, #20]
 80016c4:	2380      	movs	r3, #128	; 0x80
 80016c6:	029b      	lsls	r3, r3, #10
 80016c8:	4013      	ands	r3, r2
 80016ca:	60fb      	str	r3, [r7, #12]
 80016cc:	68fb      	ldr	r3, [r7, #12]
    /**CAN GPIO Configuration
    PA11     ------> CAN_RX
    PA12     ------> CAN_TX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_11|GPIO_PIN_12;
 80016ce:	193b      	adds	r3, r7, r4
 80016d0:	22c0      	movs	r2, #192	; 0xc0
 80016d2:	0152      	lsls	r2, r2, #5
 80016d4:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80016d6:	0021      	movs	r1, r4
 80016d8:	187b      	adds	r3, r7, r1
 80016da:	2202      	movs	r2, #2
 80016dc:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80016de:	187b      	adds	r3, r7, r1
 80016e0:	2200      	movs	r2, #0
 80016e2:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 80016e4:	187b      	adds	r3, r7, r1
 80016e6:	2203      	movs	r2, #3
 80016e8:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF4_CAN;
 80016ea:	187b      	adds	r3, r7, r1
 80016ec:	2204      	movs	r2, #4
 80016ee:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80016f0:	187a      	adds	r2, r7, r1
 80016f2:	2390      	movs	r3, #144	; 0x90
 80016f4:	05db      	lsls	r3, r3, #23
 80016f6:	0011      	movs	r1, r2
 80016f8:	0018      	movs	r0, r3
 80016fa:	f002 f9b9 	bl	8003a70 <HAL_GPIO_Init>

    /* CAN interrupt Init */
    HAL_NVIC_SetPriority(CEC_CAN_IRQn, 0, 0);
 80016fe:	2200      	movs	r2, #0
 8001700:	2100      	movs	r1, #0
 8001702:	201e      	movs	r0, #30
 8001704:	f002 f982 	bl	8003a0c <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(CEC_CAN_IRQn);
 8001708:	201e      	movs	r0, #30
 800170a:	f002 f994 	bl	8003a36 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN CAN_MspInit 1 */

  /* USER CODE END CAN_MspInit 1 */
  }
}
 800170e:	46c0      	nop			; (mov r8, r8)
 8001710:	46bd      	mov	sp, r7
 8001712:	b00b      	add	sp, #44	; 0x2c
 8001714:	bd90      	pop	{r4, r7, pc}
 8001716:	46c0      	nop			; (mov r8, r8)
 8001718:	40006400 	.word	0x40006400
 800171c:	40021000 	.word	0x40021000

08001720 <CAN_Init>:
          Filter configured in accordance with E&S Team Project Guidelines.
 *
 * @retval None.
 **/
void CAN_Init(void)
{
 8001720:	b580      	push	{r7, lr}
 8001722:	af00      	add	r7, sp, #0
	sFilterConfig.FilterBank = 1;
 8001724:	4b26      	ldr	r3, [pc, #152]	; (80017c0 <CAN_Init+0xa0>)
 8001726:	2201      	movs	r2, #1
 8001728:	615a      	str	r2, [r3, #20]
	sFilterConfig.FilterMode = CAN_FILTERMODE_IDMASK;
 800172a:	4b25      	ldr	r3, [pc, #148]	; (80017c0 <CAN_Init+0xa0>)
 800172c:	2200      	movs	r2, #0
 800172e:	619a      	str	r2, [r3, #24]
	sFilterConfig.FilterScale = CAN_FILTERSCALE_32BIT;
 8001730:	4b23      	ldr	r3, [pc, #140]	; (80017c0 <CAN_Init+0xa0>)
 8001732:	2201      	movs	r2, #1
 8001734:	61da      	str	r2, [r3, #28]
	sFilterConfig.FilterIdHigh = Rx_ID << 5;
 8001736:	4b22      	ldr	r3, [pc, #136]	; (80017c0 <CAN_Init+0xa0>)
 8001738:	4a22      	ldr	r2, [pc, #136]	; (80017c4 <CAN_Init+0xa4>)
 800173a:	601a      	str	r2, [r3, #0]
	sFilterConfig.FilterIdLow = 0x0000;
 800173c:	4b20      	ldr	r3, [pc, #128]	; (80017c0 <CAN_Init+0xa0>)
 800173e:	2200      	movs	r2, #0
 8001740:	605a      	str	r2, [r3, #4]
	sFilterConfig.FilterMaskIdHigh = 0xFFFF << 5;
 8001742:	4b1f      	ldr	r3, [pc, #124]	; (80017c0 <CAN_Init+0xa0>)
 8001744:	4a20      	ldr	r2, [pc, #128]	; (80017c8 <CAN_Init+0xa8>)
 8001746:	609a      	str	r2, [r3, #8]
	sFilterConfig.FilterMaskIdLow = 0x0000;
 8001748:	4b1d      	ldr	r3, [pc, #116]	; (80017c0 <CAN_Init+0xa0>)
 800174a:	2200      	movs	r2, #0
 800174c:	60da      	str	r2, [r3, #12]
	sFilterConfig.FilterFIFOAssignment = CAN_RX_FIFO0;
 800174e:	4b1c      	ldr	r3, [pc, #112]	; (80017c0 <CAN_Init+0xa0>)
 8001750:	2200      	movs	r2, #0
 8001752:	611a      	str	r2, [r3, #16]
	sFilterConfig.FilterActivation = ENABLE;
 8001754:	4b1a      	ldr	r3, [pc, #104]	; (80017c0 <CAN_Init+0xa0>)
 8001756:	2201      	movs	r2, #1
 8001758:	621a      	str	r2, [r3, #32]
	sFilterConfig.SlaveStartFilterBank = 14;
 800175a:	4b19      	ldr	r3, [pc, #100]	; (80017c0 <CAN_Init+0xa0>)
 800175c:	220e      	movs	r2, #14
 800175e:	625a      	str	r2, [r3, #36]	; 0x24

//	CAN_Register_Callback(CAN_Error_Handler);

	if (HAL_CAN_ConfigFilter(&hcan, &sFilterConfig) != HAL_OK)
 8001760:	4a17      	ldr	r2, [pc, #92]	; (80017c0 <CAN_Init+0xa0>)
 8001762:	4b1a      	ldr	r3, [pc, #104]	; (80017cc <CAN_Init+0xac>)
 8001764:	0011      	movs	r1, r2
 8001766:	0018      	movs	r0, r3
 8001768:	f001 fb30 	bl	8002dcc <HAL_CAN_ConfigFilter>
 800176c:	1e03      	subs	r3, r0, #0
 800176e:	d001      	beq.n	8001774 <CAN_Init+0x54>
	{
		/* Filter configuration Error */
		Error_Handler();
 8001770:	f000 fc14 	bl	8001f9c <Error_Handler>
	}
	if (HAL_CAN_Start(&hcan) != HAL_OK)
 8001774:	4b15      	ldr	r3, [pc, #84]	; (80017cc <CAN_Init+0xac>)
 8001776:	0018      	movs	r0, r3
 8001778:	f001 fc1a 	bl	8002fb0 <HAL_CAN_Start>
 800177c:	1e03      	subs	r3, r0, #0
 800177e:	d001      	beq.n	8001784 <CAN_Init+0x64>
	{
		/* Start Error */
		Error_Handler();
 8001780:	f000 fc0c 	bl	8001f9c <Error_Handler>
	}
	if (HAL_CAN_ActivateNotification(&hcan, CAN_IT_RX_FIFO0_MSG_PENDING | CAN_IT_TX_MAILBOX_EMPTY) != HAL_OK)
 8001784:	4b11      	ldr	r3, [pc, #68]	; (80017cc <CAN_Init+0xac>)
 8001786:	2103      	movs	r1, #3
 8001788:	0018      	movs	r0, r3
 800178a:	f001 fe54 	bl	8003436 <HAL_CAN_ActivateNotification>
 800178e:	1e03      	subs	r3, r0, #0
 8001790:	d001      	beq.n	8001796 <CAN_Init+0x76>
	{
		/* Notification Error */
		Error_Handler();
 8001792:	f000 fc03 	bl	8001f9c <Error_Handler>
	}

	TxHeader.StdId = Tx_ID;
 8001796:	4b0e      	ldr	r3, [pc, #56]	; (80017d0 <CAN_Init+0xb0>)
 8001798:	4a0e      	ldr	r2, [pc, #56]	; (80017d4 <CAN_Init+0xb4>)
 800179a:	601a      	str	r2, [r3, #0]
	TxHeader.ExtId = 0x0000;
 800179c:	4b0c      	ldr	r3, [pc, #48]	; (80017d0 <CAN_Init+0xb0>)
 800179e:	2200      	movs	r2, #0
 80017a0:	605a      	str	r2, [r3, #4]
	TxHeader.RTR = CAN_RTR_DATA;
 80017a2:	4b0b      	ldr	r3, [pc, #44]	; (80017d0 <CAN_Init+0xb0>)
 80017a4:	2200      	movs	r2, #0
 80017a6:	60da      	str	r2, [r3, #12]
	TxHeader.IDE = CAN_ID_STD;
 80017a8:	4b09      	ldr	r3, [pc, #36]	; (80017d0 <CAN_Init+0xb0>)
 80017aa:	2200      	movs	r2, #0
 80017ac:	609a      	str	r2, [r3, #8]
	TxHeader.DLC = 8;
 80017ae:	4b08      	ldr	r3, [pc, #32]	; (80017d0 <CAN_Init+0xb0>)
 80017b0:	2208      	movs	r2, #8
 80017b2:	611a      	str	r2, [r3, #16]
	TxHeader.TransmitGlobalTime = DISABLE;
 80017b4:	4b06      	ldr	r3, [pc, #24]	; (80017d0 <CAN_Init+0xb0>)
 80017b6:	2200      	movs	r2, #0
 80017b8:	751a      	strb	r2, [r3, #20]
}
 80017ba:	46c0      	nop			; (mov r8, r8)
 80017bc:	46bd      	mov	sp, r7
 80017be:	bd80      	pop	{r7, pc}
 80017c0:	200000e0 	.word	0x200000e0
 80017c4:	000041e0 	.word	0x000041e0
 80017c8:	001fffe0 	.word	0x001fffe0
 80017cc:	200000b8 	.word	0x200000b8
 80017d0:	20000108 	.word	0x20000108
 80017d4:	0000020a 	.word	0x0000020a

080017d8 <HAL_CAN_RxFifo0MsgPendingCallback>:
 *         the configuration information for the specified CAN.
 *
 * @retval None 
 **/
void HAL_CAN_RxFifo0MsgPendingCallback(CAN_HandleTypeDef *hcan)
{
 80017d8:	b580      	push	{r7, lr}
 80017da:	b082      	sub	sp, #8
 80017dc:	af00      	add	r7, sp, #0
 80017de:	6078      	str	r0, [r7, #4]
	CAN_Receive(hcan, &RxHeader, RxData);
 80017e0:	4a06      	ldr	r2, [pc, #24]	; (80017fc <HAL_CAN_RxFifo0MsgPendingCallback+0x24>)
 80017e2:	4907      	ldr	r1, [pc, #28]	; (8001800 <HAL_CAN_RxFifo0MsgPendingCallback+0x28>)
 80017e4:	687b      	ldr	r3, [r7, #4]
 80017e6:	0018      	movs	r0, r3
 80017e8:	f000 f81d 	bl	8001826 <CAN_Receive>
	CAN_On_Receive(RxData);
 80017ec:	4b03      	ldr	r3, [pc, #12]	; (80017fc <HAL_CAN_RxFifo0MsgPendingCallback+0x24>)
 80017ee:	0018      	movs	r0, r3
 80017f0:	f000 f808 	bl	8001804 <CAN_On_Receive>
}
 80017f4:	46c0      	nop			; (mov r8, r8)
 80017f6:	46bd      	mov	sp, r7
 80017f8:	b002      	add	sp, #8
 80017fa:	bd80      	pop	{r7, pc}
 80017fc:	20000144 	.word	0x20000144
 8001800:	20000120 	.word	0x20000120

08001804 <CAN_On_Receive>:
 * @param RxData pointer to uint8_t array which stores received data
 * 
 * @retval None
 **/
void CAN_On_Receive(uint8_t *RxData)
{
 8001804:	b580      	push	{r7, lr}
 8001806:	b082      	sub	sp, #8
 8001808:	af00      	add	r7, sp, #0
 800180a:	6078      	str	r0, [r7, #4]
	if(Read_RequestMessage == RxData[ReadMessage])
 800180c:	687b      	ldr	r3, [r7, #4]
 800180e:	781b      	ldrb	r3, [r3, #0]
 8001810:	2b3d      	cmp	r3, #61	; 0x3d
 8001812:	d102      	bne.n	800181a <CAN_On_Receive+0x16>
	{
		CAN_Respond();
 8001814:	f000 f83a 	bl	800188c <CAN_Respond>
	}
	else
	{
		CAN_ProcessWriteCommand();
	}
}
 8001818:	e001      	b.n	800181e <CAN_On_Receive+0x1a>
		CAN_ProcessWriteCommand();
 800181a:	f000 f85d 	bl	80018d8 <CAN_ProcessWriteCommand>
}
 800181e:	46c0      	nop			; (mov r8, r8)
 8001820:	46bd      	mov	sp, r7
 8001822:	b002      	add	sp, #8
 8001824:	bd80      	pop	{r7, pc}

08001826 <CAN_Receive>:
 * @param RxData uint8_t pointer to array that will contain received data.
 * 
 * @retval None.
 **/
void CAN_Receive(CAN_HandleTypeDef *CANPointer, CAN_RxHeaderTypeDef *RxHeader, uint8_t *RxData)
{
 8001826:	b580      	push	{r7, lr}
 8001828:	b084      	sub	sp, #16
 800182a:	af00      	add	r7, sp, #0
 800182c:	60f8      	str	r0, [r7, #12]
 800182e:	60b9      	str	r1, [r7, #8]
 8001830:	607a      	str	r2, [r7, #4]
	if(HAL_CAN_GetRxMessage(CANPointer, CAN_RX_FIFO0, RxHeader, RxData) != HAL_OK)
 8001832:	687b      	ldr	r3, [r7, #4]
 8001834:	68ba      	ldr	r2, [r7, #8]
 8001836:	68f8      	ldr	r0, [r7, #12]
 8001838:	2100      	movs	r1, #0
 800183a:	f001 fcd1 	bl	80031e0 <HAL_CAN_GetRxMessage>
 800183e:	1e03      	subs	r3, r0, #0
 8001840:	d001      	beq.n	8001846 <CAN_Receive+0x20>
	{
		CANBUS_Error_Handler();
 8001842:	f000 f8b9 	bl	80019b8 <CANBUS_Error_Handler>
	}
};
 8001846:	46c0      	nop			; (mov r8, r8)
 8001848:	46bd      	mov	sp, r7
 800184a:	b004      	add	sp, #16
 800184c:	bd80      	pop	{r7, pc}
	...

08001850 <CAN_Transmit>:
 * @param TxMailbox uint32_t pointer to array that contains whole CAN message to transmit.
 * 
 * @retval None.
 **/
void CAN_Transmit(CAN_TxHeaderTypeDef *TxHeader, uint8_t TxDLC, uint8_t *TxData, uint32_t *TxMailbox)
{
 8001850:	b580      	push	{r7, lr}
 8001852:	b084      	sub	sp, #16
 8001854:	af00      	add	r7, sp, #0
 8001856:	60f8      	str	r0, [r7, #12]
 8001858:	607a      	str	r2, [r7, #4]
 800185a:	603b      	str	r3, [r7, #0]
 800185c:	200b      	movs	r0, #11
 800185e:	183b      	adds	r3, r7, r0
 8001860:	1c0a      	adds	r2, r1, #0
 8001862:	701a      	strb	r2, [r3, #0]
	TxHeader->DLC = TxDLC;
 8001864:	183b      	adds	r3, r7, r0
 8001866:	781a      	ldrb	r2, [r3, #0]
 8001868:	68fb      	ldr	r3, [r7, #12]
 800186a:	611a      	str	r2, [r3, #16]
	if(HAL_CAN_AddTxMessage(&hcan, TxHeader, TxData, TxMailbox) != HAL_OK)
 800186c:	683b      	ldr	r3, [r7, #0]
 800186e:	687a      	ldr	r2, [r7, #4]
 8001870:	68f9      	ldr	r1, [r7, #12]
 8001872:	4805      	ldr	r0, [pc, #20]	; (8001888 <CAN_Transmit+0x38>)
 8001874:	f001 fbe2 	bl	800303c <HAL_CAN_AddTxMessage>
 8001878:	1e03      	subs	r3, r0, #0
 800187a:	d001      	beq.n	8001880 <CAN_Transmit+0x30>
	{
		CANBUS_Error_Handler();
 800187c:	f000 f89c 	bl	80019b8 <CANBUS_Error_Handler>
	}
}
 8001880:	46c0      	nop			; (mov r8, r8)
 8001882:	46bd      	mov	sp, r7
 8001884:	b004      	add	sp, #16
 8001886:	bd80      	pop	{r7, pc}
 8001888:	200000b8 	.word	0x200000b8

0800188c <CAN_Respond>:
 * @brief Function to respond in connection with read request from MCU
 * 
 * @retval None.
 **/
void CAN_Respond(void)
{
 800188c:	b580      	push	{r7, lr}
 800188e:	b082      	sub	sp, #8
 8001890:	af00      	add	r7, sp, #0
	for (int i = FIRST_ARRAY_ELEMENT; i < NUMBER_OF_READ_REGS; i++)
 8001892:	2300      	movs	r3, #0
 8001894:	607b      	str	r3, [r7, #4]
 8001896:	e013      	b.n	80018c0 <CAN_Respond+0x34>
	{
		if (ResponseMessage[i].Response_RegID == RxData[ReadRegID])
 8001898:	4a0d      	ldr	r2, [pc, #52]	; (80018d0 <CAN_Respond+0x44>)
 800189a:	687b      	ldr	r3, [r7, #4]
 800189c:	011b      	lsls	r3, r3, #4
 800189e:	18d3      	adds	r3, r2, r3
 80018a0:	3301      	adds	r3, #1
 80018a2:	781a      	ldrb	r2, [r3, #0]
 80018a4:	4b0b      	ldr	r3, [pc, #44]	; (80018d4 <CAN_Respond+0x48>)
 80018a6:	785b      	ldrb	r3, [r3, #1]
 80018a8:	429a      	cmp	r2, r3
 80018aa:	d106      	bne.n	80018ba <CAN_Respond+0x2e>
		{
			ResponseMessage[i].Read_ReactionHandler();
 80018ac:	4a08      	ldr	r2, [pc, #32]	; (80018d0 <CAN_Respond+0x44>)
 80018ae:	687b      	ldr	r3, [r7, #4]
 80018b0:	011b      	lsls	r3, r3, #4
 80018b2:	18d3      	adds	r3, r2, r3
 80018b4:	3304      	adds	r3, #4
 80018b6:	681b      	ldr	r3, [r3, #0]
 80018b8:	4798      	blx	r3
	for (int i = FIRST_ARRAY_ELEMENT; i < NUMBER_OF_READ_REGS; i++)
 80018ba:	687b      	ldr	r3, [r7, #4]
 80018bc:	3301      	adds	r3, #1
 80018be:	607b      	str	r3, [r7, #4]
 80018c0:	687b      	ldr	r3, [r7, #4]
 80018c2:	2b01      	cmp	r3, #1
 80018c4:	d9e8      	bls.n	8001898 <CAN_Respond+0xc>
		}
	}
}
 80018c6:	46c0      	nop			; (mov r8, r8)
 80018c8:	46c0      	nop			; (mov r8, r8)
 80018ca:	46bd      	mov	sp, r7
 80018cc:	b002      	add	sp, #8
 80018ce:	bd80      	pop	{r7, pc}
 80018d0:	20000000 	.word	0x20000000
 80018d4:	20000144 	.word	0x20000144

080018d8 <CAN_ProcessWriteCommand>:
 * @brief Function to process write command
 * 
 * @retval None.
 **/
void CAN_ProcessWriteCommand(void)
{
 80018d8:	b580      	push	{r7, lr}
 80018da:	b082      	sub	sp, #8
 80018dc:	af00      	add	r7, sp, #0
	for (int i = FIRST_ARRAY_ELEMENT; i < NUMBER_OF_WRITE_REGS; i++)
 80018de:	2300      	movs	r3, #0
 80018e0:	607b      	str	r3, [r7, #4]
 80018e2:	e021      	b.n	8001928 <CAN_ProcessWriteCommand+0x50>
	{
		if (WriteMessage[i].Write_RegID == RxData[WriteMessage_reg])
 80018e4:	4914      	ldr	r1, [pc, #80]	; (8001938 <CAN_ProcessWriteCommand+0x60>)
 80018e6:	687a      	ldr	r2, [r7, #4]
 80018e8:	0013      	movs	r3, r2
 80018ea:	005b      	lsls	r3, r3, #1
 80018ec:	189b      	adds	r3, r3, r2
 80018ee:	00db      	lsls	r3, r3, #3
 80018f0:	5c5a      	ldrb	r2, [r3, r1]
 80018f2:	4b12      	ldr	r3, [pc, #72]	; (800193c <CAN_ProcessWriteCommand+0x64>)
 80018f4:	781b      	ldrb	r3, [r3, #0]
 80018f6:	429a      	cmp	r2, r3
 80018f8:	d113      	bne.n	8001922 <CAN_ProcessWriteCommand+0x4a>
		{
			CAN_AcknowledgeWriteMessage(WriteMessage[i].Write_RegID);
 80018fa:	490f      	ldr	r1, [pc, #60]	; (8001938 <CAN_ProcessWriteCommand+0x60>)
 80018fc:	687a      	ldr	r2, [r7, #4]
 80018fe:	0013      	movs	r3, r2
 8001900:	005b      	lsls	r3, r3, #1
 8001902:	189b      	adds	r3, r3, r2
 8001904:	00db      	lsls	r3, r3, #3
 8001906:	5c5b      	ldrb	r3, [r3, r1]
 8001908:	0018      	movs	r0, r3
 800190a:	f000 f819 	bl	8001940 <CAN_AcknowledgeWriteMessage>
			WriteMessage[i].Write_ReactionHandler();
 800190e:	490a      	ldr	r1, [pc, #40]	; (8001938 <CAN_ProcessWriteCommand+0x60>)
 8001910:	687a      	ldr	r2, [r7, #4]
 8001912:	0013      	movs	r3, r2
 8001914:	005b      	lsls	r3, r3, #1
 8001916:	189b      	adds	r3, r3, r2
 8001918:	00db      	lsls	r3, r3, #3
 800191a:	18cb      	adds	r3, r1, r3
 800191c:	3304      	adds	r3, #4
 800191e:	681b      	ldr	r3, [r3, #0]
 8001920:	4798      	blx	r3
	for (int i = FIRST_ARRAY_ELEMENT; i < NUMBER_OF_WRITE_REGS; i++)
 8001922:	687b      	ldr	r3, [r7, #4]
 8001924:	3301      	adds	r3, #1
 8001926:	607b      	str	r3, [r7, #4]
 8001928:	687b      	ldr	r3, [r7, #4]
 800192a:	2b01      	cmp	r3, #1
 800192c:	d9da      	bls.n	80018e4 <CAN_ProcessWriteCommand+0xc>
		}
	}
}
 800192e:	46c0      	nop			; (mov r8, r8)
 8001930:	46c0      	nop			; (mov r8, r8)
 8001932:	46bd      	mov	sp, r7
 8001934:	b002      	add	sp, #8
 8001936:	bd80      	pop	{r7, pc}
 8001938:	20000020 	.word	0x20000020
 800193c:	20000144 	.word	0x20000144

08001940 <CAN_AcknowledgeWriteMessage>:
 * @param WriteReqID ID of received write instruction
 *
 * @retval None.
 **/
void CAN_AcknowledgeWriteMessage(WriteRegsID WriteReqID)
{
 8001940:	b580      	push	{r7, lr}
 8001942:	b082      	sub	sp, #8
 8001944:	af00      	add	r7, sp, #0
 8001946:	0002      	movs	r2, r0
 8001948:	1dfb      	adds	r3, r7, #7
 800194a:	701a      	strb	r2, [r3, #0]
	TxData[AcknowledgmentMessage_reg] = Write_AcknowledgmentMessage; // 1st Data Byte: Standard Write Acknowledgment instruction
 800194c:	4b08      	ldr	r3, [pc, #32]	; (8001970 <CAN_AcknowledgeWriteMessage+0x30>)
 800194e:	225d      	movs	r2, #93	; 0x5d
 8001950:	701a      	strb	r2, [r3, #0]
	TxData[WriteRegID] = WriteReqID;                                 // 2nd Data Byte: Acknowledged Received Write Command ReqID
 8001952:	4b07      	ldr	r3, [pc, #28]	; (8001970 <CAN_AcknowledgeWriteMessage+0x30>)
 8001954:	1dfa      	adds	r2, r7, #7
 8001956:	7812      	ldrb	r2, [r2, #0]
 8001958:	705a      	strb	r2, [r3, #1]
	CAN_Transmit(&TxHeader, ACKNOWLEDMENT_DLC, TxData, &TxMailbox);  // Transmit Data
 800195a:	4b06      	ldr	r3, [pc, #24]	; (8001974 <CAN_AcknowledgeWriteMessage+0x34>)
 800195c:	4a04      	ldr	r2, [pc, #16]	; (8001970 <CAN_AcknowledgeWriteMessage+0x30>)
 800195e:	4806      	ldr	r0, [pc, #24]	; (8001978 <CAN_AcknowledgeWriteMessage+0x38>)
 8001960:	2102      	movs	r1, #2
 8001962:	f7ff ff75 	bl	8001850 <CAN_Transmit>
}
 8001966:	46c0      	nop			; (mov r8, r8)
 8001968:	46bd      	mov	sp, r7
 800196a:	b002      	add	sp, #8
 800196c:	bd80      	pop	{r7, pc}
 800196e:	46c0      	nop			; (mov r8, r8)
 8001970:	2000013c 	.word	0x2000013c
 8001974:	2000014c 	.word	0x2000014c
 8001978:	20000108 	.word	0x20000108

0800197c <CAN_ReportError>:
 * @param ErrorID ID of reported Error Register]
 * 
 * @retval None.
 **/
void CAN_ReportError(ErrorRegsID ErrorID) //tego uzywam np. w IMD_Check
{
 800197c:	b580      	push	{r7, lr}
 800197e:	b082      	sub	sp, #8
 8001980:	af00      	add	r7, sp, #0
 8001982:	0002      	movs	r2, r0
 8001984:	1dfb      	adds	r3, r7, #7
 8001986:	701a      	strb	r2, [r3, #0]
	TxData[ErrorMessage_reg] = Error_ReportMessage;             // 1st Data Byte: Standard Error Report instruction 
 8001988:	4b08      	ldr	r3, [pc, #32]	; (80019ac <CAN_ReportError+0x30>)
 800198a:	221d      	movs	r2, #29
 800198c:	701a      	strb	r2, [r3, #0]
	TxData[ErrorRegID] = ErrorID;                            // 2nd Data Byte: Reported Error ID
 800198e:	4b07      	ldr	r3, [pc, #28]	; (80019ac <CAN_ReportError+0x30>)
 8001990:	1dfa      	adds	r2, r7, #7
 8001992:	7812      	ldrb	r2, [r2, #0]
 8001994:	705a      	strb	r2, [r3, #1]
	CAN_Transmit(&TxHeader, ERROR_DLC, TxData, &TxMailbox); // Transmit Data
 8001996:	4b06      	ldr	r3, [pc, #24]	; (80019b0 <CAN_ReportError+0x34>)
 8001998:	4a04      	ldr	r2, [pc, #16]	; (80019ac <CAN_ReportError+0x30>)
 800199a:	4806      	ldr	r0, [pc, #24]	; (80019b4 <CAN_ReportError+0x38>)
 800199c:	2102      	movs	r1, #2
 800199e:	f7ff ff57 	bl	8001850 <CAN_Transmit>
}
 80019a2:	46c0      	nop			; (mov r8, r8)
 80019a4:	46bd      	mov	sp, r7
 80019a6:	b002      	add	sp, #8
 80019a8:	bd80      	pop	{r7, pc}
 80019aa:	46c0      	nop			; (mov r8, r8)
 80019ac:	2000013c 	.word	0x2000013c
 80019b0:	2000014c 	.word	0x2000014c
 80019b4:	20000108 	.word	0x20000108

080019b8 <CANBUS_Error_Handler>:
 * @brief General error handler of CAN connection and communication
 * 
 * @retval None.
 * */
void CANBUS_Error_Handler(void)
{
 80019b8:	b580      	push	{r7, lr}
 80019ba:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80019bc:	b672      	cpsid	i
}
 80019be:	46c0      	nop			; (mov r8, r8)
	__disable_irq();
	/*
	Put here behaviour of ECU when error will be occured.
	*/
}
 80019c0:	46c0      	nop			; (mov r8, r8)
 80019c2:	46bd      	mov	sp, r7
 80019c4:	bd80      	pop	{r7, pc}
	...

080019c8 <ReadAIRsAmperageHandler>:
 * @brief Handler which reads and sends actual average value of AIRs amperage
 *
 * @retval None
 **/
void ReadAIRsAmperageHandler(void)
{
 80019c8:	b580      	push	{r7, lr}
 80019ca:	af00      	add	r7, sp, #0
	AIRs_Current_Measurment();
 80019cc:	f000 f994 	bl	8001cf8 <AIRs_Current_Measurment>

	TxData[ResponseRegID] = ResponseMessage[0].Response_RegID;             		  		// Response ID
 80019d0:	4b0b      	ldr	r3, [pc, #44]	; (8001a00 <ReadAIRsAmperageHandler+0x38>)
 80019d2:	785a      	ldrb	r2, [r3, #1]
 80019d4:	4b0b      	ldr	r3, [pc, #44]	; (8001a04 <ReadAIRsAmperageHandler+0x3c>)
 80019d6:	701a      	strb	r2, [r3, #0]
	TxData[ResponseData1] = *( ResponseMessage[0].Response_Data1 );                		// AIR_P current value AVG LSB
 80019d8:	4b09      	ldr	r3, [pc, #36]	; (8001a00 <ReadAIRsAmperageHandler+0x38>)
 80019da:	689b      	ldr	r3, [r3, #8]
 80019dc:	781a      	ldrb	r2, [r3, #0]
 80019de:	4b09      	ldr	r3, [pc, #36]	; (8001a04 <ReadAIRsAmperageHandler+0x3c>)
 80019e0:	705a      	strb	r2, [r3, #1]
	TxData[ResponseData2] = *( ResponseMessage[0].Response_Data2 ); 					// AIR_N current value AVG MSB
 80019e2:	4b07      	ldr	r3, [pc, #28]	; (8001a00 <ReadAIRsAmperageHandler+0x38>)
 80019e4:	68db      	ldr	r3, [r3, #12]
 80019e6:	781a      	ldrb	r2, [r3, #0]
 80019e8:	4b06      	ldr	r3, [pc, #24]	; (8001a04 <ReadAIRsAmperageHandler+0x3c>)
 80019ea:	709a      	strb	r2, [r3, #2]
	CAN_Transmit(&TxHeader, ResponseMessage[0].Response_DLC, TxData, &TxMailbox); 		// Transmit Data
 80019ec:	4b04      	ldr	r3, [pc, #16]	; (8001a00 <ReadAIRsAmperageHandler+0x38>)
 80019ee:	7819      	ldrb	r1, [r3, #0]
 80019f0:	4b05      	ldr	r3, [pc, #20]	; (8001a08 <ReadAIRsAmperageHandler+0x40>)
 80019f2:	4a04      	ldr	r2, [pc, #16]	; (8001a04 <ReadAIRsAmperageHandler+0x3c>)
 80019f4:	4805      	ldr	r0, [pc, #20]	; (8001a0c <ReadAIRsAmperageHandler+0x44>)
 80019f6:	f7ff ff2b 	bl	8001850 <CAN_Transmit>
}
 80019fa:	46c0      	nop			; (mov r8, r8)
 80019fc:	46bd      	mov	sp, r7
 80019fe:	bd80      	pop	{r7, pc}
 8001a00:	20000000 	.word	0x20000000
 8001a04:	2000013c 	.word	0x2000013c
 8001a08:	2000014c 	.word	0x2000014c
 8001a0c:	20000108 	.word	0x20000108

08001a10 <ReadInsulationResistanceValueHandler>:
 * @brief Handler which reads and sends actual frame insulation resistance value
 *
 * @retval None
 **/
void ReadInsulationResistanceValueHandler(void)
{
 8001a10:	b580      	push	{r7, lr}
 8001a12:	af00      	add	r7, sp, #0
	TxData[ResponseRegID] = ResponseMessage[1].Response_RegID;             		  		// Response ID
 8001a14:	4b0b      	ldr	r3, [pc, #44]	; (8001a44 <ReadInsulationResistanceValueHandler+0x34>)
 8001a16:	7c5a      	ldrb	r2, [r3, #17]
 8001a18:	4b0b      	ldr	r3, [pc, #44]	; (8001a48 <ReadInsulationResistanceValueHandler+0x38>)
 8001a1a:	701a      	strb	r2, [r3, #0]
	TxData[ResponseData1] = *( ResponseMessage[1].Response_Data1 );                    	// Insulation resistance LSB
 8001a1c:	4b09      	ldr	r3, [pc, #36]	; (8001a44 <ReadInsulationResistanceValueHandler+0x34>)
 8001a1e:	699b      	ldr	r3, [r3, #24]
 8001a20:	781a      	ldrb	r2, [r3, #0]
 8001a22:	4b09      	ldr	r3, [pc, #36]	; (8001a48 <ReadInsulationResistanceValueHandler+0x38>)
 8001a24:	705a      	strb	r2, [r3, #1]
	TxData[ResponseData2] = *( ResponseMessage[1].Response_Data2 ); 					// Insulation resistance MSB
 8001a26:	4b07      	ldr	r3, [pc, #28]	; (8001a44 <ReadInsulationResistanceValueHandler+0x34>)
 8001a28:	69db      	ldr	r3, [r3, #28]
 8001a2a:	781a      	ldrb	r2, [r3, #0]
 8001a2c:	4b06      	ldr	r3, [pc, #24]	; (8001a48 <ReadInsulationResistanceValueHandler+0x38>)
 8001a2e:	709a      	strb	r2, [r3, #2]
	CAN_Transmit(&TxHeader, ResponseMessage[1].Response_DLC, TxData, &TxMailbox); 		// Transmit Data
 8001a30:	4b04      	ldr	r3, [pc, #16]	; (8001a44 <ReadInsulationResistanceValueHandler+0x34>)
 8001a32:	7c19      	ldrb	r1, [r3, #16]
 8001a34:	4b05      	ldr	r3, [pc, #20]	; (8001a4c <ReadInsulationResistanceValueHandler+0x3c>)
 8001a36:	4a04      	ldr	r2, [pc, #16]	; (8001a48 <ReadInsulationResistanceValueHandler+0x38>)
 8001a38:	4805      	ldr	r0, [pc, #20]	; (8001a50 <ReadInsulationResistanceValueHandler+0x40>)
 8001a3a:	f7ff ff09 	bl	8001850 <CAN_Transmit>
}
 8001a3e:	46c0      	nop			; (mov r8, r8)
 8001a40:	46bd      	mov	sp, r7
 8001a42:	bd80      	pop	{r7, pc}
 8001a44:	20000000 	.word	0x20000000
 8001a48:	2000013c 	.word	0x2000013c
 8001a4c:	2000014c 	.word	0x2000014c
 8001a50:	20000108 	.word	0x20000108

08001a54 <WriteTractiveSystemStateHandler>:
 * @brief Handler which turns ON/OFF tractive system
 *
 * @retval None
 **/
void WriteTractiveSystemStateHandler(void)
{
 8001a54:	b580      	push	{r7, lr}
 8001a56:	af00      	add	r7, sp, #0
	*( WriteMessage[0].Write_State1 ) = RxData[WriteData1];
 8001a58:	4b0a      	ldr	r3, [pc, #40]	; (8001a84 <WriteTractiveSystemStateHandler+0x30>)
 8001a5a:	785a      	ldrb	r2, [r3, #1]
 8001a5c:	4b0a      	ldr	r3, [pc, #40]	; (8001a88 <WriteTractiveSystemStateHandler+0x34>)
 8001a5e:	689b      	ldr	r3, [r3, #8]
 8001a60:	1e51      	subs	r1, r2, #1
 8001a62:	418a      	sbcs	r2, r1
 8001a64:	b2d2      	uxtb	r2, r2
 8001a66:	701a      	strb	r2, [r3, #0]
	HAL_GPIO_WritePin(AIRs_CONTROL_uC_GPIO_Port, AIRs_CONTROL_uC_Pin, *( WriteMessage[0].Write_State1 ));
 8001a68:	4b07      	ldr	r3, [pc, #28]	; (8001a88 <WriteTractiveSystemStateHandler+0x34>)
 8001a6a:	689b      	ldr	r3, [r3, #8]
 8001a6c:	781b      	ldrb	r3, [r3, #0]
 8001a6e:	001a      	movs	r2, r3
 8001a70:	2380      	movs	r3, #128	; 0x80
 8001a72:	00db      	lsls	r3, r3, #3
 8001a74:	4805      	ldr	r0, [pc, #20]	; (8001a8c <WriteTractiveSystemStateHandler+0x38>)
 8001a76:	0019      	movs	r1, r3
 8001a78:	f002 f97f 	bl	8003d7a <HAL_GPIO_WritePin>
}
 8001a7c:	46c0      	nop			; (mov r8, r8)
 8001a7e:	46bd      	mov	sp, r7
 8001a80:	bd80      	pop	{r7, pc}
 8001a82:	46c0      	nop			; (mov r8, r8)
 8001a84:	20000144 	.word	0x20000144
 8001a88:	20000020 	.word	0x20000020
 8001a8c:	48000400 	.word	0x48000400

08001a90 <WriteMainStatusHandler>:
 * @brief Handler which update MAIN status to monitor whether its alive or not
 *
 * @retval None
 **/
void WriteMainStatusHandler(void)
{
 8001a90:	b580      	push	{r7, lr}
 8001a92:	af00      	add	r7, sp, #0
	*( WriteMessage[1].Write_State1 ) = RxData[WriteData1];
 8001a94:	4b05      	ldr	r3, [pc, #20]	; (8001aac <WriteMainStatusHandler+0x1c>)
 8001a96:	785a      	ldrb	r2, [r3, #1]
 8001a98:	4b05      	ldr	r3, [pc, #20]	; (8001ab0 <WriteMainStatusHandler+0x20>)
 8001a9a:	6a1b      	ldr	r3, [r3, #32]
 8001a9c:	1e51      	subs	r1, r2, #1
 8001a9e:	418a      	sbcs	r2, r1
 8001aa0:	b2d2      	uxtb	r2, r2
 8001aa2:	701a      	strb	r2, [r3, #0]
}
 8001aa4:	46c0      	nop			; (mov r8, r8)
 8001aa6:	46bd      	mov	sp, r7
 8001aa8:	bd80      	pop	{r7, pc}
 8001aaa:	46c0      	nop			; (mov r8, r8)
 8001aac:	20000144 	.word	0x20000144
 8001ab0:	20000020 	.word	0x20000020

08001ab4 <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 8001ab4:	b590      	push	{r4, r7, lr}
 8001ab6:	b08b      	sub	sp, #44	; 0x2c
 8001ab8:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001aba:	2414      	movs	r4, #20
 8001abc:	193b      	adds	r3, r7, r4
 8001abe:	0018      	movs	r0, r3
 8001ac0:	2314      	movs	r3, #20
 8001ac2:	001a      	movs	r2, r3
 8001ac4:	2100      	movs	r1, #0
 8001ac6:	f004 f95d 	bl	8005d84 <memset>

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8001aca:	4b40      	ldr	r3, [pc, #256]	; (8001bcc <MX_GPIO_Init+0x118>)
 8001acc:	695a      	ldr	r2, [r3, #20]
 8001ace:	4b3f      	ldr	r3, [pc, #252]	; (8001bcc <MX_GPIO_Init+0x118>)
 8001ad0:	2180      	movs	r1, #128	; 0x80
 8001ad2:	0309      	lsls	r1, r1, #12
 8001ad4:	430a      	orrs	r2, r1
 8001ad6:	615a      	str	r2, [r3, #20]
 8001ad8:	4b3c      	ldr	r3, [pc, #240]	; (8001bcc <MX_GPIO_Init+0x118>)
 8001ada:	695a      	ldr	r2, [r3, #20]
 8001adc:	2380      	movs	r3, #128	; 0x80
 8001ade:	031b      	lsls	r3, r3, #12
 8001ae0:	4013      	ands	r3, r2
 8001ae2:	613b      	str	r3, [r7, #16]
 8001ae4:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 8001ae6:	4b39      	ldr	r3, [pc, #228]	; (8001bcc <MX_GPIO_Init+0x118>)
 8001ae8:	695a      	ldr	r2, [r3, #20]
 8001aea:	4b38      	ldr	r3, [pc, #224]	; (8001bcc <MX_GPIO_Init+0x118>)
 8001aec:	2180      	movs	r1, #128	; 0x80
 8001aee:	03c9      	lsls	r1, r1, #15
 8001af0:	430a      	orrs	r2, r1
 8001af2:	615a      	str	r2, [r3, #20]
 8001af4:	4b35      	ldr	r3, [pc, #212]	; (8001bcc <MX_GPIO_Init+0x118>)
 8001af6:	695a      	ldr	r2, [r3, #20]
 8001af8:	2380      	movs	r3, #128	; 0x80
 8001afa:	03db      	lsls	r3, r3, #15
 8001afc:	4013      	ands	r3, r2
 8001afe:	60fb      	str	r3, [r7, #12]
 8001b00:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8001b02:	4b32      	ldr	r3, [pc, #200]	; (8001bcc <MX_GPIO_Init+0x118>)
 8001b04:	695a      	ldr	r2, [r3, #20]
 8001b06:	4b31      	ldr	r3, [pc, #196]	; (8001bcc <MX_GPIO_Init+0x118>)
 8001b08:	2180      	movs	r1, #128	; 0x80
 8001b0a:	0289      	lsls	r1, r1, #10
 8001b0c:	430a      	orrs	r2, r1
 8001b0e:	615a      	str	r2, [r3, #20]
 8001b10:	4b2e      	ldr	r3, [pc, #184]	; (8001bcc <MX_GPIO_Init+0x118>)
 8001b12:	695a      	ldr	r2, [r3, #20]
 8001b14:	2380      	movs	r3, #128	; 0x80
 8001b16:	029b      	lsls	r3, r3, #10
 8001b18:	4013      	ands	r3, r2
 8001b1a:	60bb      	str	r3, [r7, #8]
 8001b1c:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8001b1e:	4b2b      	ldr	r3, [pc, #172]	; (8001bcc <MX_GPIO_Init+0x118>)
 8001b20:	695a      	ldr	r2, [r3, #20]
 8001b22:	4b2a      	ldr	r3, [pc, #168]	; (8001bcc <MX_GPIO_Init+0x118>)
 8001b24:	2180      	movs	r1, #128	; 0x80
 8001b26:	02c9      	lsls	r1, r1, #11
 8001b28:	430a      	orrs	r2, r1
 8001b2a:	615a      	str	r2, [r3, #20]
 8001b2c:	4b27      	ldr	r3, [pc, #156]	; (8001bcc <MX_GPIO_Init+0x118>)
 8001b2e:	695a      	ldr	r2, [r3, #20]
 8001b30:	2380      	movs	r3, #128	; 0x80
 8001b32:	02db      	lsls	r3, r3, #11
 8001b34:	4013      	ands	r3, r2
 8001b36:	607b      	str	r3, [r7, #4]
 8001b38:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, LED_RED_Pin|LED_GREEN_Pin, GPIO_PIN_RESET);
 8001b3a:	2390      	movs	r3, #144	; 0x90
 8001b3c:	05db      	lsls	r3, r3, #23
 8001b3e:	2200      	movs	r2, #0
 8001b40:	2118      	movs	r1, #24
 8001b42:	0018      	movs	r0, r3
 8001b44:	f002 f919 	bl	8003d7a <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(AIR_N_STATUS_uC_GPIO_Port, AIR_N_STATUS_uC_Pin, GPIO_PIN_RESET);
 8001b48:	2380      	movs	r3, #128	; 0x80
 8001b4a:	011b      	lsls	r3, r3, #4
 8001b4c:	4820      	ldr	r0, [pc, #128]	; (8001bd0 <MX_GPIO_Init+0x11c>)
 8001b4e:	2200      	movs	r2, #0
 8001b50:	0019      	movs	r1, r3
 8001b52:	f002 f912 	bl	8003d7a <HAL_GPIO_WritePin>

  /*Configure GPIO pins : PAPin PAPin */
  GPIO_InitStruct.Pin = LED_RED_Pin|LED_GREEN_Pin;
 8001b56:	193b      	adds	r3, r7, r4
 8001b58:	2218      	movs	r2, #24
 8001b5a:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001b5c:	193b      	adds	r3, r7, r4
 8001b5e:	2201      	movs	r2, #1
 8001b60:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001b62:	193b      	adds	r3, r7, r4
 8001b64:	2200      	movs	r2, #0
 8001b66:	609a      	str	r2, [r3, #8]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001b68:	193b      	adds	r3, r7, r4
 8001b6a:	2200      	movs	r2, #0
 8001b6c:	60da      	str	r2, [r3, #12]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001b6e:	193a      	adds	r2, r7, r4
 8001b70:	2390      	movs	r3, #144	; 0x90
 8001b72:	05db      	lsls	r3, r3, #23
 8001b74:	0011      	movs	r1, r2
 8001b76:	0018      	movs	r0, r3
 8001b78:	f001 ff7a 	bl	8003a70 <HAL_GPIO_Init>

  /*Configure GPIO pins : PBPin PBPin */
  GPIO_InitStruct.Pin = AIR_P_STATUS_uC_Pin|AIRs_CONTROL_uC_Pin;
 8001b7c:	193b      	adds	r3, r7, r4
 8001b7e:	4a15      	ldr	r2, [pc, #84]	; (8001bd4 <MX_GPIO_Init+0x120>)
 8001b80:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001b82:	193b      	adds	r3, r7, r4
 8001b84:	2200      	movs	r2, #0
 8001b86:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001b88:	193b      	adds	r3, r7, r4
 8001b8a:	2200      	movs	r2, #0
 8001b8c:	609a      	str	r2, [r3, #8]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001b8e:	193b      	adds	r3, r7, r4
 8001b90:	4a0f      	ldr	r2, [pc, #60]	; (8001bd0 <MX_GPIO_Init+0x11c>)
 8001b92:	0019      	movs	r1, r3
 8001b94:	0010      	movs	r0, r2
 8001b96:	f001 ff6b 	bl	8003a70 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = AIR_N_STATUS_uC_Pin;
 8001b9a:	0021      	movs	r1, r4
 8001b9c:	187b      	adds	r3, r7, r1
 8001b9e:	2280      	movs	r2, #128	; 0x80
 8001ba0:	0112      	lsls	r2, r2, #4
 8001ba2:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001ba4:	187b      	adds	r3, r7, r1
 8001ba6:	2201      	movs	r2, #1
 8001ba8:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001baa:	187b      	adds	r3, r7, r1
 8001bac:	2200      	movs	r2, #0
 8001bae:	609a      	str	r2, [r3, #8]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001bb0:	187b      	adds	r3, r7, r1
 8001bb2:	2200      	movs	r2, #0
 8001bb4:	60da      	str	r2, [r3, #12]
  HAL_GPIO_Init(AIR_N_STATUS_uC_GPIO_Port, &GPIO_InitStruct);
 8001bb6:	187b      	adds	r3, r7, r1
 8001bb8:	4a05      	ldr	r2, [pc, #20]	; (8001bd0 <MX_GPIO_Init+0x11c>)
 8001bba:	0019      	movs	r1, r3
 8001bbc:	0010      	movs	r0, r2
 8001bbe:	f001 ff57 	bl	8003a70 <HAL_GPIO_Init>

}
 8001bc2:	46c0      	nop			; (mov r8, r8)
 8001bc4:	46bd      	mov	sp, r7
 8001bc6:	b00b      	add	sp, #44	; 0x2c
 8001bc8:	bd90      	pop	{r4, r7, pc}
 8001bca:	46c0      	nop			; (mov r8, r8)
 8001bcc:	40021000 	.word	0x40021000
 8001bd0:	48000400 	.word	0x48000400
 8001bd4:	00000404 	.word	0x00000404

08001bd8 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8001bd8:	b580      	push	{r7, lr}
 8001bda:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8001bdc:	f000 fbca 	bl	8002374 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8001be0:	f000 f830 	bl	8001c44 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8001be4:	f7ff ff66 	bl	8001ab4 <MX_GPIO_Init>
  MX_CAN_Init();
 8001be8:	f7ff fd0c 	bl	8001604 <MX_CAN_Init>
  MX_ADC_Init();
 8001bec:	f7ff fc5c 	bl	80014a8 <MX_ADC_Init>
  MX_USART1_UART_Init();
 8001bf0:	f000 fb00 	bl	80021f4 <MX_USART1_UART_Init>
  MX_TIM2_Init();
 8001bf4:	f000 fa26 	bl	8002044 <MX_TIM2_Init>
  /* USER CODE BEGIN 2 */
  CAN_Init();
 8001bf8:	f7ff fd92 	bl	8001720 <CAN_Init>

	/*PWM input capture */
	HAL_TIM_IC_Start_IT(&htim2, TIM_CHANNEL_1); //main channel
 8001bfc:	4b0e      	ldr	r3, [pc, #56]	; (8001c38 <main+0x60>)
 8001bfe:	2100      	movs	r1, #0
 8001c00:	0018      	movs	r0, r3
 8001c02:	f002 ffc9 	bl	8004b98 <HAL_TIM_IC_Start_IT>
	HAL_TIM_IC_Start(&htim2, TIM_CHANNEL_2); //indirect channel
 8001c06:	4b0c      	ldr	r3, [pc, #48]	; (8001c38 <main+0x60>)
 8001c08:	2104      	movs	r1, #4
 8001c0a:	0018      	movs	r0, r3
 8001c0c:	f002 ff04 	bl	8004a18 <HAL_TIM_IC_Start>
	/*PWM input capture */

	Timer_MAIN = HAL_GetTick();
 8001c10:	f000 fc0a 	bl	8002428 <HAL_GetTick>
 8001c14:	0002      	movs	r2, r0
 8001c16:	4b09      	ldr	r3, [pc, #36]	; (8001c3c <main+0x64>)
 8001c18:	601a      	str	r2, [r3, #0]

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
	while (1)
	{
		if (( HAL_GetTick() - Timer_MAIN ) > MAIN_TIMEOUT)
 8001c1a:	f000 fc05 	bl	8002428 <HAL_GetTick>
 8001c1e:	0002      	movs	r2, r0
 8001c20:	4b06      	ldr	r3, [pc, #24]	; (8001c3c <main+0x64>)
 8001c22:	681b      	ldr	r3, [r3, #0]
 8001c24:	1ad3      	subs	r3, r2, r3
 8001c26:	4a06      	ldr	r2, [pc, #24]	; (8001c40 <main+0x68>)
 8001c28:	4293      	cmp	r3, r2
 8001c2a:	d901      	bls.n	8001c30 <main+0x58>
		{
			MAIN_Status_Check();
 8001c2c:	f000 f970 	bl	8001f10 <MAIN_Status_Check>
		}
		AIRs_Check();
 8001c30:	f000 f902 	bl	8001e38 <AIRs_Check>
		if (( HAL_GetTick() - Timer_MAIN ) > MAIN_TIMEOUT)
 8001c34:	e7f1      	b.n	8001c1a <main+0x42>
 8001c36:	46c0      	nop			; (mov r8, r8)
 8001c38:	20000164 	.word	0x20000164
 8001c3c:	20000160 	.word	0x20000160
 8001c40:	00001388 	.word	0x00001388

08001c44 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8001c44:	b590      	push	{r4, r7, lr}
 8001c46:	b099      	sub	sp, #100	; 0x64
 8001c48:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8001c4a:	242c      	movs	r4, #44	; 0x2c
 8001c4c:	193b      	adds	r3, r7, r4
 8001c4e:	0018      	movs	r0, r3
 8001c50:	2334      	movs	r3, #52	; 0x34
 8001c52:	001a      	movs	r2, r3
 8001c54:	2100      	movs	r1, #0
 8001c56:	f004 f895 	bl	8005d84 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8001c5a:	231c      	movs	r3, #28
 8001c5c:	18fb      	adds	r3, r7, r3
 8001c5e:	0018      	movs	r0, r3
 8001c60:	2310      	movs	r3, #16
 8001c62:	001a      	movs	r2, r3
 8001c64:	2100      	movs	r1, #0
 8001c66:	f004 f88d 	bl	8005d84 <memset>
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8001c6a:	1d3b      	adds	r3, r7, #4
 8001c6c:	0018      	movs	r0, r3
 8001c6e:	2318      	movs	r3, #24
 8001c70:	001a      	movs	r2, r3
 8001c72:	2100      	movs	r1, #0
 8001c74:	f004 f886 	bl	8005d84 <memset>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI14|RCC_OSCILLATORTYPE_HSE;
 8001c78:	0021      	movs	r1, r4
 8001c7a:	187b      	adds	r3, r7, r1
 8001c7c:	2211      	movs	r2, #17
 8001c7e:	601a      	str	r2, [r3, #0]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8001c80:	187b      	adds	r3, r7, r1
 8001c82:	2201      	movs	r2, #1
 8001c84:	605a      	str	r2, [r3, #4]
  RCC_OscInitStruct.HSI14State = RCC_HSI14_ON;
 8001c86:	187b      	adds	r3, r7, r1
 8001c88:	2201      	movs	r2, #1
 8001c8a:	615a      	str	r2, [r3, #20]
  RCC_OscInitStruct.HSI14CalibrationValue = 16;
 8001c8c:	187b      	adds	r3, r7, r1
 8001c8e:	2210      	movs	r2, #16
 8001c90:	619a      	str	r2, [r3, #24]
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 8001c92:	187b      	adds	r3, r7, r1
 8001c94:	2200      	movs	r2, #0
 8001c96:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8001c98:	187b      	adds	r3, r7, r1
 8001c9a:	0018      	movs	r0, r3
 8001c9c:	f002 f88a 	bl	8003db4 <HAL_RCC_OscConfig>
 8001ca0:	1e03      	subs	r3, r0, #0
 8001ca2:	d001      	beq.n	8001ca8 <SystemClock_Config+0x64>
  {
    Error_Handler();
 8001ca4:	f000 f97a 	bl	8001f9c <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8001ca8:	211c      	movs	r1, #28
 8001caa:	187b      	adds	r3, r7, r1
 8001cac:	2207      	movs	r2, #7
 8001cae:	601a      	str	r2, [r3, #0]
                              |RCC_CLOCKTYPE_PCLK1;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSE;
 8001cb0:	187b      	adds	r3, r7, r1
 8001cb2:	2201      	movs	r2, #1
 8001cb4:	605a      	str	r2, [r3, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8001cb6:	187b      	adds	r3, r7, r1
 8001cb8:	2200      	movs	r2, #0
 8001cba:	609a      	str	r2, [r3, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8001cbc:	187b      	adds	r3, r7, r1
 8001cbe:	2200      	movs	r2, #0
 8001cc0:	60da      	str	r2, [r3, #12]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 8001cc2:	187b      	adds	r3, r7, r1
 8001cc4:	2100      	movs	r1, #0
 8001cc6:	0018      	movs	r0, r3
 8001cc8:	f002 fbfa 	bl	80044c0 <HAL_RCC_ClockConfig>
 8001ccc:	1e03      	subs	r3, r0, #0
 8001cce:	d001      	beq.n	8001cd4 <SystemClock_Config+0x90>
  {
    Error_Handler();
 8001cd0:	f000 f964 	bl	8001f9c <Error_Handler>
  }
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART1;
 8001cd4:	1d3b      	adds	r3, r7, #4
 8001cd6:	2201      	movs	r2, #1
 8001cd8:	601a      	str	r2, [r3, #0]
  PeriphClkInit.Usart1ClockSelection = RCC_USART1CLKSOURCE_PCLK1;
 8001cda:	1d3b      	adds	r3, r7, #4
 8001cdc:	2200      	movs	r2, #0
 8001cde:	609a      	str	r2, [r3, #8]
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8001ce0:	1d3b      	adds	r3, r7, #4
 8001ce2:	0018      	movs	r0, r3
 8001ce4:	f002 fd5a 	bl	800479c <HAL_RCCEx_PeriphCLKConfig>
 8001ce8:	1e03      	subs	r3, r0, #0
 8001cea:	d001      	beq.n	8001cf0 <SystemClock_Config+0xac>
  {
    Error_Handler();
 8001cec:	f000 f956 	bl	8001f9c <Error_Handler>
  }
}
 8001cf0:	46c0      	nop			; (mov r8, r8)
 8001cf2:	46bd      	mov	sp, r7
 8001cf4:	b019      	add	sp, #100	; 0x64
 8001cf6:	bd90      	pop	{r4, r7, pc}

08001cf8 <AIRs_Current_Measurment>:
 * and calculate their average value
 *
 * @retval None.
 **/
void AIRs_Current_Measurment(void)
{
 8001cf8:	b580      	push	{r7, lr}
 8001cfa:	af00      	add	r7, sp, #0
	/* AIRs current measurement and check BEGIN */
	Set_ADC_Channel(ADC_CHANNEL_8); //Switch to channel 8
 8001cfc:	2008      	movs	r0, #8
 8001cfe:	f000 f925 	bl	8001f4c <Set_ADC_Channel>
	HAL_ADC_Start(&hadc); //start conversion
 8001d02:	4b46      	ldr	r3, [pc, #280]	; (8001e1c <AIRs_Current_Measurment+0x124>)
 8001d04:	0018      	movs	r0, r3
 8001d06:	f000 fcd9 	bl	80026bc <HAL_ADC_Start>

	if (HAL_ADC_PollForConversion(&hadc, 1000) == HAL_OK)
 8001d0a:	23fa      	movs	r3, #250	; 0xfa
 8001d0c:	009a      	lsls	r2, r3, #2
 8001d0e:	4b43      	ldr	r3, [pc, #268]	; (8001e1c <AIRs_Current_Measurment+0x124>)
 8001d10:	0011      	movs	r1, r2
 8001d12:	0018      	movs	r0, r3
 8001d14:	f000 fd26 	bl	8002764 <HAL_ADC_PollForConversion>
 8001d18:	1e03      	subs	r3, r0, #0
 8001d1a:	d107      	bne.n	8001d2c <AIRs_Current_Measurment+0x34>
	{
		AIR_N_Current = HAL_ADC_GetValue(&hadc); // Read AIR_P current value
 8001d1c:	4b3f      	ldr	r3, [pc, #252]	; (8001e1c <AIRs_Current_Measurment+0x124>)
 8001d1e:	0018      	movs	r0, r3
 8001d20:	f000 fdb8 	bl	8002894 <HAL_ADC_GetValue>
 8001d24:	0003      	movs	r3, r0
 8001d26:	b29a      	uxth	r2, r3
 8001d28:	4b3d      	ldr	r3, [pc, #244]	; (8001e20 <AIRs_Current_Measurment+0x128>)
 8001d2a:	801a      	strh	r2, [r3, #0]
	}

	Set_ADC_Channel(ADC_CHANNEL_9); //Switch to channel 9
 8001d2c:	2009      	movs	r0, #9
 8001d2e:	f000 f90d 	bl	8001f4c <Set_ADC_Channel>
	HAL_ADC_Start(&hadc); //start conversion
 8001d32:	4b3a      	ldr	r3, [pc, #232]	; (8001e1c <AIRs_Current_Measurment+0x124>)
 8001d34:	0018      	movs	r0, r3
 8001d36:	f000 fcc1 	bl	80026bc <HAL_ADC_Start>

	if (HAL_ADC_PollForConversion(&hadc, 1000) == HAL_OK)
 8001d3a:	23fa      	movs	r3, #250	; 0xfa
 8001d3c:	009a      	lsls	r2, r3, #2
 8001d3e:	4b37      	ldr	r3, [pc, #220]	; (8001e1c <AIRs_Current_Measurment+0x124>)
 8001d40:	0011      	movs	r1, r2
 8001d42:	0018      	movs	r0, r3
 8001d44:	f000 fd0e 	bl	8002764 <HAL_ADC_PollForConversion>
 8001d48:	1e03      	subs	r3, r0, #0
 8001d4a:	d107      	bne.n	8001d5c <AIRs_Current_Measurment+0x64>
	{
		AIR_P_Current = HAL_ADC_GetValue(&hadc); // Read AIR_N current value
 8001d4c:	4b33      	ldr	r3, [pc, #204]	; (8001e1c <AIRs_Current_Measurment+0x124>)
 8001d4e:	0018      	movs	r0, r3
 8001d50:	f000 fda0 	bl	8002894 <HAL_ADC_GetValue>
 8001d54:	0003      	movs	r3, r0
 8001d56:	b29a      	uxth	r2, r3
 8001d58:	4b32      	ldr	r3, [pc, #200]	; (8001e24 <AIRs_Current_Measurment+0x12c>)
 8001d5a:	801a      	strh	r2, [r3, #0]
	}

	//Current calc V(I) = 0.0034 *I + 2.5 -> I = (V(I) - 2.5) / 0.0034, equation from datasheet
	AIR_P_Current = (uint16_t)( ( (float)( AIR_P_Current - 2.5 ) ) / 0.0034 );
 8001d5c:	4b31      	ldr	r3, [pc, #196]	; (8001e24 <AIRs_Current_Measurment+0x12c>)
 8001d5e:	881b      	ldrh	r3, [r3, #0]
 8001d60:	0018      	movs	r0, r3
 8001d62:	f7ff f939 	bl	8000fd8 <__aeabi_i2d>
 8001d66:	2200      	movs	r2, #0
 8001d68:	4b2f      	ldr	r3, [pc, #188]	; (8001e28 <AIRs_Current_Measurment+0x130>)
 8001d6a:	f7fe fd6d 	bl	8000848 <__aeabi_dsub>
 8001d6e:	0002      	movs	r2, r0
 8001d70:	000b      	movs	r3, r1
 8001d72:	0010      	movs	r0, r2
 8001d74:	0019      	movs	r1, r3
 8001d76:	f7ff f9a7 	bl	80010c8 <__aeabi_d2f>
 8001d7a:	1c03      	adds	r3, r0, #0
 8001d7c:	1c18      	adds	r0, r3, #0
 8001d7e:	f7ff f95b 	bl	8001038 <__aeabi_f2d>
 8001d82:	4a2a      	ldr	r2, [pc, #168]	; (8001e2c <AIRs_Current_Measurment+0x134>)
 8001d84:	4b2a      	ldr	r3, [pc, #168]	; (8001e30 <AIRs_Current_Measurment+0x138>)
 8001d86:	f7fe fa69 	bl	800025c <__aeabi_ddiv>
 8001d8a:	0002      	movs	r2, r0
 8001d8c:	000b      	movs	r3, r1
 8001d8e:	0010      	movs	r0, r2
 8001d90:	0019      	movs	r1, r3
 8001d92:	f7fe fa45 	bl	8000220 <__aeabi_d2uiz>
 8001d96:	0003      	movs	r3, r0
 8001d98:	b29a      	uxth	r2, r3
 8001d9a:	4b22      	ldr	r3, [pc, #136]	; (8001e24 <AIRs_Current_Measurment+0x12c>)
 8001d9c:	801a      	strh	r2, [r3, #0]
	AIR_N_Current = (uint16_t)( ( (float)( AIR_N_Current - 2.5 ) ) / 0.0034 );
 8001d9e:	4b20      	ldr	r3, [pc, #128]	; (8001e20 <AIRs_Current_Measurment+0x128>)
 8001da0:	881b      	ldrh	r3, [r3, #0]
 8001da2:	0018      	movs	r0, r3
 8001da4:	f7ff f918 	bl	8000fd8 <__aeabi_i2d>
 8001da8:	2200      	movs	r2, #0
 8001daa:	4b1f      	ldr	r3, [pc, #124]	; (8001e28 <AIRs_Current_Measurment+0x130>)
 8001dac:	f7fe fd4c 	bl	8000848 <__aeabi_dsub>
 8001db0:	0002      	movs	r2, r0
 8001db2:	000b      	movs	r3, r1
 8001db4:	0010      	movs	r0, r2
 8001db6:	0019      	movs	r1, r3
 8001db8:	f7ff f986 	bl	80010c8 <__aeabi_d2f>
 8001dbc:	1c03      	adds	r3, r0, #0
 8001dbe:	1c18      	adds	r0, r3, #0
 8001dc0:	f7ff f93a 	bl	8001038 <__aeabi_f2d>
 8001dc4:	4a19      	ldr	r2, [pc, #100]	; (8001e2c <AIRs_Current_Measurment+0x134>)
 8001dc6:	4b1a      	ldr	r3, [pc, #104]	; (8001e30 <AIRs_Current_Measurment+0x138>)
 8001dc8:	f7fe fa48 	bl	800025c <__aeabi_ddiv>
 8001dcc:	0002      	movs	r2, r0
 8001dce:	000b      	movs	r3, r1
 8001dd0:	0010      	movs	r0, r2
 8001dd2:	0019      	movs	r1, r3
 8001dd4:	f7fe fa24 	bl	8000220 <__aeabi_d2uiz>
 8001dd8:	0003      	movs	r3, r0
 8001dda:	b29a      	uxth	r2, r3
 8001ddc:	4b10      	ldr	r3, [pc, #64]	; (8001e20 <AIRs_Current_Measurment+0x128>)
 8001dde:	801a      	strh	r2, [r3, #0]
	Read_AIR_AVG[0] = ( ( AIR_P_Current + AIR_N_Current ) / 2 ); 		  //LSB
 8001de0:	4b10      	ldr	r3, [pc, #64]	; (8001e24 <AIRs_Current_Measurment+0x12c>)
 8001de2:	881b      	ldrh	r3, [r3, #0]
 8001de4:	001a      	movs	r2, r3
 8001de6:	4b0e      	ldr	r3, [pc, #56]	; (8001e20 <AIRs_Current_Measurment+0x128>)
 8001de8:	881b      	ldrh	r3, [r3, #0]
 8001dea:	18d3      	adds	r3, r2, r3
 8001dec:	2b00      	cmp	r3, #0
 8001dee:	da00      	bge.n	8001df2 <AIRs_Current_Measurment+0xfa>
 8001df0:	3301      	adds	r3, #1
 8001df2:	105b      	asrs	r3, r3, #1
 8001df4:	b2da      	uxtb	r2, r3
 8001df6:	4b0f      	ldr	r3, [pc, #60]	; (8001e34 <AIRs_Current_Measurment+0x13c>)
 8001df8:	701a      	strb	r2, [r3, #0]
	Read_AIR_AVG[1] = ( ( ( AIR_P_Current + AIR_N_Current ) / 2 ) >> 8 ); //MSB
 8001dfa:	4b0a      	ldr	r3, [pc, #40]	; (8001e24 <AIRs_Current_Measurment+0x12c>)
 8001dfc:	881b      	ldrh	r3, [r3, #0]
 8001dfe:	001a      	movs	r2, r3
 8001e00:	4b07      	ldr	r3, [pc, #28]	; (8001e20 <AIRs_Current_Measurment+0x128>)
 8001e02:	881b      	ldrh	r3, [r3, #0]
 8001e04:	18d3      	adds	r3, r2, r3
 8001e06:	2b00      	cmp	r3, #0
 8001e08:	da00      	bge.n	8001e0c <AIRs_Current_Measurment+0x114>
 8001e0a:	3301      	adds	r3, #1
 8001e0c:	105b      	asrs	r3, r3, #1
 8001e0e:	121b      	asrs	r3, r3, #8
 8001e10:	b2da      	uxtb	r2, r3
 8001e12:	4b08      	ldr	r3, [pc, #32]	; (8001e34 <AIRs_Current_Measurment+0x13c>)
 8001e14:	705a      	strb	r2, [r3, #1]
}
 8001e16:	46c0      	nop			; (mov r8, r8)
 8001e18:	46bd      	mov	sp, r7
 8001e1a:	bd80      	pop	{r7, pc}
 8001e1c:	20000078 	.word	0x20000078
 8001e20:	20000154 	.word	0x20000154
 8001e24:	20000152 	.word	0x20000152
 8001e28:	40040000 	.word	0x40040000
 8001e2c:	19ce075f 	.word	0x19ce075f
 8001e30:	3f6bda51 	.word	0x3f6bda51
 8001e34:	20000158 	.word	0x20000158

08001e38 <AIRs_Check>:
 * -not conducting current
 *
 * @retval None.
 **/
void AIRs_Check(void)
{
 8001e38:	b580      	push	{r7, lr}
 8001e3a:	af00      	add	r7, sp, #0
	AIRs_Current_Measurment();
 8001e3c:	f7ff ff5c 	bl	8001cf8 <AIRs_Current_Measurment>

	if (AIR_P_Current > MAX_CURRENT)
 8001e40:	4b2d      	ldr	r3, [pc, #180]	; (8001ef8 <AIRs_Check+0xc0>)
 8001e42:	881b      	ldrh	r3, [r3, #0]
 8001e44:	2b05      	cmp	r3, #5
 8001e46:	d902      	bls.n	8001e4e <AIRs_Check+0x16>
	{
		CAN_ReportError(Error_AIR_P_Overcurrent_ID);
 8001e48:	2001      	movs	r0, #1
 8001e4a:	f7ff fd97 	bl	800197c <CAN_ReportError>
	}
	if (AIR_N_Current > MAX_CURRENT)
 8001e4e:	4b2b      	ldr	r3, [pc, #172]	; (8001efc <AIRs_Check+0xc4>)
 8001e50:	881b      	ldrh	r3, [r3, #0]
 8001e52:	2b05      	cmp	r3, #5
 8001e54:	d902      	bls.n	8001e5c <AIRs_Check+0x24>
	{
		CAN_ReportError(Error_AIR_N_Overcurrent_ID);
 8001e56:	2002      	movs	r0, #2
 8001e58:	f7ff fd90 	bl	800197c <CAN_ReportError>
	}
	if (abs(AIR_P_Current - AIR_N_Current) > MAX_CURRENT_DIVERGENCE)
 8001e5c:	4b26      	ldr	r3, [pc, #152]	; (8001ef8 <AIRs_Check+0xc0>)
 8001e5e:	881b      	ldrh	r3, [r3, #0]
 8001e60:	001a      	movs	r2, r3
 8001e62:	4b26      	ldr	r3, [pc, #152]	; (8001efc <AIRs_Check+0xc4>)
 8001e64:	881b      	ldrh	r3, [r3, #0]
 8001e66:	1ad3      	subs	r3, r2, r3
 8001e68:	17da      	asrs	r2, r3, #31
 8001e6a:	189b      	adds	r3, r3, r2
 8001e6c:	4053      	eors	r3, r2
 8001e6e:	2b00      	cmp	r3, #0
 8001e70:	dd02      	ble.n	8001e78 <AIRs_Check+0x40>
	{
		CAN_ReportError(Error_AIRs_Current_Divergence_ID);
 8001e72:	200c      	movs	r0, #12
 8001e74:	f7ff fd82 	bl	800197c <CAN_ReportError>
	}

	Write_AIRs_Control = HAL_GPIO_ReadPin(AIRs_CONTROL_uC_GPIO_Port, AIRs_CONTROL_uC_Pin); //AIR_N turned on/off
 8001e78:	2380      	movs	r3, #128	; 0x80
 8001e7a:	00db      	lsls	r3, r3, #3
 8001e7c:	4a20      	ldr	r2, [pc, #128]	; (8001f00 <AIRs_Check+0xc8>)
 8001e7e:	0019      	movs	r1, r3
 8001e80:	0010      	movs	r0, r2
 8001e82:	f001 ff5d 	bl	8003d40 <HAL_GPIO_ReadPin>
 8001e86:	0003      	movs	r3, r0
 8001e88:	1e5a      	subs	r2, r3, #1
 8001e8a:	4193      	sbcs	r3, r2
 8001e8c:	b2da      	uxtb	r2, r3
 8001e8e:	4b1d      	ldr	r3, [pc, #116]	; (8001f04 <AIRs_Check+0xcc>)
 8001e90:	701a      	strb	r2, [r3, #0]
	AIR_N_STATUS = HAL_GPIO_ReadPin(AIR_N_STATUS_uC_GPIO_Port,
 8001e92:	2380      	movs	r3, #128	; 0x80
 8001e94:	011b      	lsls	r3, r3, #4
 8001e96:	4a1a      	ldr	r2, [pc, #104]	; (8001f00 <AIRs_Check+0xc8>)
 8001e98:	0019      	movs	r1, r3
 8001e9a:	0010      	movs	r0, r2
 8001e9c:	f001 ff50 	bl	8003d40 <HAL_GPIO_ReadPin>
 8001ea0:	0003      	movs	r3, r0
 8001ea2:	1e5a      	subs	r2, r3, #1
 8001ea4:	4193      	sbcs	r3, r2
 8001ea6:	b2da      	uxtb	r2, r3
 8001ea8:	4b17      	ldr	r3, [pc, #92]	; (8001f08 <AIRs_Check+0xd0>)
 8001eaa:	701a      	strb	r2, [r3, #0]
	AIR_N_STATUS_uC_Pin); // AIR_N conducting current

	AIR_P_STATUS = HAL_GPIO_ReadPin(AIR_P_STATUS_uC_GPIO_Port,
 8001eac:	4b14      	ldr	r3, [pc, #80]	; (8001f00 <AIRs_Check+0xc8>)
 8001eae:	2104      	movs	r1, #4
 8001eb0:	0018      	movs	r0, r3
 8001eb2:	f001 ff45 	bl	8003d40 <HAL_GPIO_ReadPin>
 8001eb6:	0003      	movs	r3, r0
 8001eb8:	1e5a      	subs	r2, r3, #1
 8001eba:	4193      	sbcs	r3, r2
 8001ebc:	b2da      	uxtb	r2, r3
 8001ebe:	4b13      	ldr	r3, [pc, #76]	; (8001f0c <AIRs_Check+0xd4>)
 8001ec0:	701a      	strb	r2, [r3, #0]
	AIR_P_STATUS_uC_Pin); // AIR_P conducting current

	//AIR_N state check, if AIR_N is turned on but doesn't conduct current, send error
	if (( Write_AIRs_Control == GPIO_PIN_SET ) && ( AIR_N_STATUS == GPIO_PIN_RESET ))
 8001ec2:	4b10      	ldr	r3, [pc, #64]	; (8001f04 <AIRs_Check+0xcc>)
 8001ec4:	781b      	ldrb	r3, [r3, #0]
 8001ec6:	2b00      	cmp	r3, #0
 8001ec8:	d009      	beq.n	8001ede <AIRs_Check+0xa6>
 8001eca:	4b0f      	ldr	r3, [pc, #60]	; (8001f08 <AIRs_Check+0xd0>)
 8001ecc:	781b      	ldrb	r3, [r3, #0]
 8001ece:	2201      	movs	r2, #1
 8001ed0:	4053      	eors	r3, r2
 8001ed2:	b2db      	uxtb	r3, r3
 8001ed4:	2b00      	cmp	r3, #0
 8001ed6:	d002      	beq.n	8001ede <AIRs_Check+0xa6>
	{
		CAN_ReportError(Error_AIR_P_ID);
 8001ed8:	2003      	movs	r0, #3
 8001eda:	f7ff fd4f 	bl	800197c <CAN_ReportError>
	}
	//Both airs should conduct current at the same time
	if( AIR_N_STATUS != AIR_P_STATUS )
 8001ede:	4b0a      	ldr	r3, [pc, #40]	; (8001f08 <AIRs_Check+0xd0>)
 8001ee0:	781a      	ldrb	r2, [r3, #0]
 8001ee2:	4b0a      	ldr	r3, [pc, #40]	; (8001f0c <AIRs_Check+0xd4>)
 8001ee4:	781b      	ldrb	r3, [r3, #0]
 8001ee6:	429a      	cmp	r2, r3
 8001ee8:	d002      	beq.n	8001ef0 <AIRs_Check+0xb8>
	{
		CAN_ReportError(Error_AIR_N_ID);
 8001eea:	2004      	movs	r0, #4
 8001eec:	f7ff fd46 	bl	800197c <CAN_ReportError>
	}
}
 8001ef0:	46c0      	nop			; (mov r8, r8)
 8001ef2:	46bd      	mov	sp, r7
 8001ef4:	bd80      	pop	{r7, pc}
 8001ef6:	46c0      	nop			; (mov r8, r8)
 8001ef8:	20000152 	.word	0x20000152
 8001efc:	20000154 	.word	0x20000154
 8001f00:	48000400 	.word	0x48000400
 8001f04:	2000015b 	.word	0x2000015b
 8001f08:	2000015c 	.word	0x2000015c
 8001f0c:	2000015d 	.word	0x2000015d

08001f10 <MAIN_Status_Check>:
 * and turns OFF Tractive System if MAIN is not ON
 *
 * @retval None.
 **/
void MAIN_Status_Check(void)
{
 8001f10:	b580      	push	{r7, lr}
 8001f12:	af00      	add	r7, sp, #0
	if (Write_MAIN_Status == 0) //MAIN always should be ON
 8001f14:	4b0b      	ldr	r3, [pc, #44]	; (8001f44 <MAIN_Status_Check+0x34>)
 8001f16:	781b      	ldrb	r3, [r3, #0]
 8001f18:	2201      	movs	r2, #1
 8001f1a:	4053      	eors	r3, r2
 8001f1c:	b2db      	uxtb	r3, r3
 8001f1e:	2b00      	cmp	r3, #0
 8001f20:	d009      	beq.n	8001f36 <MAIN_Status_Check+0x26>
	{
		HAL_GPIO_WritePin(AIRs_CONTROL_uC_GPIO_Port, AIRs_CONTROL_uC_Pin, Write_MAIN_Status);
 8001f22:	4b08      	ldr	r3, [pc, #32]	; (8001f44 <MAIN_Status_Check+0x34>)
 8001f24:	781b      	ldrb	r3, [r3, #0]
 8001f26:	001a      	movs	r2, r3
 8001f28:	2380      	movs	r3, #128	; 0x80
 8001f2a:	00db      	lsls	r3, r3, #3
 8001f2c:	4806      	ldr	r0, [pc, #24]	; (8001f48 <MAIN_Status_Check+0x38>)
 8001f2e:	0019      	movs	r1, r3
 8001f30:	f001 ff23 	bl	8003d7a <HAL_GPIO_WritePin>
	}
	else //reset main status
	{
		Write_MAIN_Status = 0;
	}
}
 8001f34:	e002      	b.n	8001f3c <MAIN_Status_Check+0x2c>
		Write_MAIN_Status = 0;
 8001f36:	4b03      	ldr	r3, [pc, #12]	; (8001f44 <MAIN_Status_Check+0x34>)
 8001f38:	2200      	movs	r2, #0
 8001f3a:	701a      	strb	r2, [r3, #0]
}
 8001f3c:	46c0      	nop			; (mov r8, r8)
 8001f3e:	46bd      	mov	sp, r7
 8001f40:	bd80      	pop	{r7, pc}
 8001f42:	46c0      	nop			; (mov r8, r8)
 8001f44:	2000015a 	.word	0x2000015a
 8001f48:	48000400 	.word	0x48000400

08001f4c <Set_ADC_Channel>:
 * @param Channel Number of channel which we want to use
 *
 * @retval None.
 **/
void Set_ADC_Channel(uint32_t Channel)
{
 8001f4c:	b590      	push	{r4, r7, lr}
 8001f4e:	b087      	sub	sp, #28
 8001f50:	af00      	add	r7, sp, #0
 8001f52:	6078      	str	r0, [r7, #4]
	ADC_ChannelConfTypeDef sConfig = { 0 };
 8001f54:	240c      	movs	r4, #12
 8001f56:	193b      	adds	r3, r7, r4
 8001f58:	0018      	movs	r0, r3
 8001f5a:	230c      	movs	r3, #12
 8001f5c:	001a      	movs	r2, r3
 8001f5e:	2100      	movs	r1, #0
 8001f60:	f003 ff10 	bl	8005d84 <memset>
	sConfig.Channel = Channel;
 8001f64:	0021      	movs	r1, r4
 8001f66:	187b      	adds	r3, r7, r1
 8001f68:	687a      	ldr	r2, [r7, #4]
 8001f6a:	601a      	str	r2, [r3, #0]
	sConfig.Rank = ADC_RANK_CHANNEL_NUMBER;
 8001f6c:	187b      	adds	r3, r7, r1
 8001f6e:	2280      	movs	r2, #128	; 0x80
 8001f70:	0152      	lsls	r2, r2, #5
 8001f72:	605a      	str	r2, [r3, #4]
	sConfig.SamplingTime = ADC_SAMPLETIME_7CYCLES_5;
 8001f74:	187b      	adds	r3, r7, r1
 8001f76:	2201      	movs	r2, #1
 8001f78:	609a      	str	r2, [r3, #8]
	if (HAL_ADC_ConfigChannel(&hadc, &sConfig) != HAL_OK)
 8001f7a:	187a      	adds	r2, r7, r1
 8001f7c:	4b06      	ldr	r3, [pc, #24]	; (8001f98 <Set_ADC_Channel+0x4c>)
 8001f7e:	0011      	movs	r1, r2
 8001f80:	0018      	movs	r0, r3
 8001f82:	f000 fc93 	bl	80028ac <HAL_ADC_ConfigChannel>
 8001f86:	1e03      	subs	r3, r0, #0
 8001f88:	d001      	beq.n	8001f8e <Set_ADC_Channel+0x42>
	{
		Error_Handler();
 8001f8a:	f000 f807 	bl	8001f9c <Error_Handler>
	}
}
 8001f8e:	46c0      	nop			; (mov r8, r8)
 8001f90:	46bd      	mov	sp, r7
 8001f92:	b007      	add	sp, #28
 8001f94:	bd90      	pop	{r4, r7, pc}
 8001f96:	46c0      	nop			; (mov r8, r8)
 8001f98:	20000078 	.word	0x20000078

08001f9c <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001f9c:	b580      	push	{r7, lr}
 8001f9e:	af00      	add	r7, sp, #0
  __ASM volatile ("cpsid i" : : : "memory");
 8001fa0:	b672      	cpsid	i
}
 8001fa2:	46c0      	nop			; (mov r8, r8)
  /* USER CODE BEGIN Error_Handler_Debug */
	/* User can add his own implementation to report the HAL error return state */
	__disable_irq();
	while (1)
 8001fa4:	e7fe      	b.n	8001fa4 <Error_Handler+0x8>
	...

08001fa8 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001fa8:	b580      	push	{r7, lr}
 8001faa:	b082      	sub	sp, #8
 8001fac:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001fae:	4b0f      	ldr	r3, [pc, #60]	; (8001fec <HAL_MspInit+0x44>)
 8001fb0:	699a      	ldr	r2, [r3, #24]
 8001fb2:	4b0e      	ldr	r3, [pc, #56]	; (8001fec <HAL_MspInit+0x44>)
 8001fb4:	2101      	movs	r1, #1
 8001fb6:	430a      	orrs	r2, r1
 8001fb8:	619a      	str	r2, [r3, #24]
 8001fba:	4b0c      	ldr	r3, [pc, #48]	; (8001fec <HAL_MspInit+0x44>)
 8001fbc:	699b      	ldr	r3, [r3, #24]
 8001fbe:	2201      	movs	r2, #1
 8001fc0:	4013      	ands	r3, r2
 8001fc2:	607b      	str	r3, [r7, #4]
 8001fc4:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8001fc6:	4b09      	ldr	r3, [pc, #36]	; (8001fec <HAL_MspInit+0x44>)
 8001fc8:	69da      	ldr	r2, [r3, #28]
 8001fca:	4b08      	ldr	r3, [pc, #32]	; (8001fec <HAL_MspInit+0x44>)
 8001fcc:	2180      	movs	r1, #128	; 0x80
 8001fce:	0549      	lsls	r1, r1, #21
 8001fd0:	430a      	orrs	r2, r1
 8001fd2:	61da      	str	r2, [r3, #28]
 8001fd4:	4b05      	ldr	r3, [pc, #20]	; (8001fec <HAL_MspInit+0x44>)
 8001fd6:	69da      	ldr	r2, [r3, #28]
 8001fd8:	2380      	movs	r3, #128	; 0x80
 8001fda:	055b      	lsls	r3, r3, #21
 8001fdc:	4013      	ands	r3, r2
 8001fde:	603b      	str	r3, [r7, #0]
 8001fe0:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001fe2:	46c0      	nop			; (mov r8, r8)
 8001fe4:	46bd      	mov	sp, r7
 8001fe6:	b002      	add	sp, #8
 8001fe8:	bd80      	pop	{r7, pc}
 8001fea:	46c0      	nop			; (mov r8, r8)
 8001fec:	40021000 	.word	0x40021000

08001ff0 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001ff0:	b580      	push	{r7, lr}
 8001ff2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8001ff4:	e7fe      	b.n	8001ff4 <NMI_Handler+0x4>

08001ff6 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001ff6:	b580      	push	{r7, lr}
 8001ff8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001ffa:	e7fe      	b.n	8001ffa <HardFault_Handler+0x4>

08001ffc <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8001ffc:	b580      	push	{r7, lr}
 8001ffe:	af00      	add	r7, sp, #0

  /* USER CODE END SVC_IRQn 0 */
  /* USER CODE BEGIN SVC_IRQn 1 */

  /* USER CODE END SVC_IRQn 1 */
}
 8002000:	46c0      	nop			; (mov r8, r8)
 8002002:	46bd      	mov	sp, r7
 8002004:	bd80      	pop	{r7, pc}

08002006 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8002006:	b580      	push	{r7, lr}
 8002008:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 800200a:	46c0      	nop			; (mov r8, r8)
 800200c:	46bd      	mov	sp, r7
 800200e:	bd80      	pop	{r7, pc}

08002010 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8002010:	b580      	push	{r7, lr}
 8002012:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8002014:	f000 f9f6 	bl	8002404 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8002018:	46c0      	nop			; (mov r8, r8)
 800201a:	46bd      	mov	sp, r7
 800201c:	bd80      	pop	{r7, pc}
	...

08002020 <CEC_CAN_IRQHandler>:

/**
  * @brief This function handles HDMI-CEC and CAN global interrupts / HDMI-CEC wake-up interrupt through EXTI line 27.
  */
void CEC_CAN_IRQHandler(void)
{
 8002020:	b580      	push	{r7, lr}
 8002022:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN CEC_CAN_IRQn 0 */

  /* USER CODE END CEC_CAN_IRQn 0 */
  HAL_CAN_IRQHandler(&hcan);
 8002024:	4b03      	ldr	r3, [pc, #12]	; (8002034 <CEC_CAN_IRQHandler+0x14>)
 8002026:	0018      	movs	r0, r3
 8002028:	f001 fa2f 	bl	800348a <HAL_CAN_IRQHandler>
  /* USER CODE BEGIN CEC_CAN_IRQn 1 */

  /* USER CODE END CEC_CAN_IRQn 1 */
}
 800202c:	46c0      	nop			; (mov r8, r8)
 800202e:	46bd      	mov	sp, r7
 8002030:	bd80      	pop	{r7, pc}
 8002032:	46c0      	nop			; (mov r8, r8)
 8002034:	200000b8 	.word	0x200000b8

08002038 <SystemInit>:
  * @brief  Setup the microcontroller system
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8002038:	b580      	push	{r7, lr}
 800203a:	af00      	add	r7, sp, #0
                         before branch to main program. This call is made inside
                         the "startup_stm32f0xx.s" file.
                         User can setups the default system clock (System clock source, PLL Multiplier
                         and Divider factors, AHB/APBx prescalers and Flash settings).
   */
}
 800203c:	46c0      	nop			; (mov r8, r8)
 800203e:	46bd      	mov	sp, r7
 8002040:	bd80      	pop	{r7, pc}
	...

08002044 <MX_TIM2_Init>:

TIM_HandleTypeDef htim2;

/* TIM2 init function */
void MX_TIM2_Init(void)
{
 8002044:	b580      	push	{r7, lr}
 8002046:	b08c      	sub	sp, #48	; 0x30
 8002048:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_SlaveConfigTypeDef sSlaveConfig = {0};
 800204a:	231c      	movs	r3, #28
 800204c:	18fb      	adds	r3, r7, r3
 800204e:	0018      	movs	r0, r3
 8002050:	2314      	movs	r3, #20
 8002052:	001a      	movs	r2, r3
 8002054:	2100      	movs	r1, #0
 8002056:	f003 fe95 	bl	8005d84 <memset>
  TIM_IC_InitTypeDef sConfigIC = {0};
 800205a:	230c      	movs	r3, #12
 800205c:	18fb      	adds	r3, r7, r3
 800205e:	0018      	movs	r0, r3
 8002060:	2310      	movs	r3, #16
 8002062:	001a      	movs	r2, r3
 8002064:	2100      	movs	r1, #0
 8002066:	f003 fe8d 	bl	8005d84 <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800206a:	1d3b      	adds	r3, r7, #4
 800206c:	0018      	movs	r0, r3
 800206e:	2308      	movs	r3, #8
 8002070:	001a      	movs	r2, r3
 8002072:	2100      	movs	r1, #0
 8002074:	f003 fe86 	bl	8005d84 <memset>

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 8002078:	4b38      	ldr	r3, [pc, #224]	; (800215c <MX_TIM2_Init+0x118>)
 800207a:	2280      	movs	r2, #128	; 0x80
 800207c:	05d2      	lsls	r2, r2, #23
 800207e:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 0;
 8002080:	4b36      	ldr	r3, [pc, #216]	; (800215c <MX_TIM2_Init+0x118>)
 8002082:	2200      	movs	r2, #0
 8002084:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8002086:	4b35      	ldr	r3, [pc, #212]	; (800215c <MX_TIM2_Init+0x118>)
 8002088:	2200      	movs	r2, #0
 800208a:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 4294967295;
 800208c:	4b33      	ldr	r3, [pc, #204]	; (800215c <MX_TIM2_Init+0x118>)
 800208e:	2201      	movs	r2, #1
 8002090:	4252      	negs	r2, r2
 8002092:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8002094:	4b31      	ldr	r3, [pc, #196]	; (800215c <MX_TIM2_Init+0x118>)
 8002096:	2200      	movs	r2, #0
 8002098:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800209a:	4b30      	ldr	r3, [pc, #192]	; (800215c <MX_TIM2_Init+0x118>)
 800209c:	2200      	movs	r2, #0
 800209e:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_IC_Init(&htim2) != HAL_OK)
 80020a0:	4b2e      	ldr	r3, [pc, #184]	; (800215c <MX_TIM2_Init+0x118>)
 80020a2:	0018      	movs	r0, r3
 80020a4:	f002 fc68 	bl	8004978 <HAL_TIM_IC_Init>
 80020a8:	1e03      	subs	r3, r0, #0
 80020aa:	d001      	beq.n	80020b0 <MX_TIM2_Init+0x6c>
  {
    Error_Handler();
 80020ac:	f7ff ff76 	bl	8001f9c <Error_Handler>
  }
  sSlaveConfig.SlaveMode = TIM_SLAVEMODE_RESET;
 80020b0:	211c      	movs	r1, #28
 80020b2:	187b      	adds	r3, r7, r1
 80020b4:	2204      	movs	r2, #4
 80020b6:	601a      	str	r2, [r3, #0]
  sSlaveConfig.InputTrigger = TIM_TS_TI1FP1;
 80020b8:	187b      	adds	r3, r7, r1
 80020ba:	2250      	movs	r2, #80	; 0x50
 80020bc:	605a      	str	r2, [r3, #4]
  sSlaveConfig.TriggerPolarity = TIM_INPUTCHANNELPOLARITY_RISING;
 80020be:	187b      	adds	r3, r7, r1
 80020c0:	2200      	movs	r2, #0
 80020c2:	609a      	str	r2, [r3, #8]
  sSlaveConfig.TriggerPrescaler = TIM_ICPSC_DIV1;
 80020c4:	187b      	adds	r3, r7, r1
 80020c6:	2200      	movs	r2, #0
 80020c8:	60da      	str	r2, [r3, #12]
  sSlaveConfig.TriggerFilter = 0;
 80020ca:	187b      	adds	r3, r7, r1
 80020cc:	2200      	movs	r2, #0
 80020ce:	611a      	str	r2, [r3, #16]
  if (HAL_TIM_SlaveConfigSynchro(&htim2, &sSlaveConfig) != HAL_OK)
 80020d0:	187a      	adds	r2, r7, r1
 80020d2:	4b22      	ldr	r3, [pc, #136]	; (800215c <MX_TIM2_Init+0x118>)
 80020d4:	0011      	movs	r1, r2
 80020d6:	0018      	movs	r0, r3
 80020d8:	f002 ff0a 	bl	8004ef0 <HAL_TIM_SlaveConfigSynchro>
 80020dc:	1e03      	subs	r3, r0, #0
 80020de:	d001      	beq.n	80020e4 <MX_TIM2_Init+0xa0>
  {
    Error_Handler();
 80020e0:	f7ff ff5c 	bl	8001f9c <Error_Handler>
  }
  sConfigIC.ICPolarity = TIM_INPUTCHANNELPOLARITY_RISING;
 80020e4:	210c      	movs	r1, #12
 80020e6:	187b      	adds	r3, r7, r1
 80020e8:	2200      	movs	r2, #0
 80020ea:	601a      	str	r2, [r3, #0]
  sConfigIC.ICSelection = TIM_ICSELECTION_DIRECTTI;
 80020ec:	187b      	adds	r3, r7, r1
 80020ee:	2201      	movs	r2, #1
 80020f0:	605a      	str	r2, [r3, #4]
  sConfigIC.ICPrescaler = TIM_ICPSC_DIV1;
 80020f2:	187b      	adds	r3, r7, r1
 80020f4:	2200      	movs	r2, #0
 80020f6:	609a      	str	r2, [r3, #8]
  sConfigIC.ICFilter = 0;
 80020f8:	187b      	adds	r3, r7, r1
 80020fa:	2200      	movs	r2, #0
 80020fc:	60da      	str	r2, [r3, #12]
  if (HAL_TIM_IC_ConfigChannel(&htim2, &sConfigIC, TIM_CHANNEL_1) != HAL_OK)
 80020fe:	1879      	adds	r1, r7, r1
 8002100:	4b16      	ldr	r3, [pc, #88]	; (800215c <MX_TIM2_Init+0x118>)
 8002102:	2200      	movs	r2, #0
 8002104:	0018      	movs	r0, r3
 8002106:	f002 fe4f 	bl	8004da8 <HAL_TIM_IC_ConfigChannel>
 800210a:	1e03      	subs	r3, r0, #0
 800210c:	d001      	beq.n	8002112 <MX_TIM2_Init+0xce>
  {
    Error_Handler();
 800210e:	f7ff ff45 	bl	8001f9c <Error_Handler>
  }
  sConfigIC.ICPolarity = TIM_INPUTCHANNELPOLARITY_FALLING;
 8002112:	210c      	movs	r1, #12
 8002114:	187b      	adds	r3, r7, r1
 8002116:	2202      	movs	r2, #2
 8002118:	601a      	str	r2, [r3, #0]
  sConfigIC.ICSelection = TIM_ICSELECTION_INDIRECTTI;
 800211a:	187b      	adds	r3, r7, r1
 800211c:	2202      	movs	r2, #2
 800211e:	605a      	str	r2, [r3, #4]
  if (HAL_TIM_IC_ConfigChannel(&htim2, &sConfigIC, TIM_CHANNEL_2) != HAL_OK)
 8002120:	1879      	adds	r1, r7, r1
 8002122:	4b0e      	ldr	r3, [pc, #56]	; (800215c <MX_TIM2_Init+0x118>)
 8002124:	2204      	movs	r2, #4
 8002126:	0018      	movs	r0, r3
 8002128:	f002 fe3e 	bl	8004da8 <HAL_TIM_IC_ConfigChannel>
 800212c:	1e03      	subs	r3, r0, #0
 800212e:	d001      	beq.n	8002134 <MX_TIM2_Init+0xf0>
  {
    Error_Handler();
 8002130:	f7ff ff34 	bl	8001f9c <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8002134:	1d3b      	adds	r3, r7, #4
 8002136:	2200      	movs	r2, #0
 8002138:	601a      	str	r2, [r3, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800213a:	1d3b      	adds	r3, r7, #4
 800213c:	2200      	movs	r2, #0
 800213e:	605a      	str	r2, [r3, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8002140:	1d3a      	adds	r2, r7, #4
 8002142:	4b06      	ldr	r3, [pc, #24]	; (800215c <MX_TIM2_Init+0x118>)
 8002144:	0011      	movs	r1, r2
 8002146:	0018      	movs	r0, r3
 8002148:	f003 f9e2 	bl	8005510 <HAL_TIMEx_MasterConfigSynchronization>
 800214c:	1e03      	subs	r3, r0, #0
 800214e:	d001      	beq.n	8002154 <MX_TIM2_Init+0x110>
  {
    Error_Handler();
 8002150:	f7ff ff24 	bl	8001f9c <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 8002154:	46c0      	nop			; (mov r8, r8)
 8002156:	46bd      	mov	sp, r7
 8002158:	b00c      	add	sp, #48	; 0x30
 800215a:	bd80      	pop	{r7, pc}
 800215c:	20000164 	.word	0x20000164

08002160 <HAL_TIM_IC_MspInit>:

void HAL_TIM_IC_MspInit(TIM_HandleTypeDef* tim_icHandle)
{
 8002160:	b590      	push	{r4, r7, lr}
 8002162:	b08b      	sub	sp, #44	; 0x2c
 8002164:	af00      	add	r7, sp, #0
 8002166:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002168:	2414      	movs	r4, #20
 800216a:	193b      	adds	r3, r7, r4
 800216c:	0018      	movs	r0, r3
 800216e:	2314      	movs	r3, #20
 8002170:	001a      	movs	r2, r3
 8002172:	2100      	movs	r1, #0
 8002174:	f003 fe06 	bl	8005d84 <memset>
  if(tim_icHandle->Instance==TIM2)
 8002178:	687b      	ldr	r3, [r7, #4]
 800217a:	681a      	ldr	r2, [r3, #0]
 800217c:	2380      	movs	r3, #128	; 0x80
 800217e:	05db      	lsls	r3, r3, #23
 8002180:	429a      	cmp	r2, r3
 8002182:	d130      	bne.n	80021e6 <HAL_TIM_IC_MspInit+0x86>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* TIM2 clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 8002184:	4b1a      	ldr	r3, [pc, #104]	; (80021f0 <HAL_TIM_IC_MspInit+0x90>)
 8002186:	69da      	ldr	r2, [r3, #28]
 8002188:	4b19      	ldr	r3, [pc, #100]	; (80021f0 <HAL_TIM_IC_MspInit+0x90>)
 800218a:	2101      	movs	r1, #1
 800218c:	430a      	orrs	r2, r1
 800218e:	61da      	str	r2, [r3, #28]
 8002190:	4b17      	ldr	r3, [pc, #92]	; (80021f0 <HAL_TIM_IC_MspInit+0x90>)
 8002192:	69db      	ldr	r3, [r3, #28]
 8002194:	2201      	movs	r2, #1
 8002196:	4013      	ands	r3, r2
 8002198:	613b      	str	r3, [r7, #16]
 800219a:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800219c:	4b14      	ldr	r3, [pc, #80]	; (80021f0 <HAL_TIM_IC_MspInit+0x90>)
 800219e:	695a      	ldr	r2, [r3, #20]
 80021a0:	4b13      	ldr	r3, [pc, #76]	; (80021f0 <HAL_TIM_IC_MspInit+0x90>)
 80021a2:	2180      	movs	r1, #128	; 0x80
 80021a4:	0289      	lsls	r1, r1, #10
 80021a6:	430a      	orrs	r2, r1
 80021a8:	615a      	str	r2, [r3, #20]
 80021aa:	4b11      	ldr	r3, [pc, #68]	; (80021f0 <HAL_TIM_IC_MspInit+0x90>)
 80021ac:	695a      	ldr	r2, [r3, #20]
 80021ae:	2380      	movs	r3, #128	; 0x80
 80021b0:	029b      	lsls	r3, r3, #10
 80021b2:	4013      	ands	r3, r2
 80021b4:	60fb      	str	r3, [r7, #12]
 80021b6:	68fb      	ldr	r3, [r7, #12]
    /**TIM2 GPIO Configuration
    PA5     ------> TIM2_CH1
    */
    GPIO_InitStruct.Pin = IMD_M_HS_uC_Pin;
 80021b8:	0021      	movs	r1, r4
 80021ba:	187b      	adds	r3, r7, r1
 80021bc:	2220      	movs	r2, #32
 80021be:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80021c0:	187b      	adds	r3, r7, r1
 80021c2:	2202      	movs	r2, #2
 80021c4:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80021c6:	187b      	adds	r3, r7, r1
 80021c8:	2200      	movs	r2, #0
 80021ca:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80021cc:	187b      	adds	r3, r7, r1
 80021ce:	2200      	movs	r2, #0
 80021d0:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM2;
 80021d2:	187b      	adds	r3, r7, r1
 80021d4:	2202      	movs	r2, #2
 80021d6:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(IMD_M_HS_uC_GPIO_Port, &GPIO_InitStruct);
 80021d8:	187a      	adds	r2, r7, r1
 80021da:	2390      	movs	r3, #144	; 0x90
 80021dc:	05db      	lsls	r3, r3, #23
 80021de:	0011      	movs	r1, r2
 80021e0:	0018      	movs	r0, r3
 80021e2:	f001 fc45 	bl	8003a70 <HAL_GPIO_Init>

  /* USER CODE BEGIN TIM2_MspInit 1 */

  /* USER CODE END TIM2_MspInit 1 */
  }
}
 80021e6:	46c0      	nop			; (mov r8, r8)
 80021e8:	46bd      	mov	sp, r7
 80021ea:	b00b      	add	sp, #44	; 0x2c
 80021ec:	bd90      	pop	{r4, r7, pc}
 80021ee:	46c0      	nop			; (mov r8, r8)
 80021f0:	40021000 	.word	0x40021000

080021f4 <MX_USART1_UART_Init>:
UART_HandleTypeDef huart1;

/* USART1 init function */

void MX_USART1_UART_Init(void)
{
 80021f4:	b580      	push	{r7, lr}
 80021f6:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 80021f8:	4b14      	ldr	r3, [pc, #80]	; (800224c <MX_USART1_UART_Init+0x58>)
 80021fa:	4a15      	ldr	r2, [pc, #84]	; (8002250 <MX_USART1_UART_Init+0x5c>)
 80021fc:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 38400;
 80021fe:	4b13      	ldr	r3, [pc, #76]	; (800224c <MX_USART1_UART_Init+0x58>)
 8002200:	2296      	movs	r2, #150	; 0x96
 8002202:	0212      	lsls	r2, r2, #8
 8002204:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 8002206:	4b11      	ldr	r3, [pc, #68]	; (800224c <MX_USART1_UART_Init+0x58>)
 8002208:	2200      	movs	r2, #0
 800220a:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 800220c:	4b0f      	ldr	r3, [pc, #60]	; (800224c <MX_USART1_UART_Init+0x58>)
 800220e:	2200      	movs	r2, #0
 8002210:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 8002212:	4b0e      	ldr	r3, [pc, #56]	; (800224c <MX_USART1_UART_Init+0x58>)
 8002214:	2200      	movs	r2, #0
 8002216:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8002218:	4b0c      	ldr	r3, [pc, #48]	; (800224c <MX_USART1_UART_Init+0x58>)
 800221a:	220c      	movs	r2, #12
 800221c:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800221e:	4b0b      	ldr	r3, [pc, #44]	; (800224c <MX_USART1_UART_Init+0x58>)
 8002220:	2200      	movs	r2, #0
 8002222:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8002224:	4b09      	ldr	r3, [pc, #36]	; (800224c <MX_USART1_UART_Init+0x58>)
 8002226:	2200      	movs	r2, #0
 8002228:	61da      	str	r2, [r3, #28]
  huart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 800222a:	4b08      	ldr	r3, [pc, #32]	; (800224c <MX_USART1_UART_Init+0x58>)
 800222c:	2200      	movs	r2, #0
 800222e:	621a      	str	r2, [r3, #32]
  huart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8002230:	4b06      	ldr	r3, [pc, #24]	; (800224c <MX_USART1_UART_Init+0x58>)
 8002232:	2200      	movs	r2, #0
 8002234:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart1) != HAL_OK)
 8002236:	4b05      	ldr	r3, [pc, #20]	; (800224c <MX_USART1_UART_Init+0x58>)
 8002238:	0018      	movs	r0, r3
 800223a:	f003 f9c1 	bl	80055c0 <HAL_UART_Init>
 800223e:	1e03      	subs	r3, r0, #0
 8002240:	d001      	beq.n	8002246 <MX_USART1_UART_Init+0x52>
  {
    Error_Handler();
 8002242:	f7ff feab 	bl	8001f9c <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 8002246:	46c0      	nop			; (mov r8, r8)
 8002248:	46bd      	mov	sp, r7
 800224a:	bd80      	pop	{r7, pc}
 800224c:	200001ac 	.word	0x200001ac
 8002250:	40013800 	.word	0x40013800

08002254 <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 8002254:	b590      	push	{r4, r7, lr}
 8002256:	b08b      	sub	sp, #44	; 0x2c
 8002258:	af00      	add	r7, sp, #0
 800225a:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800225c:	2414      	movs	r4, #20
 800225e:	193b      	adds	r3, r7, r4
 8002260:	0018      	movs	r0, r3
 8002262:	2314      	movs	r3, #20
 8002264:	001a      	movs	r2, r3
 8002266:	2100      	movs	r1, #0
 8002268:	f003 fd8c 	bl	8005d84 <memset>
  if(uartHandle->Instance==USART1)
 800226c:	687b      	ldr	r3, [r7, #4]
 800226e:	681b      	ldr	r3, [r3, #0]
 8002270:	4a1c      	ldr	r2, [pc, #112]	; (80022e4 <HAL_UART_MspInit+0x90>)
 8002272:	4293      	cmp	r3, r2
 8002274:	d131      	bne.n	80022da <HAL_UART_MspInit+0x86>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* USART1 clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 8002276:	4b1c      	ldr	r3, [pc, #112]	; (80022e8 <HAL_UART_MspInit+0x94>)
 8002278:	699a      	ldr	r2, [r3, #24]
 800227a:	4b1b      	ldr	r3, [pc, #108]	; (80022e8 <HAL_UART_MspInit+0x94>)
 800227c:	2180      	movs	r1, #128	; 0x80
 800227e:	01c9      	lsls	r1, r1, #7
 8002280:	430a      	orrs	r2, r1
 8002282:	619a      	str	r2, [r3, #24]
 8002284:	4b18      	ldr	r3, [pc, #96]	; (80022e8 <HAL_UART_MspInit+0x94>)
 8002286:	699a      	ldr	r2, [r3, #24]
 8002288:	2380      	movs	r3, #128	; 0x80
 800228a:	01db      	lsls	r3, r3, #7
 800228c:	4013      	ands	r3, r2
 800228e:	613b      	str	r3, [r7, #16]
 8002290:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8002292:	4b15      	ldr	r3, [pc, #84]	; (80022e8 <HAL_UART_MspInit+0x94>)
 8002294:	695a      	ldr	r2, [r3, #20]
 8002296:	4b14      	ldr	r3, [pc, #80]	; (80022e8 <HAL_UART_MspInit+0x94>)
 8002298:	2180      	movs	r1, #128	; 0x80
 800229a:	02c9      	lsls	r1, r1, #11
 800229c:	430a      	orrs	r2, r1
 800229e:	615a      	str	r2, [r3, #20]
 80022a0:	4b11      	ldr	r3, [pc, #68]	; (80022e8 <HAL_UART_MspInit+0x94>)
 80022a2:	695a      	ldr	r2, [r3, #20]
 80022a4:	2380      	movs	r3, #128	; 0x80
 80022a6:	02db      	lsls	r3, r3, #11
 80022a8:	4013      	ands	r3, r2
 80022aa:	60fb      	str	r3, [r7, #12]
 80022ac:	68fb      	ldr	r3, [r7, #12]
    /**USART1 GPIO Configuration
    PB6     ------> USART1_TX
    PB7     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 80022ae:	0021      	movs	r1, r4
 80022b0:	187b      	adds	r3, r7, r1
 80022b2:	22c0      	movs	r2, #192	; 0xc0
 80022b4:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80022b6:	187b      	adds	r3, r7, r1
 80022b8:	2202      	movs	r2, #2
 80022ba:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80022bc:	187b      	adds	r3, r7, r1
 80022be:	2200      	movs	r2, #0
 80022c0:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 80022c2:	187b      	adds	r3, r7, r1
 80022c4:	2203      	movs	r2, #3
 80022c6:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF0_USART1;
 80022c8:	187b      	adds	r3, r7, r1
 80022ca:	2200      	movs	r2, #0
 80022cc:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80022ce:	187b      	adds	r3, r7, r1
 80022d0:	4a06      	ldr	r2, [pc, #24]	; (80022ec <HAL_UART_MspInit+0x98>)
 80022d2:	0019      	movs	r1, r3
 80022d4:	0010      	movs	r0, r2
 80022d6:	f001 fbcb 	bl	8003a70 <HAL_GPIO_Init>

  /* USER CODE BEGIN USART1_MspInit 1 */

  /* USER CODE END USART1_MspInit 1 */
  }
}
 80022da:	46c0      	nop			; (mov r8, r8)
 80022dc:	46bd      	mov	sp, r7
 80022de:	b00b      	add	sp, #44	; 0x2c
 80022e0:	bd90      	pop	{r4, r7, pc}
 80022e2:	46c0      	nop			; (mov r8, r8)
 80022e4:	40013800 	.word	0x40013800
 80022e8:	40021000 	.word	0x40021000
 80022ec:	48000400 	.word	0x48000400

080022f0 <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 80022f0:	4813      	ldr	r0, [pc, #76]	; (8002340 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 80022f2:	4685      	mov	sp, r0

/*Check if boot space corresponds to test memory*/
 
    LDR R0,=0x00000004
 80022f4:	4813      	ldr	r0, [pc, #76]	; (8002344 <LoopForever+0x6>)
    LDR R1, [R0]
 80022f6:	6801      	ldr	r1, [r0, #0]
    LSRS R1, R1, #24
 80022f8:	0e09      	lsrs	r1, r1, #24
    LDR R2,=0x1F
 80022fa:	4a13      	ldr	r2, [pc, #76]	; (8002348 <LoopForever+0xa>)
    CMP R1, R2
 80022fc:	4291      	cmp	r1, r2
    BNE ApplicationStart
 80022fe:	d105      	bne.n	800230c <ApplicationStart>

 /*SYSCFG clock enable*/

    LDR R0,=0x40021018
 8002300:	4812      	ldr	r0, [pc, #72]	; (800234c <LoopForever+0xe>)
    LDR R1,=0x00000001
 8002302:	4913      	ldr	r1, [pc, #76]	; (8002350 <LoopForever+0x12>)
    STR R1, [R0]
 8002304:	6001      	str	r1, [r0, #0]

/*Set CFGR1 register with flash memory remap at address 0*/
    LDR R0,=0x40010000
 8002306:	4813      	ldr	r0, [pc, #76]	; (8002354 <LoopForever+0x16>)
    LDR R1,=0x00000000
 8002308:	4913      	ldr	r1, [pc, #76]	; (8002358 <LoopForever+0x1a>)
    STR R1, [R0]
 800230a:	6001      	str	r1, [r0, #0]

0800230c <ApplicationStart>:

ApplicationStart:
/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 800230c:	4813      	ldr	r0, [pc, #76]	; (800235c <LoopForever+0x1e>)
  ldr r1, =_edata
 800230e:	4914      	ldr	r1, [pc, #80]	; (8002360 <LoopForever+0x22>)
  ldr r2, =_sidata
 8002310:	4a14      	ldr	r2, [pc, #80]	; (8002364 <LoopForever+0x26>)
  movs r3, #0
 8002312:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8002314:	e002      	b.n	800231c <LoopCopyDataInit>

08002316 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8002316:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8002318:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800231a:	3304      	adds	r3, #4

0800231c <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 800231c:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800231e:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8002320:	d3f9      	bcc.n	8002316 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8002322:	4a11      	ldr	r2, [pc, #68]	; (8002368 <LoopForever+0x2a>)
  ldr r4, =_ebss
 8002324:	4c11      	ldr	r4, [pc, #68]	; (800236c <LoopForever+0x2e>)
  movs r3, #0
 8002326:	2300      	movs	r3, #0
  b LoopFillZerobss
 8002328:	e001      	b.n	800232e <LoopFillZerobss>

0800232a <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800232a:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 800232c:	3204      	adds	r2, #4

0800232e <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800232e:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8002330:	d3fb      	bcc.n	800232a <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit
 8002332:	f7ff fe81 	bl	8002038 <SystemInit>
/* Call static constructors */
  bl __libc_init_array
 8002336:	f003 fd01 	bl	8005d3c <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 800233a:	f7ff fc4d 	bl	8001bd8 <main>

0800233e <LoopForever>:

LoopForever:
    b LoopForever
 800233e:	e7fe      	b.n	800233e <LoopForever>
  ldr   r0, =_estack
 8002340:	20001800 	.word	0x20001800
    LDR R0,=0x00000004
 8002344:	00000004 	.word	0x00000004
    LDR R2,=0x1F
 8002348:	0000001f 	.word	0x0000001f
    LDR R0,=0x40021018
 800234c:	40021018 	.word	0x40021018
    LDR R1,=0x00000001
 8002350:	00000001 	.word	0x00000001
    LDR R0,=0x40010000
 8002354:	40010000 	.word	0x40010000
    LDR R1,=0x00000000
 8002358:	00000000 	.word	0x00000000
  ldr r0, =_sdata
 800235c:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8002360:	2000005c 	.word	0x2000005c
  ldr r2, =_sidata
 8002364:	08005e2c 	.word	0x08005e2c
  ldr r2, =_sbss
 8002368:	2000005c 	.word	0x2000005c
  ldr r4, =_ebss
 800236c:	20000238 	.word	0x20000238

08002370 <ADC1_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8002370:	e7fe      	b.n	8002370 <ADC1_IRQHandler>
	...

08002374 <HAL_Init>:
  *       In the default implementation,Systick is used as source of time base.
  *       The tick variable is incremented each 1ms in its ISR.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8002374:	b580      	push	{r7, lr}
 8002376:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch */ 
#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8002378:	4b07      	ldr	r3, [pc, #28]	; (8002398 <HAL_Init+0x24>)
 800237a:	681a      	ldr	r2, [r3, #0]
 800237c:	4b06      	ldr	r3, [pc, #24]	; (8002398 <HAL_Init+0x24>)
 800237e:	2110      	movs	r1, #16
 8002380:	430a      	orrs	r2, r1
 8002382:	601a      	str	r2, [r3, #0]
#endif /* PREFETCH_ENABLE */

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */

  HAL_InitTick(TICK_INT_PRIORITY);
 8002384:	2003      	movs	r0, #3
 8002386:	f000 f809 	bl	800239c <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 800238a:	f7ff fe0d 	bl	8001fa8 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 800238e:	2300      	movs	r3, #0
}
 8002390:	0018      	movs	r0, r3
 8002392:	46bd      	mov	sp, r7
 8002394:	bd80      	pop	{r7, pc}
 8002396:	46c0      	nop			; (mov r8, r8)
 8002398:	40022000 	.word	0x40022000

0800239c <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 800239c:	b590      	push	{r4, r7, lr}
 800239e:	b083      	sub	sp, #12
 80023a0:	af00      	add	r7, sp, #0
 80023a2:	6078      	str	r0, [r7, #4]
  /*Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 80023a4:	4b14      	ldr	r3, [pc, #80]	; (80023f8 <HAL_InitTick+0x5c>)
 80023a6:	681c      	ldr	r4, [r3, #0]
 80023a8:	4b14      	ldr	r3, [pc, #80]	; (80023fc <HAL_InitTick+0x60>)
 80023aa:	781b      	ldrb	r3, [r3, #0]
 80023ac:	0019      	movs	r1, r3
 80023ae:	23fa      	movs	r3, #250	; 0xfa
 80023b0:	0098      	lsls	r0, r3, #2
 80023b2:	f7fd fea9 	bl	8000108 <__udivsi3>
 80023b6:	0003      	movs	r3, r0
 80023b8:	0019      	movs	r1, r3
 80023ba:	0020      	movs	r0, r4
 80023bc:	f7fd fea4 	bl	8000108 <__udivsi3>
 80023c0:	0003      	movs	r3, r0
 80023c2:	0018      	movs	r0, r3
 80023c4:	f001 fb47 	bl	8003a56 <HAL_SYSTICK_Config>
 80023c8:	1e03      	subs	r3, r0, #0
 80023ca:	d001      	beq.n	80023d0 <HAL_InitTick+0x34>
  {
    return HAL_ERROR;
 80023cc:	2301      	movs	r3, #1
 80023ce:	e00f      	b.n	80023f0 <HAL_InitTick+0x54>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80023d0:	687b      	ldr	r3, [r7, #4]
 80023d2:	2b03      	cmp	r3, #3
 80023d4:	d80b      	bhi.n	80023ee <HAL_InitTick+0x52>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80023d6:	6879      	ldr	r1, [r7, #4]
 80023d8:	2301      	movs	r3, #1
 80023da:	425b      	negs	r3, r3
 80023dc:	2200      	movs	r2, #0
 80023de:	0018      	movs	r0, r3
 80023e0:	f001 fb14 	bl	8003a0c <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 80023e4:	4b06      	ldr	r3, [pc, #24]	; (8002400 <HAL_InitTick+0x64>)
 80023e6:	687a      	ldr	r2, [r7, #4]
 80023e8:	601a      	str	r2, [r3, #0]
  {
    return HAL_ERROR;
  }

   /* Return function status */
  return HAL_OK;
 80023ea:	2300      	movs	r3, #0
 80023ec:	e000      	b.n	80023f0 <HAL_InitTick+0x54>
    return HAL_ERROR;
 80023ee:	2301      	movs	r3, #1
}
 80023f0:	0018      	movs	r0, r3
 80023f2:	46bd      	mov	sp, r7
 80023f4:	b003      	add	sp, #12
 80023f6:	bd90      	pop	{r4, r7, pc}
 80023f8:	20000050 	.word	0x20000050
 80023fc:	20000058 	.word	0x20000058
 8002400:	20000054 	.word	0x20000054

08002404 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8002404:	b580      	push	{r7, lr}
 8002406:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8002408:	4b05      	ldr	r3, [pc, #20]	; (8002420 <HAL_IncTick+0x1c>)
 800240a:	781b      	ldrb	r3, [r3, #0]
 800240c:	001a      	movs	r2, r3
 800240e:	4b05      	ldr	r3, [pc, #20]	; (8002424 <HAL_IncTick+0x20>)
 8002410:	681b      	ldr	r3, [r3, #0]
 8002412:	18d2      	adds	r2, r2, r3
 8002414:	4b03      	ldr	r3, [pc, #12]	; (8002424 <HAL_IncTick+0x20>)
 8002416:	601a      	str	r2, [r3, #0]
}
 8002418:	46c0      	nop			; (mov r8, r8)
 800241a:	46bd      	mov	sp, r7
 800241c:	bd80      	pop	{r7, pc}
 800241e:	46c0      	nop			; (mov r8, r8)
 8002420:	20000058 	.word	0x20000058
 8002424:	20000234 	.word	0x20000234

08002428 <HAL_GetTick>:
  * @note   This function is declared as __weak  to be overwritten  in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8002428:	b580      	push	{r7, lr}
 800242a:	af00      	add	r7, sp, #0
  return uwTick;
 800242c:	4b02      	ldr	r3, [pc, #8]	; (8002438 <HAL_GetTick+0x10>)
 800242e:	681b      	ldr	r3, [r3, #0]
}
 8002430:	0018      	movs	r0, r3
 8002432:	46bd      	mov	sp, r7
 8002434:	bd80      	pop	{r7, pc}
 8002436:	46c0      	nop			; (mov r8, r8)
 8002438:	20000234 	.word	0x20000234

0800243c <HAL_ADC_Init>:
  *         of structure "ADC_InitTypeDef".
  * @param  hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 800243c:	b580      	push	{r7, lr}
 800243e:	b084      	sub	sp, #16
 8002440:	af00      	add	r7, sp, #0
 8002442:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8002444:	230f      	movs	r3, #15
 8002446:	18fb      	adds	r3, r7, r3
 8002448:	2200      	movs	r2, #0
 800244a:	701a      	strb	r2, [r3, #0]
  uint32_t tmpCFGR1 = 0U;
 800244c:	2300      	movs	r3, #0
 800244e:	60bb      	str	r3, [r7, #8]

  /* Check ADC handle */
  if(hadc == NULL)
 8002450:	687b      	ldr	r3, [r7, #4]
 8002452:	2b00      	cmp	r3, #0
 8002454:	d101      	bne.n	800245a <HAL_ADC_Init+0x1e>
  {
    return HAL_ERROR;
 8002456:	2301      	movs	r3, #1
 8002458:	e125      	b.n	80026a6 <HAL_ADC_Init+0x26a>
  /* Refer to header of this file for more details on clock enabling procedure*/
  
  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  /* - ADC voltage regulator enable                                           */
  if (hadc->State == HAL_ADC_STATE_RESET)
 800245a:	687b      	ldr	r3, [r7, #4]
 800245c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800245e:	2b00      	cmp	r3, #0
 8002460:	d10a      	bne.n	8002478 <HAL_ADC_Init+0x3c>
  {
    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 8002462:	687b      	ldr	r3, [r7, #4]
 8002464:	2200      	movs	r2, #0
 8002466:	63da      	str	r2, [r3, #60]	; 0x3c
    
    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 8002468:	687b      	ldr	r3, [r7, #4]
 800246a:	2234      	movs	r2, #52	; 0x34
 800246c:	2100      	movs	r1, #0
 800246e:	5499      	strb	r1, [r3, r2]
    
    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8002470:	687b      	ldr	r3, [r7, #4]
 8002472:	0018      	movs	r0, r3
 8002474:	f7ff f880 	bl	8001578 <HAL_ADC_MspInit>
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed.                                                     */
  /* and if there is no conversion on going on regular group (ADC can be      */ 
  /* enabled anyway, in case of call of this function to update a parameter   */
  /* on the fly).                                                             */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL) &&
 8002478:	687b      	ldr	r3, [r7, #4]
 800247a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800247c:	2210      	movs	r2, #16
 800247e:	4013      	ands	r3, r2
 8002480:	d000      	beq.n	8002484 <HAL_ADC_Init+0x48>
 8002482:	e103      	b.n	800268c <HAL_ADC_Init+0x250>
 8002484:	230f      	movs	r3, #15
 8002486:	18fb      	adds	r3, r7, r3
 8002488:	781b      	ldrb	r3, [r3, #0]
 800248a:	2b00      	cmp	r3, #0
 800248c:	d000      	beq.n	8002490 <HAL_ADC_Init+0x54>
 800248e:	e0fd      	b.n	800268c <HAL_ADC_Init+0x250>
      (tmp_hal_status == HAL_OK)                                &&
      (ADC_IS_CONVERSION_ONGOING_REGULAR(hadc) == RESET)          )
 8002490:	687b      	ldr	r3, [r7, #4]
 8002492:	681b      	ldr	r3, [r3, #0]
 8002494:	689b      	ldr	r3, [r3, #8]
 8002496:	2204      	movs	r2, #4
 8002498:	4013      	ands	r3, r2
      (tmp_hal_status == HAL_OK)                                &&
 800249a:	d000      	beq.n	800249e <HAL_ADC_Init+0x62>
 800249c:	e0f6      	b.n	800268c <HAL_ADC_Init+0x250>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 800249e:	687b      	ldr	r3, [r7, #4]
 80024a0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80024a2:	4a83      	ldr	r2, [pc, #524]	; (80026b0 <HAL_ADC_Init+0x274>)
 80024a4:	4013      	ands	r3, r2
 80024a6:	2202      	movs	r2, #2
 80024a8:	431a      	orrs	r2, r3
 80024aa:	687b      	ldr	r3, [r7, #4]
 80024ac:	639a      	str	r2, [r3, #56]	; 0x38
    /* Parameters update conditioned to ADC state:                            */
    /* Parameters that can be updated only when ADC is disabled:              */
    /*  - ADC clock mode                                                      */
    /*  - ADC clock prescaler                                                 */
    /*  - ADC resolution                                                      */
    if (ADC_IS_ENABLE(hadc) == RESET)
 80024ae:	687b      	ldr	r3, [r7, #4]
 80024b0:	681b      	ldr	r3, [r3, #0]
 80024b2:	689b      	ldr	r3, [r3, #8]
 80024b4:	2203      	movs	r2, #3
 80024b6:	4013      	ands	r3, r2
 80024b8:	2b01      	cmp	r3, #1
 80024ba:	d112      	bne.n	80024e2 <HAL_ADC_Init+0xa6>
 80024bc:	687b      	ldr	r3, [r7, #4]
 80024be:	681b      	ldr	r3, [r3, #0]
 80024c0:	681b      	ldr	r3, [r3, #0]
 80024c2:	2201      	movs	r2, #1
 80024c4:	4013      	ands	r3, r2
 80024c6:	2b01      	cmp	r3, #1
 80024c8:	d009      	beq.n	80024de <HAL_ADC_Init+0xa2>
 80024ca:	687b      	ldr	r3, [r7, #4]
 80024cc:	681b      	ldr	r3, [r3, #0]
 80024ce:	68da      	ldr	r2, [r3, #12]
 80024d0:	2380      	movs	r3, #128	; 0x80
 80024d2:	021b      	lsls	r3, r3, #8
 80024d4:	401a      	ands	r2, r3
 80024d6:	2380      	movs	r3, #128	; 0x80
 80024d8:	021b      	lsls	r3, r3, #8
 80024da:	429a      	cmp	r2, r3
 80024dc:	d101      	bne.n	80024e2 <HAL_ADC_Init+0xa6>
 80024de:	2301      	movs	r3, #1
 80024e0:	e000      	b.n	80024e4 <HAL_ADC_Init+0xa8>
 80024e2:	2300      	movs	r3, #0
 80024e4:	2b00      	cmp	r3, #0
 80024e6:	d116      	bne.n	8002516 <HAL_ADC_Init+0xda>
      /* parameters):                                                         */
      /*   - internal measurement paths: Vbat, temperature sensor, Vref       */
      /*     (set into HAL_ADC_ConfigChannel() )                              */
     
      /* Configuration of ADC resolution                                      */
      MODIFY_REG(hadc->Instance->CFGR1,
 80024e8:	687b      	ldr	r3, [r7, #4]
 80024ea:	681b      	ldr	r3, [r3, #0]
 80024ec:	68db      	ldr	r3, [r3, #12]
 80024ee:	2218      	movs	r2, #24
 80024f0:	4393      	bics	r3, r2
 80024f2:	0019      	movs	r1, r3
 80024f4:	687b      	ldr	r3, [r7, #4]
 80024f6:	689a      	ldr	r2, [r3, #8]
 80024f8:	687b      	ldr	r3, [r7, #4]
 80024fa:	681b      	ldr	r3, [r3, #0]
 80024fc:	430a      	orrs	r2, r1
 80024fe:	60da      	str	r2, [r3, #12]
                 ADC_CFGR1_RES        ,
                 hadc->Init.Resolution );
      
      /* Configuration of ADC clock mode: clock source AHB or HSI with        */
      /* selectable prescaler                                                 */
      MODIFY_REG(hadc->Instance->CFGR2    ,
 8002500:	687b      	ldr	r3, [r7, #4]
 8002502:	681b      	ldr	r3, [r3, #0]
 8002504:	691b      	ldr	r3, [r3, #16]
 8002506:	009b      	lsls	r3, r3, #2
 8002508:	0899      	lsrs	r1, r3, #2
 800250a:	687b      	ldr	r3, [r7, #4]
 800250c:	685a      	ldr	r2, [r3, #4]
 800250e:	687b      	ldr	r3, [r7, #4]
 8002510:	681b      	ldr	r3, [r3, #0]
 8002512:	430a      	orrs	r2, r1
 8002514:	611a      	str	r2, [r3, #16]
    /*  - external trigger polarity                                           */
    /*  - data alignment                                                      */
    /*  - resolution                                                          */
    /*  - scan direction                                                      */
    /*  - DMA continuous request                                              */
    hadc->Instance->CFGR1 &= ~( ADC_CFGR1_DISCEN  |
 8002516:	687b      	ldr	r3, [r7, #4]
 8002518:	681b      	ldr	r3, [r3, #0]
 800251a:	68da      	ldr	r2, [r3, #12]
 800251c:	687b      	ldr	r3, [r7, #4]
 800251e:	681b      	ldr	r3, [r3, #0]
 8002520:	4964      	ldr	r1, [pc, #400]	; (80026b4 <HAL_ADC_Init+0x278>)
 8002522:	400a      	ands	r2, r1
 8002524:	60da      	str	r2, [r3, #12]
                                ADC_CFGR1_EXTEN   |
                                ADC_CFGR1_ALIGN   |
                                ADC_CFGR1_SCANDIR |
                                ADC_CFGR1_DMACFG   );

    tmpCFGR1 |= (ADC_CFGR1_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)        |
 8002526:	687b      	ldr	r3, [r7, #4]
 8002528:	7e1b      	ldrb	r3, [r3, #24]
 800252a:	039a      	lsls	r2, r3, #14
                 ADC_CFGR1_AUTOOFF((uint32_t)hadc->Init.LowPowerAutoPowerOff)     |
 800252c:	687b      	ldr	r3, [r7, #4]
 800252e:	7e5b      	ldrb	r3, [r3, #25]
 8002530:	03db      	lsls	r3, r3, #15
    tmpCFGR1 |= (ADC_CFGR1_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)        |
 8002532:	431a      	orrs	r2, r3
                 ADC_CFGR1_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)    |
 8002534:	687b      	ldr	r3, [r7, #4]
 8002536:	7e9b      	ldrb	r3, [r3, #26]
 8002538:	035b      	lsls	r3, r3, #13
                 ADC_CFGR1_AUTOOFF((uint32_t)hadc->Init.LowPowerAutoPowerOff)     |
 800253a:	431a      	orrs	r2, r3
                 ADC_CFGR1_OVERRUN(hadc->Init.Overrun)                            |
 800253c:	687b      	ldr	r3, [r7, #4]
 800253e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002540:	2b01      	cmp	r3, #1
 8002542:	d002      	beq.n	800254a <HAL_ADC_Init+0x10e>
 8002544:	2380      	movs	r3, #128	; 0x80
 8002546:	015b      	lsls	r3, r3, #5
 8002548:	e000      	b.n	800254c <HAL_ADC_Init+0x110>
 800254a:	2300      	movs	r3, #0
                 ADC_CFGR1_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)    |
 800254c:	431a      	orrs	r2, r3
                 hadc->Init.DataAlign                                             |
 800254e:	687b      	ldr	r3, [r7, #4]
 8002550:	68db      	ldr	r3, [r3, #12]
                 ADC_CFGR1_OVERRUN(hadc->Init.Overrun)                            |
 8002552:	431a      	orrs	r2, r3
                 ADC_SCANDIR(hadc->Init.ScanConvMode)                             |
 8002554:	687b      	ldr	r3, [r7, #4]
 8002556:	691b      	ldr	r3, [r3, #16]
 8002558:	2b02      	cmp	r3, #2
 800255a:	d101      	bne.n	8002560 <HAL_ADC_Init+0x124>
 800255c:	2304      	movs	r3, #4
 800255e:	e000      	b.n	8002562 <HAL_ADC_Init+0x126>
 8002560:	2300      	movs	r3, #0
                 hadc->Init.DataAlign                                             |
 8002562:	431a      	orrs	r2, r3
                 ADC_CFGR1_DMACONTREQ((uint32_t)hadc->Init.DMAContinuousRequests)  );
 8002564:	687b      	ldr	r3, [r7, #4]
 8002566:	2124      	movs	r1, #36	; 0x24
 8002568:	5c5b      	ldrb	r3, [r3, r1]
 800256a:	005b      	lsls	r3, r3, #1
                 ADC_SCANDIR(hadc->Init.ScanConvMode)                             |
 800256c:	4313      	orrs	r3, r2
    tmpCFGR1 |= (ADC_CFGR1_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)        |
 800256e:	68ba      	ldr	r2, [r7, #8]
 8002570:	4313      	orrs	r3, r2
 8002572:	60bb      	str	r3, [r7, #8]
    
    /* Enable discontinuous mode only if continuous mode is disabled */
    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 8002574:	687b      	ldr	r3, [r7, #4]
 8002576:	7edb      	ldrb	r3, [r3, #27]
 8002578:	2b01      	cmp	r3, #1
 800257a:	d115      	bne.n	80025a8 <HAL_ADC_Init+0x16c>
    {
      if (hadc->Init.ContinuousConvMode == DISABLE)
 800257c:	687b      	ldr	r3, [r7, #4]
 800257e:	7e9b      	ldrb	r3, [r3, #26]
 8002580:	2b00      	cmp	r3, #0
 8002582:	d105      	bne.n	8002590 <HAL_ADC_Init+0x154>
      {
        /* Enable the selected ADC group regular discontinuous mode */
        tmpCFGR1 |= ADC_CFGR1_DISCEN;
 8002584:	68bb      	ldr	r3, [r7, #8]
 8002586:	2280      	movs	r2, #128	; 0x80
 8002588:	0252      	lsls	r2, r2, #9
 800258a:	4313      	orrs	r3, r2
 800258c:	60bb      	str	r3, [r7, #8]
 800258e:	e00b      	b.n	80025a8 <HAL_ADC_Init+0x16c>
        /* ADC regular group discontinuous was intended to be enabled,        */
        /* but ADC regular group modes continuous and sequencer discontinuous */
        /* cannot be enabled simultaneously.                                  */
        
        /* Update ADC state machine to error */
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8002590:	687b      	ldr	r3, [r7, #4]
 8002592:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002594:	2220      	movs	r2, #32
 8002596:	431a      	orrs	r2, r3
 8002598:	687b      	ldr	r3, [r7, #4]
 800259a:	639a      	str	r2, [r3, #56]	; 0x38
        
        /* Set ADC error code to ADC IP internal error */
        SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800259c:	687b      	ldr	r3, [r7, #4]
 800259e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80025a0:	2201      	movs	r2, #1
 80025a2:	431a      	orrs	r2, r3
 80025a4:	687b      	ldr	r3, [r7, #4]
 80025a6:	63da      	str	r2, [r3, #60]	; 0x3c
    /* Enable external trigger if trigger selection is different of software  */
    /* start.                                                                 */
    /* Note: This configuration keeps the hardware feature of parameter       */
    /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
    /*       software start.                                                  */
    if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 80025a8:	687b      	ldr	r3, [r7, #4]
 80025aa:	69da      	ldr	r2, [r3, #28]
 80025ac:	23c2      	movs	r3, #194	; 0xc2
 80025ae:	33ff      	adds	r3, #255	; 0xff
 80025b0:	429a      	cmp	r2, r3
 80025b2:	d007      	beq.n	80025c4 <HAL_ADC_Init+0x188>
    {
      tmpCFGR1 |= ( hadc->Init.ExternalTrigConv    |
 80025b4:	687b      	ldr	r3, [r7, #4]
 80025b6:	69da      	ldr	r2, [r3, #28]
                    hadc->Init.ExternalTrigConvEdge );
 80025b8:	687b      	ldr	r3, [r7, #4]
 80025ba:	6a1b      	ldr	r3, [r3, #32]
      tmpCFGR1 |= ( hadc->Init.ExternalTrigConv    |
 80025bc:	4313      	orrs	r3, r2
 80025be:	68ba      	ldr	r2, [r7, #8]
 80025c0:	4313      	orrs	r3, r2
 80025c2:	60bb      	str	r3, [r7, #8]
    }
    
    /* Update ADC configuration register with previous settings */
    hadc->Instance->CFGR1 |= tmpCFGR1;
 80025c4:	687b      	ldr	r3, [r7, #4]
 80025c6:	681b      	ldr	r3, [r3, #0]
 80025c8:	68d9      	ldr	r1, [r3, #12]
 80025ca:	687b      	ldr	r3, [r7, #4]
 80025cc:	681b      	ldr	r3, [r3, #0]
 80025ce:	68ba      	ldr	r2, [r7, #8]
 80025d0:	430a      	orrs	r2, r1
 80025d2:	60da      	str	r2, [r3, #12]
    /* Management of parameters "SamplingTimeCommon" and "SamplingTime"       */
    /* (obsolete): sampling time set in this function if parameter            */
    /*  "SamplingTimeCommon" has been set to a valid sampling time.           */
    /* Otherwise, sampling time is set into ADC channel initialization        */
    /* structure with parameter "SamplingTime" (obsolete).                    */
    if (IS_ADC_SAMPLE_TIME(hadc->Init.SamplingTimeCommon))
 80025d4:	687b      	ldr	r3, [r7, #4]
 80025d6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80025d8:	2380      	movs	r3, #128	; 0x80
 80025da:	055b      	lsls	r3, r3, #21
 80025dc:	429a      	cmp	r2, r3
 80025de:	d01b      	beq.n	8002618 <HAL_ADC_Init+0x1dc>
 80025e0:	687b      	ldr	r3, [r7, #4]
 80025e2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80025e4:	2b01      	cmp	r3, #1
 80025e6:	d017      	beq.n	8002618 <HAL_ADC_Init+0x1dc>
 80025e8:	687b      	ldr	r3, [r7, #4]
 80025ea:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80025ec:	2b02      	cmp	r3, #2
 80025ee:	d013      	beq.n	8002618 <HAL_ADC_Init+0x1dc>
 80025f0:	687b      	ldr	r3, [r7, #4]
 80025f2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80025f4:	2b03      	cmp	r3, #3
 80025f6:	d00f      	beq.n	8002618 <HAL_ADC_Init+0x1dc>
 80025f8:	687b      	ldr	r3, [r7, #4]
 80025fa:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80025fc:	2b04      	cmp	r3, #4
 80025fe:	d00b      	beq.n	8002618 <HAL_ADC_Init+0x1dc>
 8002600:	687b      	ldr	r3, [r7, #4]
 8002602:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002604:	2b05      	cmp	r3, #5
 8002606:	d007      	beq.n	8002618 <HAL_ADC_Init+0x1dc>
 8002608:	687b      	ldr	r3, [r7, #4]
 800260a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800260c:	2b06      	cmp	r3, #6
 800260e:	d003      	beq.n	8002618 <HAL_ADC_Init+0x1dc>
 8002610:	687b      	ldr	r3, [r7, #4]
 8002612:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002614:	2b07      	cmp	r3, #7
 8002616:	d112      	bne.n	800263e <HAL_ADC_Init+0x202>
    {
      /* Channel sampling time configuration */
      /* Clear the old sample time */
      hadc->Instance->SMPR &= ~(ADC_SMPR_SMP);
 8002618:	687b      	ldr	r3, [r7, #4]
 800261a:	681b      	ldr	r3, [r3, #0]
 800261c:	695a      	ldr	r2, [r3, #20]
 800261e:	687b      	ldr	r3, [r7, #4]
 8002620:	681b      	ldr	r3, [r3, #0]
 8002622:	2107      	movs	r1, #7
 8002624:	438a      	bics	r2, r1
 8002626:	615a      	str	r2, [r3, #20]
      
      /* Set the new sample time */
      hadc->Instance->SMPR |= ADC_SMPR_SET(hadc->Init.SamplingTimeCommon);
 8002628:	687b      	ldr	r3, [r7, #4]
 800262a:	681b      	ldr	r3, [r3, #0]
 800262c:	6959      	ldr	r1, [r3, #20]
 800262e:	687b      	ldr	r3, [r7, #4]
 8002630:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002632:	2207      	movs	r2, #7
 8002634:	401a      	ands	r2, r3
 8002636:	687b      	ldr	r3, [r7, #4]
 8002638:	681b      	ldr	r3, [r3, #0]
 800263a:	430a      	orrs	r2, r1
 800263c:	615a      	str	r2, [r3, #20]
    /* Check back that ADC registers have effectively been configured to      */
    /* ensure of no potential problem of ADC core IP clocking.                */
    /* Check through register CFGR1 (excluding analog watchdog configuration: */
    /* set into separate dedicated function, and bits of ADC resolution set   */
    /* out of temporary variable 'tmpCFGR1').                                 */
    if ((hadc->Instance->CFGR1 & ~(ADC_CFGR1_AWDCH | ADC_CFGR1_AWDEN | ADC_CFGR1_AWDSGL | ADC_CFGR1_RES))
 800263e:	687b      	ldr	r3, [r7, #4]
 8002640:	681b      	ldr	r3, [r3, #0]
 8002642:	68db      	ldr	r3, [r3, #12]
 8002644:	4a1c      	ldr	r2, [pc, #112]	; (80026b8 <HAL_ADC_Init+0x27c>)
 8002646:	4013      	ands	r3, r2
 8002648:	68ba      	ldr	r2, [r7, #8]
 800264a:	429a      	cmp	r2, r3
 800264c:	d10b      	bne.n	8002666 <HAL_ADC_Init+0x22a>
         == tmpCFGR1)
    {
      /* Set ADC error code to none */
      ADC_CLEAR_ERRORCODE(hadc);
 800264e:	687b      	ldr	r3, [r7, #4]
 8002650:	2200      	movs	r2, #0
 8002652:	63da      	str	r2, [r3, #60]	; 0x3c
      
      /* Set the ADC state */
      ADC_STATE_CLR_SET(hadc->State,
 8002654:	687b      	ldr	r3, [r7, #4]
 8002656:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002658:	2203      	movs	r2, #3
 800265a:	4393      	bics	r3, r2
 800265c:	2201      	movs	r2, #1
 800265e:	431a      	orrs	r2, r3
 8002660:	687b      	ldr	r3, [r7, #4]
 8002662:	639a      	str	r2, [r3, #56]	; 0x38
    if ((hadc->Instance->CFGR1 & ~(ADC_CFGR1_AWDCH | ADC_CFGR1_AWDEN | ADC_CFGR1_AWDSGL | ADC_CFGR1_RES))
 8002664:	e01c      	b.n	80026a0 <HAL_ADC_Init+0x264>
                        HAL_ADC_STATE_READY);
    }
    else
    {
      /* Update ADC state machine to error */
      ADC_STATE_CLR_SET(hadc->State,
 8002666:	687b      	ldr	r3, [r7, #4]
 8002668:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800266a:	2212      	movs	r2, #18
 800266c:	4393      	bics	r3, r2
 800266e:	2210      	movs	r2, #16
 8002670:	431a      	orrs	r2, r3
 8002672:	687b      	ldr	r3, [r7, #4]
 8002674:	639a      	str	r2, [r3, #56]	; 0x38
                        HAL_ADC_STATE_BUSY_INTERNAL,
                        HAL_ADC_STATE_ERROR_INTERNAL);
      
      /* Set ADC error code to ADC IP internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8002676:	687b      	ldr	r3, [r7, #4]
 8002678:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800267a:	2201      	movs	r2, #1
 800267c:	431a      	orrs	r2, r3
 800267e:	687b      	ldr	r3, [r7, #4]
 8002680:	63da      	str	r2, [r3, #60]	; 0x3c
      
      tmp_hal_status = HAL_ERROR;
 8002682:	230f      	movs	r3, #15
 8002684:	18fb      	adds	r3, r7, r3
 8002686:	2201      	movs	r2, #1
 8002688:	701a      	strb	r2, [r3, #0]
    if ((hadc->Instance->CFGR1 & ~(ADC_CFGR1_AWDCH | ADC_CFGR1_AWDEN | ADC_CFGR1_AWDSGL | ADC_CFGR1_RES))
 800268a:	e009      	b.n	80026a0 <HAL_ADC_Init+0x264>
  
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800268c:	687b      	ldr	r3, [r7, #4]
 800268e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002690:	2210      	movs	r2, #16
 8002692:	431a      	orrs	r2, r3
 8002694:	687b      	ldr	r3, [r7, #4]
 8002696:	639a      	str	r2, [r3, #56]	; 0x38
        
    tmp_hal_status = HAL_ERROR;
 8002698:	230f      	movs	r3, #15
 800269a:	18fb      	adds	r3, r7, r3
 800269c:	2201      	movs	r2, #1
 800269e:	701a      	strb	r2, [r3, #0]
  }
  
  /* Return function status */
  return tmp_hal_status;
 80026a0:	230f      	movs	r3, #15
 80026a2:	18fb      	adds	r3, r7, r3
 80026a4:	781b      	ldrb	r3, [r3, #0]
}
 80026a6:	0018      	movs	r0, r3
 80026a8:	46bd      	mov	sp, r7
 80026aa:	b004      	add	sp, #16
 80026ac:	bd80      	pop	{r7, pc}
 80026ae:	46c0      	nop			; (mov r8, r8)
 80026b0:	fffffefd 	.word	0xfffffefd
 80026b4:	fffe0219 	.word	0xfffe0219
 80026b8:	833fffe7 	.word	0x833fffe7

080026bc <HAL_ADC_Start>:
  *         Interruptions enabled in this function: None.
  * @param  hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Start(ADC_HandleTypeDef* hadc)
{
 80026bc:	b590      	push	{r4, r7, lr}
 80026be:	b085      	sub	sp, #20
 80026c0:	af00      	add	r7, sp, #0
 80026c2:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80026c4:	230f      	movs	r3, #15
 80026c6:	18fb      	adds	r3, r7, r3
 80026c8:	2200      	movs	r2, #0
 80026ca:	701a      	strb	r2, [r3, #0]

  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  /* Perform ADC enable and conversion start if no conversion is on going */
  if (ADC_IS_CONVERSION_ONGOING_REGULAR(hadc) == RESET)
 80026cc:	687b      	ldr	r3, [r7, #4]
 80026ce:	681b      	ldr	r3, [r3, #0]
 80026d0:	689b      	ldr	r3, [r3, #8]
 80026d2:	2204      	movs	r2, #4
 80026d4:	4013      	ands	r3, r2
 80026d6:	d138      	bne.n	800274a <HAL_ADC_Start+0x8e>
  {
    /* Process locked */
    __HAL_LOCK(hadc);
 80026d8:	687b      	ldr	r3, [r7, #4]
 80026da:	2234      	movs	r2, #52	; 0x34
 80026dc:	5c9b      	ldrb	r3, [r3, r2]
 80026de:	2b01      	cmp	r3, #1
 80026e0:	d101      	bne.n	80026e6 <HAL_ADC_Start+0x2a>
 80026e2:	2302      	movs	r3, #2
 80026e4:	e038      	b.n	8002758 <HAL_ADC_Start+0x9c>
 80026e6:	687b      	ldr	r3, [r7, #4]
 80026e8:	2234      	movs	r2, #52	; 0x34
 80026ea:	2101      	movs	r1, #1
 80026ec:	5499      	strb	r1, [r3, r2]
      
    /* Enable the ADC peripheral */
    /* If low power mode AutoPowerOff is enabled, power-on/off phases are     */
    /* performed automatically by hardware.                                   */
    if (hadc->Init.LowPowerAutoPowerOff != ENABLE)
 80026ee:	687b      	ldr	r3, [r7, #4]
 80026f0:	7e5b      	ldrb	r3, [r3, #25]
 80026f2:	2b01      	cmp	r3, #1
 80026f4:	d007      	beq.n	8002706 <HAL_ADC_Start+0x4a>
    {
      tmp_hal_status = ADC_Enable(hadc);
 80026f6:	230f      	movs	r3, #15
 80026f8:	18fc      	adds	r4, r7, r3
 80026fa:	687b      	ldr	r3, [r7, #4]
 80026fc:	0018      	movs	r0, r3
 80026fe:	f000 f9e3 	bl	8002ac8 <ADC_Enable>
 8002702:	0003      	movs	r3, r0
 8002704:	7023      	strb	r3, [r4, #0]
    }
    
    /* Start conversion if ADC is effectively enabled */
    if (tmp_hal_status == HAL_OK)
 8002706:	230f      	movs	r3, #15
 8002708:	18fb      	adds	r3, r7, r3
 800270a:	781b      	ldrb	r3, [r3, #0]
 800270c:	2b00      	cmp	r3, #0
 800270e:	d120      	bne.n	8002752 <HAL_ADC_Start+0x96>
    {
      /* Set ADC state                                                        */
      /* - Clear state bitfield related to regular group conversion results   */
      /* - Set state bitfield related to regular operation                    */
      ADC_STATE_CLR_SET(hadc->State,
 8002710:	687b      	ldr	r3, [r7, #4]
 8002712:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002714:	4a12      	ldr	r2, [pc, #72]	; (8002760 <HAL_ADC_Start+0xa4>)
 8002716:	4013      	ands	r3, r2
 8002718:	2280      	movs	r2, #128	; 0x80
 800271a:	0052      	lsls	r2, r2, #1
 800271c:	431a      	orrs	r2, r3
 800271e:	687b      	ldr	r3, [r7, #4]
 8002720:	639a      	str	r2, [r3, #56]	; 0x38
                        HAL_ADC_STATE_READY | HAL_ADC_STATE_REG_EOC | HAL_ADC_STATE_REG_OVR | HAL_ADC_STATE_REG_EOSMP,
                        HAL_ADC_STATE_REG_BUSY);
      
      /* Reset ADC all error code fields */
      ADC_CLEAR_ERRORCODE(hadc);
 8002722:	687b      	ldr	r3, [r7, #4]
 8002724:	2200      	movs	r2, #0
 8002726:	63da      	str	r2, [r3, #60]	; 0x3c
      
      /* Process unlocked */
      /* Unlock before starting ADC conversions: in case of potential         */
      /* interruption, to let the process to ADC IRQ Handler.                 */
      __HAL_UNLOCK(hadc);
 8002728:	687b      	ldr	r3, [r7, #4]
 800272a:	2234      	movs	r2, #52	; 0x34
 800272c:	2100      	movs	r1, #0
 800272e:	5499      	strb	r1, [r3, r2]
      
      /* Clear regular group conversion flag and overrun flag */
      /* (To ensure of no unknown state from potential previous ADC           */
      /* operations)                                                          */
      __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS | ADC_FLAG_OVR));
 8002730:	687b      	ldr	r3, [r7, #4]
 8002732:	681b      	ldr	r3, [r3, #0]
 8002734:	221c      	movs	r2, #28
 8002736:	601a      	str	r2, [r3, #0]
      
      /* Enable conversion of regular group.                                  */
      /* If software start has been selected, conversion starts immediately.  */
      /* If external trigger has been selected, conversion will start at next */
      /* trigger event.                                                       */
      hadc->Instance->CR |= ADC_CR_ADSTART;
 8002738:	687b      	ldr	r3, [r7, #4]
 800273a:	681b      	ldr	r3, [r3, #0]
 800273c:	689a      	ldr	r2, [r3, #8]
 800273e:	687b      	ldr	r3, [r7, #4]
 8002740:	681b      	ldr	r3, [r3, #0]
 8002742:	2104      	movs	r1, #4
 8002744:	430a      	orrs	r2, r1
 8002746:	609a      	str	r2, [r3, #8]
 8002748:	e003      	b.n	8002752 <HAL_ADC_Start+0x96>
    }
  }
  else
  {
    tmp_hal_status = HAL_BUSY;
 800274a:	230f      	movs	r3, #15
 800274c:	18fb      	adds	r3, r7, r3
 800274e:	2202      	movs	r2, #2
 8002750:	701a      	strb	r2, [r3, #0]
  }
  
  /* Return function status */
  return tmp_hal_status;
 8002752:	230f      	movs	r3, #15
 8002754:	18fb      	adds	r3, r7, r3
 8002756:	781b      	ldrb	r3, [r3, #0]
}
 8002758:	0018      	movs	r0, r3
 800275a:	46bd      	mov	sp, r7
 800275c:	b005      	add	sp, #20
 800275e:	bd90      	pop	{r4, r7, pc}
 8002760:	fffff0fe 	.word	0xfffff0fe

08002764 <HAL_ADC_PollForConversion>:
  * @param  hadc ADC handle
  * @param  Timeout Timeout value in millisecond.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_PollForConversion(ADC_HandleTypeDef* hadc, uint32_t Timeout)
{
 8002764:	b580      	push	{r7, lr}
 8002766:	b084      	sub	sp, #16
 8002768:	af00      	add	r7, sp, #0
 800276a:	6078      	str	r0, [r7, #4]
 800276c:	6039      	str	r1, [r7, #0]
 
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  /* If end of conversion selected to end of sequence */
  if (hadc->Init.EOCSelection == ADC_EOC_SEQ_CONV)
 800276e:	687b      	ldr	r3, [r7, #4]
 8002770:	695b      	ldr	r3, [r3, #20]
 8002772:	2b08      	cmp	r3, #8
 8002774:	d102      	bne.n	800277c <HAL_ADC_PollForConversion+0x18>
  {
    tmp_Flag_EOC = ADC_FLAG_EOS;
 8002776:	2308      	movs	r3, #8
 8002778:	60fb      	str	r3, [r7, #12]
 800277a:	e014      	b.n	80027a6 <HAL_ADC_PollForConversion+0x42>
    /* each conversion:                                                       */
    /* Particular case is ADC configured in DMA mode and ADC sequencer with   */
    /* several ranks and polling for end of each conversion.                  */
    /* For code simplicity sake, this particular case is generalized to       */
    /* ADC configured in DMA mode and and polling for end of each conversion. */
    if (HAL_IS_BIT_SET(hadc->Instance->CFGR1, ADC_CFGR1_DMAEN))
 800277c:	687b      	ldr	r3, [r7, #4]
 800277e:	681b      	ldr	r3, [r3, #0]
 8002780:	68db      	ldr	r3, [r3, #12]
 8002782:	2201      	movs	r2, #1
 8002784:	4013      	ands	r3, r2
 8002786:	2b01      	cmp	r3, #1
 8002788:	d10b      	bne.n	80027a2 <HAL_ADC_PollForConversion+0x3e>
    {
      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 800278a:	687b      	ldr	r3, [r7, #4]
 800278c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800278e:	2220      	movs	r2, #32
 8002790:	431a      	orrs	r2, r3
 8002792:	687b      	ldr	r3, [r7, #4]
 8002794:	639a      	str	r2, [r3, #56]	; 0x38
      
      /* Process unlocked */
      __HAL_UNLOCK(hadc);
 8002796:	687b      	ldr	r3, [r7, #4]
 8002798:	2234      	movs	r2, #52	; 0x34
 800279a:	2100      	movs	r1, #0
 800279c:	5499      	strb	r1, [r3, r2]
      
      return HAL_ERROR;
 800279e:	2301      	movs	r3, #1
 80027a0:	e071      	b.n	8002886 <HAL_ADC_PollForConversion+0x122>
    }
    else
    {
      tmp_Flag_EOC = (ADC_FLAG_EOC | ADC_FLAG_EOS);
 80027a2:	230c      	movs	r3, #12
 80027a4:	60fb      	str	r3, [r7, #12]
    }
  }
  
  /* Get tick count */
  tickstart = HAL_GetTick();
 80027a6:	f7ff fe3f 	bl	8002428 <HAL_GetTick>
 80027aa:	0003      	movs	r3, r0
 80027ac:	60bb      	str	r3, [r7, #8]
  
  /* Wait until End of Conversion flag is raised */
  while(HAL_IS_BIT_CLR(hadc->Instance->ISR, tmp_Flag_EOC))
 80027ae:	e01f      	b.n	80027f0 <HAL_ADC_PollForConversion+0x8c>
  {
    /* Check if timeout is disabled (set to infinite wait) */
    if(Timeout != HAL_MAX_DELAY)
 80027b0:	683b      	ldr	r3, [r7, #0]
 80027b2:	3301      	adds	r3, #1
 80027b4:	d01c      	beq.n	80027f0 <HAL_ADC_PollForConversion+0x8c>
    {
      if((Timeout == 0) || ((HAL_GetTick()-tickstart) > Timeout))
 80027b6:	683b      	ldr	r3, [r7, #0]
 80027b8:	2b00      	cmp	r3, #0
 80027ba:	d007      	beq.n	80027cc <HAL_ADC_PollForConversion+0x68>
 80027bc:	f7ff fe34 	bl	8002428 <HAL_GetTick>
 80027c0:	0002      	movs	r2, r0
 80027c2:	68bb      	ldr	r3, [r7, #8]
 80027c4:	1ad3      	subs	r3, r2, r3
 80027c6:	683a      	ldr	r2, [r7, #0]
 80027c8:	429a      	cmp	r2, r3
 80027ca:	d211      	bcs.n	80027f0 <HAL_ADC_PollForConversion+0x8c>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if(HAL_IS_BIT_CLR(hadc->Instance->ISR, tmp_Flag_EOC))
 80027cc:	687b      	ldr	r3, [r7, #4]
 80027ce:	681b      	ldr	r3, [r3, #0]
 80027d0:	681b      	ldr	r3, [r3, #0]
 80027d2:	68fa      	ldr	r2, [r7, #12]
 80027d4:	4013      	ands	r3, r2
 80027d6:	d10b      	bne.n	80027f0 <HAL_ADC_PollForConversion+0x8c>
        {
          /* Update ADC state machine to timeout */
          SET_BIT(hadc->State, HAL_ADC_STATE_TIMEOUT);
 80027d8:	687b      	ldr	r3, [r7, #4]
 80027da:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80027dc:	2204      	movs	r2, #4
 80027de:	431a      	orrs	r2, r3
 80027e0:	687b      	ldr	r3, [r7, #4]
 80027e2:	639a      	str	r2, [r3, #56]	; 0x38

          /* Process unlocked */
          __HAL_UNLOCK(hadc);
 80027e4:	687b      	ldr	r3, [r7, #4]
 80027e6:	2234      	movs	r2, #52	; 0x34
 80027e8:	2100      	movs	r1, #0
 80027ea:	5499      	strb	r1, [r3, r2]

          return HAL_TIMEOUT;
 80027ec:	2303      	movs	r3, #3
 80027ee:	e04a      	b.n	8002886 <HAL_ADC_PollForConversion+0x122>
  while(HAL_IS_BIT_CLR(hadc->Instance->ISR, tmp_Flag_EOC))
 80027f0:	687b      	ldr	r3, [r7, #4]
 80027f2:	681b      	ldr	r3, [r3, #0]
 80027f4:	681b      	ldr	r3, [r3, #0]
 80027f6:	68fa      	ldr	r2, [r7, #12]
 80027f8:	4013      	ands	r3, r2
 80027fa:	d0d9      	beq.n	80027b0 <HAL_ADC_PollForConversion+0x4c>
      }
    }
  }
    
  /* Update ADC state machine */
  SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 80027fc:	687b      	ldr	r3, [r7, #4]
 80027fe:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002800:	2280      	movs	r2, #128	; 0x80
 8002802:	0092      	lsls	r2, r2, #2
 8002804:	431a      	orrs	r2, r3
 8002806:	687b      	ldr	r3, [r7, #4]
 8002808:	639a      	str	r2, [r3, #56]	; 0x38
  
  /* Determine whether any further conversion upcoming on group regular       */
  /* by external trigger, continuous mode or scan sequence on going.          */
  if(ADC_IS_SOFTWARE_START_REGULAR(hadc)        && 
 800280a:	687b      	ldr	r3, [r7, #4]
 800280c:	681b      	ldr	r3, [r3, #0]
 800280e:	68da      	ldr	r2, [r3, #12]
 8002810:	23c0      	movs	r3, #192	; 0xc0
 8002812:	011b      	lsls	r3, r3, #4
 8002814:	4013      	ands	r3, r2
 8002816:	d12d      	bne.n	8002874 <HAL_ADC_PollForConversion+0x110>
     (hadc->Init.ContinuousConvMode == DISABLE)   )
 8002818:	687b      	ldr	r3, [r7, #4]
 800281a:	7e9b      	ldrb	r3, [r3, #26]
  if(ADC_IS_SOFTWARE_START_REGULAR(hadc)        && 
 800281c:	2b00      	cmp	r3, #0
 800281e:	d129      	bne.n	8002874 <HAL_ADC_PollForConversion+0x110>
  {
    /* If End of Sequence is reached, disable interrupts */
    if( __HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOS) )
 8002820:	687b      	ldr	r3, [r7, #4]
 8002822:	681b      	ldr	r3, [r3, #0]
 8002824:	681b      	ldr	r3, [r3, #0]
 8002826:	2208      	movs	r2, #8
 8002828:	4013      	ands	r3, r2
 800282a:	2b08      	cmp	r3, #8
 800282c:	d122      	bne.n	8002874 <HAL_ADC_PollForConversion+0x110>
    {
      /* Allowed to modify bits ADC_IT_EOC/ADC_IT_EOS only if bit             */
      /* ADSTART==0 (no conversion on going)                                  */
      if (ADC_IS_CONVERSION_ONGOING_REGULAR(hadc) == RESET)
 800282e:	687b      	ldr	r3, [r7, #4]
 8002830:	681b      	ldr	r3, [r3, #0]
 8002832:	689b      	ldr	r3, [r3, #8]
 8002834:	2204      	movs	r2, #4
 8002836:	4013      	ands	r3, r2
 8002838:	d110      	bne.n	800285c <HAL_ADC_PollForConversion+0xf8>
      {
        /* Disable ADC end of single conversion interrupt on group regular */
        /* Note: Overrun interrupt was enabled with EOC interrupt in          */
        /* HAL_Start_IT(), but is not disabled here because can be used       */
        /* by overrun IRQ process below.                                      */
        __HAL_ADC_DISABLE_IT(hadc, ADC_IT_EOC | ADC_IT_EOS);
 800283a:	687b      	ldr	r3, [r7, #4]
 800283c:	681b      	ldr	r3, [r3, #0]
 800283e:	685a      	ldr	r2, [r3, #4]
 8002840:	687b      	ldr	r3, [r7, #4]
 8002842:	681b      	ldr	r3, [r3, #0]
 8002844:	210c      	movs	r1, #12
 8002846:	438a      	bics	r2, r1
 8002848:	605a      	str	r2, [r3, #4]
        
        /* Set ADC state */
        ADC_STATE_CLR_SET(hadc->State,
 800284a:	687b      	ldr	r3, [r7, #4]
 800284c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800284e:	4a10      	ldr	r2, [pc, #64]	; (8002890 <HAL_ADC_PollForConversion+0x12c>)
 8002850:	4013      	ands	r3, r2
 8002852:	2201      	movs	r2, #1
 8002854:	431a      	orrs	r2, r3
 8002856:	687b      	ldr	r3, [r7, #4]
 8002858:	639a      	str	r2, [r3, #56]	; 0x38
 800285a:	e00b      	b.n	8002874 <HAL_ADC_PollForConversion+0x110>
                          HAL_ADC_STATE_READY);
      }
      else
      {
        /* Change ADC state to error state */
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 800285c:	687b      	ldr	r3, [r7, #4]
 800285e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002860:	2220      	movs	r2, #32
 8002862:	431a      	orrs	r2, r3
 8002864:	687b      	ldr	r3, [r7, #4]
 8002866:	639a      	str	r2, [r3, #56]	; 0x38
        
        /* Set ADC error code to ADC IP internal error */
        SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8002868:	687b      	ldr	r3, [r7, #4]
 800286a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800286c:	2201      	movs	r2, #1
 800286e:	431a      	orrs	r2, r3
 8002870:	687b      	ldr	r3, [r7, #4]
 8002872:	63da      	str	r2, [r3, #60]	; 0x3c
  }
  
  /* Clear end of conversion flag of regular group if low power feature       */
  /* "LowPowerAutoWait " is disabled, to not interfere with this feature      */
  /* until data register is read using function HAL_ADC_GetValue().           */
  if (hadc->Init.LowPowerAutoWait == DISABLE)
 8002874:	687b      	ldr	r3, [r7, #4]
 8002876:	7e1b      	ldrb	r3, [r3, #24]
 8002878:	2b00      	cmp	r3, #0
 800287a:	d103      	bne.n	8002884 <HAL_ADC_PollForConversion+0x120>
  {
    /* Clear regular group conversion flag */
    __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS));
 800287c:	687b      	ldr	r3, [r7, #4]
 800287e:	681b      	ldr	r3, [r3, #0]
 8002880:	220c      	movs	r2, #12
 8002882:	601a      	str	r2, [r3, #0]
  }
  
  /* Return ADC state */
  return HAL_OK;
 8002884:	2300      	movs	r3, #0
}
 8002886:	0018      	movs	r0, r3
 8002888:	46bd      	mov	sp, r7
 800288a:	b004      	add	sp, #16
 800288c:	bd80      	pop	{r7, pc}
 800288e:	46c0      	nop			; (mov r8, r8)
 8002890:	fffffefe 	.word	0xfffffefe

08002894 <HAL_ADC_GetValue>:
  *         or @ref __HAL_ADC_CLEAR_FLAG(&hadc, ADC_FLAG_EOS).
  * @param  hadc ADC handle
  * @retval ADC group regular conversion data
  */
uint32_t HAL_ADC_GetValue(ADC_HandleTypeDef* hadc)
{
 8002894:	b580      	push	{r7, lr}
 8002896:	b082      	sub	sp, #8
 8002898:	af00      	add	r7, sp, #0
 800289a:	6078      	str	r0, [r7, #4]

  /* Note: EOC flag is not cleared here by software because automatically     */
  /*       cleared by hardware when reading register DR.                      */
  
  /* Return ADC converted value */ 
  return hadc->Instance->DR;
 800289c:	687b      	ldr	r3, [r7, #4]
 800289e:	681b      	ldr	r3, [r3, #0]
 80028a0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
}
 80028a2:	0018      	movs	r0, r3
 80028a4:	46bd      	mov	sp, r7
 80028a6:	b002      	add	sp, #8
 80028a8:	bd80      	pop	{r7, pc}
	...

080028ac <HAL_ADC_ConfigChannel>:
  * @param  hadc ADC handle
  * @param  sConfig Structure of ADC channel for regular group.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{
 80028ac:	b580      	push	{r7, lr}
 80028ae:	b084      	sub	sp, #16
 80028b0:	af00      	add	r7, sp, #0
 80028b2:	6078      	str	r0, [r7, #4]
 80028b4:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80028b6:	230f      	movs	r3, #15
 80028b8:	18fb      	adds	r3, r7, r3
 80028ba:	2200      	movs	r2, #0
 80028bc:	701a      	strb	r2, [r3, #0]
  __IO uint32_t wait_loop_index = 0U;
 80028be:	2300      	movs	r3, #0
 80028c0:	60bb      	str	r3, [r7, #8]
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_RANK(sConfig->Rank));
  
  if (! IS_ADC_SAMPLE_TIME(hadc->Init.SamplingTimeCommon))
 80028c2:	687b      	ldr	r3, [r7, #4]
 80028c4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80028c6:	2380      	movs	r3, #128	; 0x80
 80028c8:	055b      	lsls	r3, r3, #21
 80028ca:	429a      	cmp	r2, r3
 80028cc:	d011      	beq.n	80028f2 <HAL_ADC_ConfigChannel+0x46>
 80028ce:	687b      	ldr	r3, [r7, #4]
 80028d0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80028d2:	2b01      	cmp	r3, #1
 80028d4:	d00d      	beq.n	80028f2 <HAL_ADC_ConfigChannel+0x46>
 80028d6:	687b      	ldr	r3, [r7, #4]
 80028d8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80028da:	2b02      	cmp	r3, #2
 80028dc:	d009      	beq.n	80028f2 <HAL_ADC_ConfigChannel+0x46>
 80028de:	687b      	ldr	r3, [r7, #4]
 80028e0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80028e2:	2b03      	cmp	r3, #3
 80028e4:	d005      	beq.n	80028f2 <HAL_ADC_ConfigChannel+0x46>
 80028e6:	687b      	ldr	r3, [r7, #4]
 80028e8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80028ea:	2b04      	cmp	r3, #4
 80028ec:	d001      	beq.n	80028f2 <HAL_ADC_ConfigChannel+0x46>
 80028ee:	687b      	ldr	r3, [r7, #4]
 80028f0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
  {
    assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));
  }
  
  /* Process locked */
  __HAL_LOCK(hadc);
 80028f2:	687b      	ldr	r3, [r7, #4]
 80028f4:	2234      	movs	r2, #52	; 0x34
 80028f6:	5c9b      	ldrb	r3, [r3, r2]
 80028f8:	2b01      	cmp	r3, #1
 80028fa:	d101      	bne.n	8002900 <HAL_ADC_ConfigChannel+0x54>
 80028fc:	2302      	movs	r3, #2
 80028fe:	e0d0      	b.n	8002aa2 <HAL_ADC_ConfigChannel+0x1f6>
 8002900:	687b      	ldr	r3, [r7, #4]
 8002902:	2234      	movs	r2, #52	; 0x34
 8002904:	2101      	movs	r1, #1
 8002906:	5499      	strb	r1, [r3, r2]
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Channel number                                                        */
  /*  - Channel sampling time                                                 */
  /*  - Management of internal measurement channels: VrefInt/TempSensor/Vbat  */
  if (ADC_IS_CONVERSION_ONGOING_REGULAR(hadc) == RESET)
 8002908:	687b      	ldr	r3, [r7, #4]
 800290a:	681b      	ldr	r3, [r3, #0]
 800290c:	689b      	ldr	r3, [r3, #8]
 800290e:	2204      	movs	r2, #4
 8002910:	4013      	ands	r3, r2
 8002912:	d000      	beq.n	8002916 <HAL_ADC_ConfigChannel+0x6a>
 8002914:	e0b4      	b.n	8002a80 <HAL_ADC_ConfigChannel+0x1d4>
  {
    /* Configure channel: depending on rank setting, add it or remove it from */
    /* ADC conversion sequencer.                                              */
    if (sConfig->Rank != ADC_RANK_NONE)
 8002916:	683b      	ldr	r3, [r7, #0]
 8002918:	685b      	ldr	r3, [r3, #4]
 800291a:	4a64      	ldr	r2, [pc, #400]	; (8002aac <HAL_ADC_ConfigChannel+0x200>)
 800291c:	4293      	cmp	r3, r2
 800291e:	d100      	bne.n	8002922 <HAL_ADC_ConfigChannel+0x76>
 8002920:	e082      	b.n	8002a28 <HAL_ADC_ConfigChannel+0x17c>
    {
      /* Regular sequence configuration */
      /* Set the channel selection register from the selected channel */
      hadc->Instance->CHSELR |= ADC_CHSELR_CHANNEL(sConfig->Channel);
 8002922:	687b      	ldr	r3, [r7, #4]
 8002924:	681b      	ldr	r3, [r3, #0]
 8002926:	6a99      	ldr	r1, [r3, #40]	; 0x28
 8002928:	683b      	ldr	r3, [r7, #0]
 800292a:	681b      	ldr	r3, [r3, #0]
 800292c:	2201      	movs	r2, #1
 800292e:	409a      	lsls	r2, r3
 8002930:	687b      	ldr	r3, [r7, #4]
 8002932:	681b      	ldr	r3, [r3, #0]
 8002934:	430a      	orrs	r2, r1
 8002936:	629a      	str	r2, [r3, #40]	; 0x28
      /* Channel sampling time configuration */
      /* Management of parameters "SamplingTimeCommon" and "SamplingTime"     */
      /* (obsolete): sampling time set in this function with                  */
      /* parameter "SamplingTime" (obsolete) only if not already set into     */
      /* ADC initialization structure with parameter "SamplingTimeCommon".    */
      if (! IS_ADC_SAMPLE_TIME(hadc->Init.SamplingTimeCommon))
 8002938:	687b      	ldr	r3, [r7, #4]
 800293a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800293c:	2380      	movs	r3, #128	; 0x80
 800293e:	055b      	lsls	r3, r3, #21
 8002940:	429a      	cmp	r2, r3
 8002942:	d037      	beq.n	80029b4 <HAL_ADC_ConfigChannel+0x108>
 8002944:	687b      	ldr	r3, [r7, #4]
 8002946:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002948:	2b01      	cmp	r3, #1
 800294a:	d033      	beq.n	80029b4 <HAL_ADC_ConfigChannel+0x108>
 800294c:	687b      	ldr	r3, [r7, #4]
 800294e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002950:	2b02      	cmp	r3, #2
 8002952:	d02f      	beq.n	80029b4 <HAL_ADC_ConfigChannel+0x108>
 8002954:	687b      	ldr	r3, [r7, #4]
 8002956:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002958:	2b03      	cmp	r3, #3
 800295a:	d02b      	beq.n	80029b4 <HAL_ADC_ConfigChannel+0x108>
 800295c:	687b      	ldr	r3, [r7, #4]
 800295e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002960:	2b04      	cmp	r3, #4
 8002962:	d027      	beq.n	80029b4 <HAL_ADC_ConfigChannel+0x108>
 8002964:	687b      	ldr	r3, [r7, #4]
 8002966:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002968:	2b05      	cmp	r3, #5
 800296a:	d023      	beq.n	80029b4 <HAL_ADC_ConfigChannel+0x108>
 800296c:	687b      	ldr	r3, [r7, #4]
 800296e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002970:	2b06      	cmp	r3, #6
 8002972:	d01f      	beq.n	80029b4 <HAL_ADC_ConfigChannel+0x108>
 8002974:	687b      	ldr	r3, [r7, #4]
 8002976:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002978:	2b07      	cmp	r3, #7
 800297a:	d01b      	beq.n	80029b4 <HAL_ADC_ConfigChannel+0x108>
      {
        /* Modify sampling time if needed (not needed in case of recurrence */
        /* for several channels programmed consecutively into the sequencer)  */
        if (sConfig->SamplingTime != ADC_GET_SAMPLINGTIME(hadc))
 800297c:	683b      	ldr	r3, [r7, #0]
 800297e:	689a      	ldr	r2, [r3, #8]
 8002980:	687b      	ldr	r3, [r7, #4]
 8002982:	681b      	ldr	r3, [r3, #0]
 8002984:	695b      	ldr	r3, [r3, #20]
 8002986:	2107      	movs	r1, #7
 8002988:	400b      	ands	r3, r1
 800298a:	429a      	cmp	r2, r3
 800298c:	d012      	beq.n	80029b4 <HAL_ADC_ConfigChannel+0x108>
        {
          /* Channel sampling time configuration */
          /* Clear the old sample time */
          hadc->Instance->SMPR &= ~(ADC_SMPR_SMP);
 800298e:	687b      	ldr	r3, [r7, #4]
 8002990:	681b      	ldr	r3, [r3, #0]
 8002992:	695a      	ldr	r2, [r3, #20]
 8002994:	687b      	ldr	r3, [r7, #4]
 8002996:	681b      	ldr	r3, [r3, #0]
 8002998:	2107      	movs	r1, #7
 800299a:	438a      	bics	r2, r1
 800299c:	615a      	str	r2, [r3, #20]
          
          /* Set the new sample time */
          hadc->Instance->SMPR |= ADC_SMPR_SET(sConfig->SamplingTime);
 800299e:	687b      	ldr	r3, [r7, #4]
 80029a0:	681b      	ldr	r3, [r3, #0]
 80029a2:	6959      	ldr	r1, [r3, #20]
 80029a4:	683b      	ldr	r3, [r7, #0]
 80029a6:	689b      	ldr	r3, [r3, #8]
 80029a8:	2207      	movs	r2, #7
 80029aa:	401a      	ands	r2, r3
 80029ac:	687b      	ldr	r3, [r7, #4]
 80029ae:	681b      	ldr	r3, [r3, #0]
 80029b0:	430a      	orrs	r2, r1
 80029b2:	615a      	str	r2, [r3, #20]
      /* internal measurement paths enable: If internal channel selected,     */
      /* enable dedicated internal buffers and path.                          */
      /* Note: these internal measurement paths can be disabled using         */
      /*       HAL_ADC_DeInit() or removing the channel from sequencer with   */
      /*       channel configuration parameter "Rank".                        */
      if(ADC_IS_CHANNEL_INTERNAL(sConfig->Channel))
 80029b4:	683b      	ldr	r3, [r7, #0]
 80029b6:	681b      	ldr	r3, [r3, #0]
 80029b8:	2b10      	cmp	r3, #16
 80029ba:	d007      	beq.n	80029cc <HAL_ADC_ConfigChannel+0x120>
 80029bc:	683b      	ldr	r3, [r7, #0]
 80029be:	681b      	ldr	r3, [r3, #0]
 80029c0:	2b11      	cmp	r3, #17
 80029c2:	d003      	beq.n	80029cc <HAL_ADC_ConfigChannel+0x120>
 80029c4:	683b      	ldr	r3, [r7, #0]
 80029c6:	681b      	ldr	r3, [r3, #0]
 80029c8:	2b12      	cmp	r3, #18
 80029ca:	d163      	bne.n	8002a94 <HAL_ADC_ConfigChannel+0x1e8>
      {
        /* If Channel_16 is selected, enable Temp. sensor measurement path. */
        /* If Channel_17 is selected, enable VREFINT measurement path. */
        /* If Channel_18 is selected, enable VBAT measurement path. */
        ADC->CCR |= ADC_CHANNEL_INTERNAL_PATH(sConfig->Channel);
 80029cc:	4b38      	ldr	r3, [pc, #224]	; (8002ab0 <HAL_ADC_ConfigChannel+0x204>)
 80029ce:	6819      	ldr	r1, [r3, #0]
 80029d0:	683b      	ldr	r3, [r7, #0]
 80029d2:	681b      	ldr	r3, [r3, #0]
 80029d4:	2b10      	cmp	r3, #16
 80029d6:	d009      	beq.n	80029ec <HAL_ADC_ConfigChannel+0x140>
 80029d8:	683b      	ldr	r3, [r7, #0]
 80029da:	681b      	ldr	r3, [r3, #0]
 80029dc:	2b11      	cmp	r3, #17
 80029de:	d102      	bne.n	80029e6 <HAL_ADC_ConfigChannel+0x13a>
 80029e0:	2380      	movs	r3, #128	; 0x80
 80029e2:	03db      	lsls	r3, r3, #15
 80029e4:	e004      	b.n	80029f0 <HAL_ADC_ConfigChannel+0x144>
 80029e6:	2380      	movs	r3, #128	; 0x80
 80029e8:	045b      	lsls	r3, r3, #17
 80029ea:	e001      	b.n	80029f0 <HAL_ADC_ConfigChannel+0x144>
 80029ec:	2380      	movs	r3, #128	; 0x80
 80029ee:	041b      	lsls	r3, r3, #16
 80029f0:	4a2f      	ldr	r2, [pc, #188]	; (8002ab0 <HAL_ADC_ConfigChannel+0x204>)
 80029f2:	430b      	orrs	r3, r1
 80029f4:	6013      	str	r3, [r2, #0]
        
        /* If Temp. sensor is selected, wait for stabilization delay */
        if (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 80029f6:	683b      	ldr	r3, [r7, #0]
 80029f8:	681b      	ldr	r3, [r3, #0]
 80029fa:	2b10      	cmp	r3, #16
 80029fc:	d14a      	bne.n	8002a94 <HAL_ADC_ConfigChannel+0x1e8>
        {
          /* Delay for temperature sensor stabilization time */
          /* Compute number of CPU cycles to wait for */
          wait_loop_index = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 80029fe:	4b2d      	ldr	r3, [pc, #180]	; (8002ab4 <HAL_ADC_ConfigChannel+0x208>)
 8002a00:	681b      	ldr	r3, [r3, #0]
 8002a02:	492d      	ldr	r1, [pc, #180]	; (8002ab8 <HAL_ADC_ConfigChannel+0x20c>)
 8002a04:	0018      	movs	r0, r3
 8002a06:	f7fd fb7f 	bl	8000108 <__udivsi3>
 8002a0a:	0003      	movs	r3, r0
 8002a0c:	001a      	movs	r2, r3
 8002a0e:	0013      	movs	r3, r2
 8002a10:	009b      	lsls	r3, r3, #2
 8002a12:	189b      	adds	r3, r3, r2
 8002a14:	005b      	lsls	r3, r3, #1
 8002a16:	60bb      	str	r3, [r7, #8]
          while(wait_loop_index != 0U)
 8002a18:	e002      	b.n	8002a20 <HAL_ADC_ConfigChannel+0x174>
          {
            wait_loop_index--;
 8002a1a:	68bb      	ldr	r3, [r7, #8]
 8002a1c:	3b01      	subs	r3, #1
 8002a1e:	60bb      	str	r3, [r7, #8]
          while(wait_loop_index != 0U)
 8002a20:	68bb      	ldr	r3, [r7, #8]
 8002a22:	2b00      	cmp	r3, #0
 8002a24:	d1f9      	bne.n	8002a1a <HAL_ADC_ConfigChannel+0x16e>
 8002a26:	e035      	b.n	8002a94 <HAL_ADC_ConfigChannel+0x1e8>
    }
    else
    {
      /* Regular sequence configuration */
      /* Reset the channel selection register from the selected channel */
      hadc->Instance->CHSELR &= ~ADC_CHSELR_CHANNEL(sConfig->Channel);
 8002a28:	687b      	ldr	r3, [r7, #4]
 8002a2a:	681b      	ldr	r3, [r3, #0]
 8002a2c:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8002a2e:	683b      	ldr	r3, [r7, #0]
 8002a30:	681b      	ldr	r3, [r3, #0]
 8002a32:	2101      	movs	r1, #1
 8002a34:	4099      	lsls	r1, r3
 8002a36:	000b      	movs	r3, r1
 8002a38:	43d9      	mvns	r1, r3
 8002a3a:	687b      	ldr	r3, [r7, #4]
 8002a3c:	681b      	ldr	r3, [r3, #0]
 8002a3e:	400a      	ands	r2, r1
 8002a40:	629a      	str	r2, [r3, #40]	; 0x28
      
      /* Management of internal measurement channels: VrefInt/TempSensor/Vbat */
      /* internal measurement paths disable: If internal channel selected,    */
      /* disable dedicated internal buffers and path.                         */
      if(ADC_IS_CHANNEL_INTERNAL(sConfig->Channel))
 8002a42:	683b      	ldr	r3, [r7, #0]
 8002a44:	681b      	ldr	r3, [r3, #0]
 8002a46:	2b10      	cmp	r3, #16
 8002a48:	d007      	beq.n	8002a5a <HAL_ADC_ConfigChannel+0x1ae>
 8002a4a:	683b      	ldr	r3, [r7, #0]
 8002a4c:	681b      	ldr	r3, [r3, #0]
 8002a4e:	2b11      	cmp	r3, #17
 8002a50:	d003      	beq.n	8002a5a <HAL_ADC_ConfigChannel+0x1ae>
 8002a52:	683b      	ldr	r3, [r7, #0]
 8002a54:	681b      	ldr	r3, [r3, #0]
 8002a56:	2b12      	cmp	r3, #18
 8002a58:	d11c      	bne.n	8002a94 <HAL_ADC_ConfigChannel+0x1e8>
      {
        /* If Channel_16 is selected, disable Temp. sensor measurement path. */
        /* If Channel_17 is selected, disable VREFINT measurement path. */
        /* If Channel_18 is selected, disable VBAT measurement path. */
        ADC->CCR &= ~ADC_CHANNEL_INTERNAL_PATH(sConfig->Channel);
 8002a5a:	4b15      	ldr	r3, [pc, #84]	; (8002ab0 <HAL_ADC_ConfigChannel+0x204>)
 8002a5c:	6819      	ldr	r1, [r3, #0]
 8002a5e:	683b      	ldr	r3, [r7, #0]
 8002a60:	681b      	ldr	r3, [r3, #0]
 8002a62:	2b10      	cmp	r3, #16
 8002a64:	d007      	beq.n	8002a76 <HAL_ADC_ConfigChannel+0x1ca>
 8002a66:	683b      	ldr	r3, [r7, #0]
 8002a68:	681b      	ldr	r3, [r3, #0]
 8002a6a:	2b11      	cmp	r3, #17
 8002a6c:	d101      	bne.n	8002a72 <HAL_ADC_ConfigChannel+0x1c6>
 8002a6e:	4b13      	ldr	r3, [pc, #76]	; (8002abc <HAL_ADC_ConfigChannel+0x210>)
 8002a70:	e002      	b.n	8002a78 <HAL_ADC_ConfigChannel+0x1cc>
 8002a72:	4b13      	ldr	r3, [pc, #76]	; (8002ac0 <HAL_ADC_ConfigChannel+0x214>)
 8002a74:	e000      	b.n	8002a78 <HAL_ADC_ConfigChannel+0x1cc>
 8002a76:	4b13      	ldr	r3, [pc, #76]	; (8002ac4 <HAL_ADC_ConfigChannel+0x218>)
 8002a78:	4a0d      	ldr	r2, [pc, #52]	; (8002ab0 <HAL_ADC_ConfigChannel+0x204>)
 8002a7a:	400b      	ands	r3, r1
 8002a7c:	6013      	str	r3, [r2, #0]
 8002a7e:	e009      	b.n	8002a94 <HAL_ADC_ConfigChannel+0x1e8>
  /* channel could be done on neither of the channel configuration structure  */
  /* parameters.                                                              */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8002a80:	687b      	ldr	r3, [r7, #4]
 8002a82:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002a84:	2220      	movs	r2, #32
 8002a86:	431a      	orrs	r2, r3
 8002a88:	687b      	ldr	r3, [r7, #4]
 8002a8a:	639a      	str	r2, [r3, #56]	; 0x38
    
    tmp_hal_status = HAL_ERROR;
 8002a8c:	230f      	movs	r3, #15
 8002a8e:	18fb      	adds	r3, r7, r3
 8002a90:	2201      	movs	r2, #1
 8002a92:	701a      	strb	r2, [r3, #0]
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8002a94:	687b      	ldr	r3, [r7, #4]
 8002a96:	2234      	movs	r2, #52	; 0x34
 8002a98:	2100      	movs	r1, #0
 8002a9a:	5499      	strb	r1, [r3, r2]
  
  /* Return function status */
  return tmp_hal_status;
 8002a9c:	230f      	movs	r3, #15
 8002a9e:	18fb      	adds	r3, r7, r3
 8002aa0:	781b      	ldrb	r3, [r3, #0]
}
 8002aa2:	0018      	movs	r0, r3
 8002aa4:	46bd      	mov	sp, r7
 8002aa6:	b004      	add	sp, #16
 8002aa8:	bd80      	pop	{r7, pc}
 8002aaa:	46c0      	nop			; (mov r8, r8)
 8002aac:	00001001 	.word	0x00001001
 8002ab0:	40012708 	.word	0x40012708
 8002ab4:	20000050 	.word	0x20000050
 8002ab8:	000f4240 	.word	0x000f4240
 8002abc:	ffbfffff 	.word	0xffbfffff
 8002ac0:	feffffff 	.word	0xfeffffff
 8002ac4:	ff7fffff 	.word	0xff7fffff

08002ac8 <ADC_Enable>:
  *         "if (hadc->Init.LowPowerAutoPowerOff != ENABLE)".
  * @param  hadc ADC handle
  * @retval HAL status.
  */
static HAL_StatusTypeDef ADC_Enable(ADC_HandleTypeDef* hadc)
{
 8002ac8:	b580      	push	{r7, lr}
 8002aca:	b084      	sub	sp, #16
 8002acc:	af00      	add	r7, sp, #0
 8002ace:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8002ad0:	2300      	movs	r3, #0
 8002ad2:	60fb      	str	r3, [r7, #12]
  __IO uint32_t wait_loop_index = 0U;
 8002ad4:	2300      	movs	r3, #0
 8002ad6:	60bb      	str	r3, [r7, #8]
  
  /* ADC enable and wait for ADC ready (in case of ADC is disabled or         */
  /* enabling phase not yet completed: flag ADC ready not yet set).           */
  /* Timeout implemented to not be stuck if ADC cannot be enabled (possible   */
  /* causes: ADC clock not running, ...).                                     */
  if (ADC_IS_ENABLE(hadc) == RESET)
 8002ad8:	687b      	ldr	r3, [r7, #4]
 8002ada:	681b      	ldr	r3, [r3, #0]
 8002adc:	689b      	ldr	r3, [r3, #8]
 8002ade:	2203      	movs	r2, #3
 8002ae0:	4013      	ands	r3, r2
 8002ae2:	2b01      	cmp	r3, #1
 8002ae4:	d112      	bne.n	8002b0c <ADC_Enable+0x44>
 8002ae6:	687b      	ldr	r3, [r7, #4]
 8002ae8:	681b      	ldr	r3, [r3, #0]
 8002aea:	681b      	ldr	r3, [r3, #0]
 8002aec:	2201      	movs	r2, #1
 8002aee:	4013      	ands	r3, r2
 8002af0:	2b01      	cmp	r3, #1
 8002af2:	d009      	beq.n	8002b08 <ADC_Enable+0x40>
 8002af4:	687b      	ldr	r3, [r7, #4]
 8002af6:	681b      	ldr	r3, [r3, #0]
 8002af8:	68da      	ldr	r2, [r3, #12]
 8002afa:	2380      	movs	r3, #128	; 0x80
 8002afc:	021b      	lsls	r3, r3, #8
 8002afe:	401a      	ands	r2, r3
 8002b00:	2380      	movs	r3, #128	; 0x80
 8002b02:	021b      	lsls	r3, r3, #8
 8002b04:	429a      	cmp	r2, r3
 8002b06:	d101      	bne.n	8002b0c <ADC_Enable+0x44>
 8002b08:	2301      	movs	r3, #1
 8002b0a:	e000      	b.n	8002b0e <ADC_Enable+0x46>
 8002b0c:	2300      	movs	r3, #0
 8002b0e:	2b00      	cmp	r3, #0
 8002b10:	d152      	bne.n	8002bb8 <ADC_Enable+0xf0>
  {
    /* Check if conditions to enable the ADC are fulfilled */
    if (ADC_ENABLING_CONDITIONS(hadc) == RESET)
 8002b12:	687b      	ldr	r3, [r7, #4]
 8002b14:	681b      	ldr	r3, [r3, #0]
 8002b16:	689b      	ldr	r3, [r3, #8]
 8002b18:	4a2a      	ldr	r2, [pc, #168]	; (8002bc4 <ADC_Enable+0xfc>)
 8002b1a:	4013      	ands	r3, r2
 8002b1c:	d00d      	beq.n	8002b3a <ADC_Enable+0x72>
    {
      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8002b1e:	687b      	ldr	r3, [r7, #4]
 8002b20:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002b22:	2210      	movs	r2, #16
 8002b24:	431a      	orrs	r2, r3
 8002b26:	687b      	ldr	r3, [r7, #4]
 8002b28:	639a      	str	r2, [r3, #56]	; 0x38
    
      /* Set ADC error code to ADC IP internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8002b2a:	687b      	ldr	r3, [r7, #4]
 8002b2c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002b2e:	2201      	movs	r2, #1
 8002b30:	431a      	orrs	r2, r3
 8002b32:	687b      	ldr	r3, [r7, #4]
 8002b34:	63da      	str	r2, [r3, #60]	; 0x3c
      
      return HAL_ERROR;
 8002b36:	2301      	movs	r3, #1
 8002b38:	e03f      	b.n	8002bba <ADC_Enable+0xf2>
    }
    
    /* Enable the ADC peripheral */
    __HAL_ADC_ENABLE(hadc);
 8002b3a:	687b      	ldr	r3, [r7, #4]
 8002b3c:	681b      	ldr	r3, [r3, #0]
 8002b3e:	689a      	ldr	r2, [r3, #8]
 8002b40:	687b      	ldr	r3, [r7, #4]
 8002b42:	681b      	ldr	r3, [r3, #0]
 8002b44:	2101      	movs	r1, #1
 8002b46:	430a      	orrs	r2, r1
 8002b48:	609a      	str	r2, [r3, #8]
    
    /* Delay for ADC stabilization time */
    /* Compute number of CPU cycles to wait for */
    wait_loop_index = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000U));
 8002b4a:	4b1f      	ldr	r3, [pc, #124]	; (8002bc8 <ADC_Enable+0x100>)
 8002b4c:	681b      	ldr	r3, [r3, #0]
 8002b4e:	491f      	ldr	r1, [pc, #124]	; (8002bcc <ADC_Enable+0x104>)
 8002b50:	0018      	movs	r0, r3
 8002b52:	f7fd fad9 	bl	8000108 <__udivsi3>
 8002b56:	0003      	movs	r3, r0
 8002b58:	60bb      	str	r3, [r7, #8]
    while(wait_loop_index != 0U)
 8002b5a:	e002      	b.n	8002b62 <ADC_Enable+0x9a>
    {
      wait_loop_index--;
 8002b5c:	68bb      	ldr	r3, [r7, #8]
 8002b5e:	3b01      	subs	r3, #1
 8002b60:	60bb      	str	r3, [r7, #8]
    while(wait_loop_index != 0U)
 8002b62:	68bb      	ldr	r3, [r7, #8]
 8002b64:	2b00      	cmp	r3, #0
 8002b66:	d1f9      	bne.n	8002b5c <ADC_Enable+0x94>
    }

    /* Get tick count */
    tickstart = HAL_GetTick();
 8002b68:	f7ff fc5e 	bl	8002428 <HAL_GetTick>
 8002b6c:	0003      	movs	r3, r0
 8002b6e:	60fb      	str	r3, [r7, #12]
    
    /* Wait for ADC effectively enabled */
    while(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == RESET)
 8002b70:	e01b      	b.n	8002baa <ADC_Enable+0xe2>
    {
      if((HAL_GetTick() - tickstart) > ADC_ENABLE_TIMEOUT)
 8002b72:	f7ff fc59 	bl	8002428 <HAL_GetTick>
 8002b76:	0002      	movs	r2, r0
 8002b78:	68fb      	ldr	r3, [r7, #12]
 8002b7a:	1ad3      	subs	r3, r2, r3
 8002b7c:	2b02      	cmp	r3, #2
 8002b7e:	d914      	bls.n	8002baa <ADC_Enable+0xe2>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == RESET)
 8002b80:	687b      	ldr	r3, [r7, #4]
 8002b82:	681b      	ldr	r3, [r3, #0]
 8002b84:	681b      	ldr	r3, [r3, #0]
 8002b86:	2201      	movs	r2, #1
 8002b88:	4013      	ands	r3, r2
 8002b8a:	2b01      	cmp	r3, #1
 8002b8c:	d00d      	beq.n	8002baa <ADC_Enable+0xe2>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8002b8e:	687b      	ldr	r3, [r7, #4]
 8002b90:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002b92:	2210      	movs	r2, #16
 8002b94:	431a      	orrs	r2, r3
 8002b96:	687b      	ldr	r3, [r7, #4]
 8002b98:	639a      	str	r2, [r3, #56]	; 0x38

          /* Set ADC error code to ADC IP internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8002b9a:	687b      	ldr	r3, [r7, #4]
 8002b9c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002b9e:	2201      	movs	r2, #1
 8002ba0:	431a      	orrs	r2, r3
 8002ba2:	687b      	ldr	r3, [r7, #4]
 8002ba4:	63da      	str	r2, [r3, #60]	; 0x3c

          return HAL_ERROR;
 8002ba6:	2301      	movs	r3, #1
 8002ba8:	e007      	b.n	8002bba <ADC_Enable+0xf2>
    while(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == RESET)
 8002baa:	687b      	ldr	r3, [r7, #4]
 8002bac:	681b      	ldr	r3, [r3, #0]
 8002bae:	681b      	ldr	r3, [r3, #0]
 8002bb0:	2201      	movs	r2, #1
 8002bb2:	4013      	ands	r3, r2
 8002bb4:	2b01      	cmp	r3, #1
 8002bb6:	d1dc      	bne.n	8002b72 <ADC_Enable+0xaa>
      }
    }
  }
   
  /* Return HAL status */
  return HAL_OK;
 8002bb8:	2300      	movs	r3, #0
}
 8002bba:	0018      	movs	r0, r3
 8002bbc:	46bd      	mov	sp, r7
 8002bbe:	b004      	add	sp, #16
 8002bc0:	bd80      	pop	{r7, pc}
 8002bc2:	46c0      	nop			; (mov r8, r8)
 8002bc4:	80000017 	.word	0x80000017
 8002bc8:	20000050 	.word	0x20000050
 8002bcc:	000f4240 	.word	0x000f4240

08002bd0 <HAL_CAN_Init>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_Init(CAN_HandleTypeDef *hcan)
{
 8002bd0:	b580      	push	{r7, lr}
 8002bd2:	b084      	sub	sp, #16
 8002bd4:	af00      	add	r7, sp, #0
 8002bd6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Check CAN handle */
  if (hcan == NULL)
 8002bd8:	687b      	ldr	r3, [r7, #4]
 8002bda:	2b00      	cmp	r3, #0
 8002bdc:	d101      	bne.n	8002be2 <HAL_CAN_Init+0x12>
  {
    return HAL_ERROR;
 8002bde:	2301      	movs	r3, #1
 8002be0:	e0f0      	b.n	8002dc4 <HAL_CAN_Init+0x1f4>
    /* Init the low level hardware: CLOCK, NVIC */
    hcan->MspInitCallback(hcan);
  }

#else
  if (hcan->State == HAL_CAN_STATE_RESET)
 8002be2:	687b      	ldr	r3, [r7, #4]
 8002be4:	2220      	movs	r2, #32
 8002be6:	5c9b      	ldrb	r3, [r3, r2]
 8002be8:	b2db      	uxtb	r3, r3
 8002bea:	2b00      	cmp	r3, #0
 8002bec:	d103      	bne.n	8002bf6 <HAL_CAN_Init+0x26>
  {
    /* Init the low level hardware: CLOCK, NVIC */
    HAL_CAN_MspInit(hcan);
 8002bee:	687b      	ldr	r3, [r7, #4]
 8002bf0:	0018      	movs	r0, r3
 8002bf2:	f7fe fd3f 	bl	8001674 <HAL_CAN_MspInit>
  }
#endif /* (USE_HAL_CAN_REGISTER_CALLBACKS) */

  /* Request initialisation */
  SET_BIT(hcan->Instance->MCR, CAN_MCR_INRQ);
 8002bf6:	687b      	ldr	r3, [r7, #4]
 8002bf8:	681b      	ldr	r3, [r3, #0]
 8002bfa:	681a      	ldr	r2, [r3, #0]
 8002bfc:	687b      	ldr	r3, [r7, #4]
 8002bfe:	681b      	ldr	r3, [r3, #0]
 8002c00:	2101      	movs	r1, #1
 8002c02:	430a      	orrs	r2, r1
 8002c04:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8002c06:	f7ff fc0f 	bl	8002428 <HAL_GetTick>
 8002c0a:	0003      	movs	r3, r0
 8002c0c:	60fb      	str	r3, [r7, #12]

  /* Wait initialisation acknowledge */
  while ((hcan->Instance->MSR & CAN_MSR_INAK) == 0U)
 8002c0e:	e013      	b.n	8002c38 <HAL_CAN_Init+0x68>
  {
    if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 8002c10:	f7ff fc0a 	bl	8002428 <HAL_GetTick>
 8002c14:	0002      	movs	r2, r0
 8002c16:	68fb      	ldr	r3, [r7, #12]
 8002c18:	1ad3      	subs	r3, r2, r3
 8002c1a:	2b0a      	cmp	r3, #10
 8002c1c:	d90c      	bls.n	8002c38 <HAL_CAN_Init+0x68>
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 8002c1e:	687b      	ldr	r3, [r7, #4]
 8002c20:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002c22:	2280      	movs	r2, #128	; 0x80
 8002c24:	0292      	lsls	r2, r2, #10
 8002c26:	431a      	orrs	r2, r3
 8002c28:	687b      	ldr	r3, [r7, #4]
 8002c2a:	625a      	str	r2, [r3, #36]	; 0x24

      /* Change CAN state */
      hcan->State = HAL_CAN_STATE_ERROR;
 8002c2c:	687b      	ldr	r3, [r7, #4]
 8002c2e:	2220      	movs	r2, #32
 8002c30:	2105      	movs	r1, #5
 8002c32:	5499      	strb	r1, [r3, r2]

      return HAL_ERROR;
 8002c34:	2301      	movs	r3, #1
 8002c36:	e0c5      	b.n	8002dc4 <HAL_CAN_Init+0x1f4>
  while ((hcan->Instance->MSR & CAN_MSR_INAK) == 0U)
 8002c38:	687b      	ldr	r3, [r7, #4]
 8002c3a:	681b      	ldr	r3, [r3, #0]
 8002c3c:	685b      	ldr	r3, [r3, #4]
 8002c3e:	2201      	movs	r2, #1
 8002c40:	4013      	ands	r3, r2
 8002c42:	d0e5      	beq.n	8002c10 <HAL_CAN_Init+0x40>
    }
  }

  /* Exit from sleep mode */
  CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_SLEEP);
 8002c44:	687b      	ldr	r3, [r7, #4]
 8002c46:	681b      	ldr	r3, [r3, #0]
 8002c48:	681a      	ldr	r2, [r3, #0]
 8002c4a:	687b      	ldr	r3, [r7, #4]
 8002c4c:	681b      	ldr	r3, [r3, #0]
 8002c4e:	2102      	movs	r1, #2
 8002c50:	438a      	bics	r2, r1
 8002c52:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8002c54:	f7ff fbe8 	bl	8002428 <HAL_GetTick>
 8002c58:	0003      	movs	r3, r0
 8002c5a:	60fb      	str	r3, [r7, #12]

  /* Check Sleep mode leave acknowledge */
  while ((hcan->Instance->MSR & CAN_MSR_SLAK) != 0U)
 8002c5c:	e013      	b.n	8002c86 <HAL_CAN_Init+0xb6>
  {
    if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 8002c5e:	f7ff fbe3 	bl	8002428 <HAL_GetTick>
 8002c62:	0002      	movs	r2, r0
 8002c64:	68fb      	ldr	r3, [r7, #12]
 8002c66:	1ad3      	subs	r3, r2, r3
 8002c68:	2b0a      	cmp	r3, #10
 8002c6a:	d90c      	bls.n	8002c86 <HAL_CAN_Init+0xb6>
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 8002c6c:	687b      	ldr	r3, [r7, #4]
 8002c6e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002c70:	2280      	movs	r2, #128	; 0x80
 8002c72:	0292      	lsls	r2, r2, #10
 8002c74:	431a      	orrs	r2, r3
 8002c76:	687b      	ldr	r3, [r7, #4]
 8002c78:	625a      	str	r2, [r3, #36]	; 0x24

      /* Change CAN state */
      hcan->State = HAL_CAN_STATE_ERROR;
 8002c7a:	687b      	ldr	r3, [r7, #4]
 8002c7c:	2220      	movs	r2, #32
 8002c7e:	2105      	movs	r1, #5
 8002c80:	5499      	strb	r1, [r3, r2]

      return HAL_ERROR;
 8002c82:	2301      	movs	r3, #1
 8002c84:	e09e      	b.n	8002dc4 <HAL_CAN_Init+0x1f4>
  while ((hcan->Instance->MSR & CAN_MSR_SLAK) != 0U)
 8002c86:	687b      	ldr	r3, [r7, #4]
 8002c88:	681b      	ldr	r3, [r3, #0]
 8002c8a:	685b      	ldr	r3, [r3, #4]
 8002c8c:	2202      	movs	r2, #2
 8002c8e:	4013      	ands	r3, r2
 8002c90:	d1e5      	bne.n	8002c5e <HAL_CAN_Init+0x8e>
    }
  }

  /* Set the time triggered communication mode */
  if (hcan->Init.TimeTriggeredMode == ENABLE)
 8002c92:	687b      	ldr	r3, [r7, #4]
 8002c94:	7e1b      	ldrb	r3, [r3, #24]
 8002c96:	2b01      	cmp	r3, #1
 8002c98:	d108      	bne.n	8002cac <HAL_CAN_Init+0xdc>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_TTCM);
 8002c9a:	687b      	ldr	r3, [r7, #4]
 8002c9c:	681b      	ldr	r3, [r3, #0]
 8002c9e:	681a      	ldr	r2, [r3, #0]
 8002ca0:	687b      	ldr	r3, [r7, #4]
 8002ca2:	681b      	ldr	r3, [r3, #0]
 8002ca4:	2180      	movs	r1, #128	; 0x80
 8002ca6:	430a      	orrs	r2, r1
 8002ca8:	601a      	str	r2, [r3, #0]
 8002caa:	e007      	b.n	8002cbc <HAL_CAN_Init+0xec>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_TTCM);
 8002cac:	687b      	ldr	r3, [r7, #4]
 8002cae:	681b      	ldr	r3, [r3, #0]
 8002cb0:	681a      	ldr	r2, [r3, #0]
 8002cb2:	687b      	ldr	r3, [r7, #4]
 8002cb4:	681b      	ldr	r3, [r3, #0]
 8002cb6:	2180      	movs	r1, #128	; 0x80
 8002cb8:	438a      	bics	r2, r1
 8002cba:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic bus-off management */
  if (hcan->Init.AutoBusOff == ENABLE)
 8002cbc:	687b      	ldr	r3, [r7, #4]
 8002cbe:	7e5b      	ldrb	r3, [r3, #25]
 8002cc0:	2b01      	cmp	r3, #1
 8002cc2:	d108      	bne.n	8002cd6 <HAL_CAN_Init+0x106>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_ABOM);
 8002cc4:	687b      	ldr	r3, [r7, #4]
 8002cc6:	681b      	ldr	r3, [r3, #0]
 8002cc8:	681a      	ldr	r2, [r3, #0]
 8002cca:	687b      	ldr	r3, [r7, #4]
 8002ccc:	681b      	ldr	r3, [r3, #0]
 8002cce:	2140      	movs	r1, #64	; 0x40
 8002cd0:	430a      	orrs	r2, r1
 8002cd2:	601a      	str	r2, [r3, #0]
 8002cd4:	e007      	b.n	8002ce6 <HAL_CAN_Init+0x116>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_ABOM);
 8002cd6:	687b      	ldr	r3, [r7, #4]
 8002cd8:	681b      	ldr	r3, [r3, #0]
 8002cda:	681a      	ldr	r2, [r3, #0]
 8002cdc:	687b      	ldr	r3, [r7, #4]
 8002cde:	681b      	ldr	r3, [r3, #0]
 8002ce0:	2140      	movs	r1, #64	; 0x40
 8002ce2:	438a      	bics	r2, r1
 8002ce4:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic wake-up mode */
  if (hcan->Init.AutoWakeUp == ENABLE)
 8002ce6:	687b      	ldr	r3, [r7, #4]
 8002ce8:	7e9b      	ldrb	r3, [r3, #26]
 8002cea:	2b01      	cmp	r3, #1
 8002cec:	d108      	bne.n	8002d00 <HAL_CAN_Init+0x130>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_AWUM);
 8002cee:	687b      	ldr	r3, [r7, #4]
 8002cf0:	681b      	ldr	r3, [r3, #0]
 8002cf2:	681a      	ldr	r2, [r3, #0]
 8002cf4:	687b      	ldr	r3, [r7, #4]
 8002cf6:	681b      	ldr	r3, [r3, #0]
 8002cf8:	2120      	movs	r1, #32
 8002cfa:	430a      	orrs	r2, r1
 8002cfc:	601a      	str	r2, [r3, #0]
 8002cfe:	e007      	b.n	8002d10 <HAL_CAN_Init+0x140>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_AWUM);
 8002d00:	687b      	ldr	r3, [r7, #4]
 8002d02:	681b      	ldr	r3, [r3, #0]
 8002d04:	681a      	ldr	r2, [r3, #0]
 8002d06:	687b      	ldr	r3, [r7, #4]
 8002d08:	681b      	ldr	r3, [r3, #0]
 8002d0a:	2120      	movs	r1, #32
 8002d0c:	438a      	bics	r2, r1
 8002d0e:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic retransmission */
  if (hcan->Init.AutoRetransmission == ENABLE)
 8002d10:	687b      	ldr	r3, [r7, #4]
 8002d12:	7edb      	ldrb	r3, [r3, #27]
 8002d14:	2b01      	cmp	r3, #1
 8002d16:	d108      	bne.n	8002d2a <HAL_CAN_Init+0x15a>
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_NART);
 8002d18:	687b      	ldr	r3, [r7, #4]
 8002d1a:	681b      	ldr	r3, [r3, #0]
 8002d1c:	681a      	ldr	r2, [r3, #0]
 8002d1e:	687b      	ldr	r3, [r7, #4]
 8002d20:	681b      	ldr	r3, [r3, #0]
 8002d22:	2110      	movs	r1, #16
 8002d24:	438a      	bics	r2, r1
 8002d26:	601a      	str	r2, [r3, #0]
 8002d28:	e007      	b.n	8002d3a <HAL_CAN_Init+0x16a>
  }
  else
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_NART);
 8002d2a:	687b      	ldr	r3, [r7, #4]
 8002d2c:	681b      	ldr	r3, [r3, #0]
 8002d2e:	681a      	ldr	r2, [r3, #0]
 8002d30:	687b      	ldr	r3, [r7, #4]
 8002d32:	681b      	ldr	r3, [r3, #0]
 8002d34:	2110      	movs	r1, #16
 8002d36:	430a      	orrs	r2, r1
 8002d38:	601a      	str	r2, [r3, #0]
  }

  /* Set the receive FIFO locked mode */
  if (hcan->Init.ReceiveFifoLocked == ENABLE)
 8002d3a:	687b      	ldr	r3, [r7, #4]
 8002d3c:	7f1b      	ldrb	r3, [r3, #28]
 8002d3e:	2b01      	cmp	r3, #1
 8002d40:	d108      	bne.n	8002d54 <HAL_CAN_Init+0x184>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_RFLM);
 8002d42:	687b      	ldr	r3, [r7, #4]
 8002d44:	681b      	ldr	r3, [r3, #0]
 8002d46:	681a      	ldr	r2, [r3, #0]
 8002d48:	687b      	ldr	r3, [r7, #4]
 8002d4a:	681b      	ldr	r3, [r3, #0]
 8002d4c:	2108      	movs	r1, #8
 8002d4e:	430a      	orrs	r2, r1
 8002d50:	601a      	str	r2, [r3, #0]
 8002d52:	e007      	b.n	8002d64 <HAL_CAN_Init+0x194>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_RFLM);
 8002d54:	687b      	ldr	r3, [r7, #4]
 8002d56:	681b      	ldr	r3, [r3, #0]
 8002d58:	681a      	ldr	r2, [r3, #0]
 8002d5a:	687b      	ldr	r3, [r7, #4]
 8002d5c:	681b      	ldr	r3, [r3, #0]
 8002d5e:	2108      	movs	r1, #8
 8002d60:	438a      	bics	r2, r1
 8002d62:	601a      	str	r2, [r3, #0]
  }

  /* Set the transmit FIFO priority */
  if (hcan->Init.TransmitFifoPriority == ENABLE)
 8002d64:	687b      	ldr	r3, [r7, #4]
 8002d66:	7f5b      	ldrb	r3, [r3, #29]
 8002d68:	2b01      	cmp	r3, #1
 8002d6a:	d108      	bne.n	8002d7e <HAL_CAN_Init+0x1ae>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_TXFP);
 8002d6c:	687b      	ldr	r3, [r7, #4]
 8002d6e:	681b      	ldr	r3, [r3, #0]
 8002d70:	681a      	ldr	r2, [r3, #0]
 8002d72:	687b      	ldr	r3, [r7, #4]
 8002d74:	681b      	ldr	r3, [r3, #0]
 8002d76:	2104      	movs	r1, #4
 8002d78:	430a      	orrs	r2, r1
 8002d7a:	601a      	str	r2, [r3, #0]
 8002d7c:	e007      	b.n	8002d8e <HAL_CAN_Init+0x1be>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_TXFP);
 8002d7e:	687b      	ldr	r3, [r7, #4]
 8002d80:	681b      	ldr	r3, [r3, #0]
 8002d82:	681a      	ldr	r2, [r3, #0]
 8002d84:	687b      	ldr	r3, [r7, #4]
 8002d86:	681b      	ldr	r3, [r3, #0]
 8002d88:	2104      	movs	r1, #4
 8002d8a:	438a      	bics	r2, r1
 8002d8c:	601a      	str	r2, [r3, #0]
  }

  /* Set the bit timing register */
  WRITE_REG(hcan->Instance->BTR, (uint32_t)(hcan->Init.Mode           |
 8002d8e:	687b      	ldr	r3, [r7, #4]
 8002d90:	689a      	ldr	r2, [r3, #8]
 8002d92:	687b      	ldr	r3, [r7, #4]
 8002d94:	68db      	ldr	r3, [r3, #12]
 8002d96:	431a      	orrs	r2, r3
 8002d98:	687b      	ldr	r3, [r7, #4]
 8002d9a:	691b      	ldr	r3, [r3, #16]
 8002d9c:	431a      	orrs	r2, r3
 8002d9e:	687b      	ldr	r3, [r7, #4]
 8002da0:	695b      	ldr	r3, [r3, #20]
 8002da2:	431a      	orrs	r2, r3
 8002da4:	0011      	movs	r1, r2
 8002da6:	687b      	ldr	r3, [r7, #4]
 8002da8:	685b      	ldr	r3, [r3, #4]
 8002daa:	1e5a      	subs	r2, r3, #1
 8002dac:	687b      	ldr	r3, [r7, #4]
 8002dae:	681b      	ldr	r3, [r3, #0]
 8002db0:	430a      	orrs	r2, r1
 8002db2:	61da      	str	r2, [r3, #28]
                                            hcan->Init.TimeSeg1       |
                                            hcan->Init.TimeSeg2       |
                                            (hcan->Init.Prescaler - 1U)));

  /* Initialize the error code */
  hcan->ErrorCode = HAL_CAN_ERROR_NONE;
 8002db4:	687b      	ldr	r3, [r7, #4]
 8002db6:	2200      	movs	r2, #0
 8002db8:	625a      	str	r2, [r3, #36]	; 0x24

  /* Initialize the CAN state */
  hcan->State = HAL_CAN_STATE_READY;
 8002dba:	687b      	ldr	r3, [r7, #4]
 8002dbc:	2220      	movs	r2, #32
 8002dbe:	2101      	movs	r1, #1
 8002dc0:	5499      	strb	r1, [r3, r2]

  /* Return function status */
  return HAL_OK;
 8002dc2:	2300      	movs	r3, #0
}
 8002dc4:	0018      	movs	r0, r3
 8002dc6:	46bd      	mov	sp, r7
 8002dc8:	b004      	add	sp, #16
 8002dca:	bd80      	pop	{r7, pc}

08002dcc <HAL_CAN_ConfigFilter>:
  * @param  sFilterConfig pointer to a CAN_FilterTypeDef structure that
  *         contains the filter configuration information.
  * @retval None
  */
HAL_StatusTypeDef HAL_CAN_ConfigFilter(CAN_HandleTypeDef *hcan, const CAN_FilterTypeDef *sFilterConfig)
{
 8002dcc:	b580      	push	{r7, lr}
 8002dce:	b086      	sub	sp, #24
 8002dd0:	af00      	add	r7, sp, #0
 8002dd2:	6078      	str	r0, [r7, #4]
 8002dd4:	6039      	str	r1, [r7, #0]
  uint32_t filternbrbitpos;
  CAN_TypeDef *can_ip = hcan->Instance;
 8002dd6:	687b      	ldr	r3, [r7, #4]
 8002dd8:	681b      	ldr	r3, [r3, #0]
 8002dda:	617b      	str	r3, [r7, #20]
  HAL_CAN_StateTypeDef state = hcan->State;
 8002ddc:	2013      	movs	r0, #19
 8002dde:	183b      	adds	r3, r7, r0
 8002de0:	687a      	ldr	r2, [r7, #4]
 8002de2:	2120      	movs	r1, #32
 8002de4:	5c52      	ldrb	r2, [r2, r1]
 8002de6:	701a      	strb	r2, [r3, #0]

  if ((state == HAL_CAN_STATE_READY) ||
 8002de8:	0002      	movs	r2, r0
 8002dea:	18bb      	adds	r3, r7, r2
 8002dec:	781b      	ldrb	r3, [r3, #0]
 8002dee:	2b01      	cmp	r3, #1
 8002df0:	d004      	beq.n	8002dfc <HAL_CAN_ConfigFilter+0x30>
 8002df2:	18bb      	adds	r3, r7, r2
 8002df4:	781b      	ldrb	r3, [r3, #0]
 8002df6:	2b02      	cmp	r3, #2
 8002df8:	d000      	beq.n	8002dfc <HAL_CAN_ConfigFilter+0x30>
 8002dfa:	e0cd      	b.n	8002f98 <HAL_CAN_ConfigFilter+0x1cc>

    /* Check the parameters */
    assert_param(IS_CAN_FILTER_BANK_SINGLE(sFilterConfig->FilterBank));

    /* Initialisation mode for the filter */
    SET_BIT(can_ip->FMR, CAN_FMR_FINIT);
 8002dfc:	697a      	ldr	r2, [r7, #20]
 8002dfe:	2380      	movs	r3, #128	; 0x80
 8002e00:	009b      	lsls	r3, r3, #2
 8002e02:	58d3      	ldr	r3, [r2, r3]
 8002e04:	2201      	movs	r2, #1
 8002e06:	431a      	orrs	r2, r3
 8002e08:	0011      	movs	r1, r2
 8002e0a:	697a      	ldr	r2, [r7, #20]
 8002e0c:	2380      	movs	r3, #128	; 0x80
 8002e0e:	009b      	lsls	r3, r3, #2
 8002e10:	50d1      	str	r1, [r2, r3]

    /* Convert filter number into bit position */
    filternbrbitpos = (uint32_t)1 << (sFilterConfig->FilterBank & 0x1FU);
 8002e12:	683b      	ldr	r3, [r7, #0]
 8002e14:	695b      	ldr	r3, [r3, #20]
 8002e16:	221f      	movs	r2, #31
 8002e18:	4013      	ands	r3, r2
 8002e1a:	2201      	movs	r2, #1
 8002e1c:	409a      	lsls	r2, r3
 8002e1e:	0013      	movs	r3, r2
 8002e20:	60fb      	str	r3, [r7, #12]

    /* Filter Deactivation */
    CLEAR_BIT(can_ip->FA1R, filternbrbitpos);
 8002e22:	697a      	ldr	r2, [r7, #20]
 8002e24:	2387      	movs	r3, #135	; 0x87
 8002e26:	009b      	lsls	r3, r3, #2
 8002e28:	58d3      	ldr	r3, [r2, r3]
 8002e2a:	68fa      	ldr	r2, [r7, #12]
 8002e2c:	43d2      	mvns	r2, r2
 8002e2e:	401a      	ands	r2, r3
 8002e30:	0011      	movs	r1, r2
 8002e32:	697a      	ldr	r2, [r7, #20]
 8002e34:	2387      	movs	r3, #135	; 0x87
 8002e36:	009b      	lsls	r3, r3, #2
 8002e38:	50d1      	str	r1, [r2, r3]

    /* Filter Scale */
    if (sFilterConfig->FilterScale == CAN_FILTERSCALE_16BIT)
 8002e3a:	683b      	ldr	r3, [r7, #0]
 8002e3c:	69db      	ldr	r3, [r3, #28]
 8002e3e:	2b00      	cmp	r3, #0
 8002e40:	d129      	bne.n	8002e96 <HAL_CAN_ConfigFilter+0xca>
    {
      /* 16-bit scale for the filter */
      CLEAR_BIT(can_ip->FS1R, filternbrbitpos);
 8002e42:	697a      	ldr	r2, [r7, #20]
 8002e44:	2383      	movs	r3, #131	; 0x83
 8002e46:	009b      	lsls	r3, r3, #2
 8002e48:	58d3      	ldr	r3, [r2, r3]
 8002e4a:	68fa      	ldr	r2, [r7, #12]
 8002e4c:	43d2      	mvns	r2, r2
 8002e4e:	401a      	ands	r2, r3
 8002e50:	0011      	movs	r1, r2
 8002e52:	697a      	ldr	r2, [r7, #20]
 8002e54:	2383      	movs	r3, #131	; 0x83
 8002e56:	009b      	lsls	r3, r3, #2
 8002e58:	50d1      	str	r1, [r2, r3]

      /* First 16-bit identifier and First 16-bit mask */
      /* Or First 16-bit identifier and Second 16-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdLow) << 16U) |
 8002e5a:	683b      	ldr	r3, [r7, #0]
 8002e5c:	68db      	ldr	r3, [r3, #12]
 8002e5e:	0418      	lsls	r0, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdLow);
 8002e60:	683b      	ldr	r3, [r7, #0]
 8002e62:	685b      	ldr	r3, [r3, #4]
 8002e64:	041b      	lsls	r3, r3, #16
 8002e66:	0c19      	lsrs	r1, r3, #16
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 8002e68:	683b      	ldr	r3, [r7, #0]
 8002e6a:	695a      	ldr	r2, [r3, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdLow) << 16U) |
 8002e6c:	4301      	orrs	r1, r0
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 8002e6e:	697b      	ldr	r3, [r7, #20]
 8002e70:	3248      	adds	r2, #72	; 0x48
 8002e72:	00d2      	lsls	r2, r2, #3
 8002e74:	50d1      	str	r1, [r2, r3]

      /* Second 16-bit identifier and Second 16-bit mask */
      /* Or Third 16-bit identifier and Fourth 16-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 8002e76:	683b      	ldr	r3, [r7, #0]
 8002e78:	689b      	ldr	r3, [r3, #8]
 8002e7a:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdHigh);
 8002e7c:	683b      	ldr	r3, [r7, #0]
 8002e7e:	681b      	ldr	r3, [r3, #0]
 8002e80:	041b      	lsls	r3, r3, #16
 8002e82:	0c1a      	lsrs	r2, r3, #16
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 8002e84:	683b      	ldr	r3, [r7, #0]
 8002e86:	695b      	ldr	r3, [r3, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 8002e88:	430a      	orrs	r2, r1
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 8002e8a:	6979      	ldr	r1, [r7, #20]
 8002e8c:	3348      	adds	r3, #72	; 0x48
 8002e8e:	00db      	lsls	r3, r3, #3
 8002e90:	18cb      	adds	r3, r1, r3
 8002e92:	3304      	adds	r3, #4
 8002e94:	601a      	str	r2, [r3, #0]
    }

    if (sFilterConfig->FilterScale == CAN_FILTERSCALE_32BIT)
 8002e96:	683b      	ldr	r3, [r7, #0]
 8002e98:	69db      	ldr	r3, [r3, #28]
 8002e9a:	2b01      	cmp	r3, #1
 8002e9c:	d128      	bne.n	8002ef0 <HAL_CAN_ConfigFilter+0x124>
    {
      /* 32-bit scale for the filter */
      SET_BIT(can_ip->FS1R, filternbrbitpos);
 8002e9e:	697a      	ldr	r2, [r7, #20]
 8002ea0:	2383      	movs	r3, #131	; 0x83
 8002ea2:	009b      	lsls	r3, r3, #2
 8002ea4:	58d2      	ldr	r2, [r2, r3]
 8002ea6:	68fb      	ldr	r3, [r7, #12]
 8002ea8:	431a      	orrs	r2, r3
 8002eaa:	0011      	movs	r1, r2
 8002eac:	697a      	ldr	r2, [r7, #20]
 8002eae:	2383      	movs	r3, #131	; 0x83
 8002eb0:	009b      	lsls	r3, r3, #2
 8002eb2:	50d1      	str	r1, [r2, r3]

      /* 32-bit identifier or First 32-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdHigh) << 16U) |
 8002eb4:	683b      	ldr	r3, [r7, #0]
 8002eb6:	681b      	ldr	r3, [r3, #0]
 8002eb8:	0418      	lsls	r0, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdLow);
 8002eba:	683b      	ldr	r3, [r7, #0]
 8002ebc:	685b      	ldr	r3, [r3, #4]
 8002ebe:	041b      	lsls	r3, r3, #16
 8002ec0:	0c19      	lsrs	r1, r3, #16
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 8002ec2:	683b      	ldr	r3, [r7, #0]
 8002ec4:	695a      	ldr	r2, [r3, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdHigh) << 16U) |
 8002ec6:	4301      	orrs	r1, r0
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 8002ec8:	697b      	ldr	r3, [r7, #20]
 8002eca:	3248      	adds	r2, #72	; 0x48
 8002ecc:	00d2      	lsls	r2, r2, #3
 8002ece:	50d1      	str	r1, [r2, r3]

      /* 32-bit mask or Second 32-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 8002ed0:	683b      	ldr	r3, [r7, #0]
 8002ed2:	689b      	ldr	r3, [r3, #8]
 8002ed4:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdLow);
 8002ed6:	683b      	ldr	r3, [r7, #0]
 8002ed8:	68db      	ldr	r3, [r3, #12]
 8002eda:	041b      	lsls	r3, r3, #16
 8002edc:	0c1a      	lsrs	r2, r3, #16
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 8002ede:	683b      	ldr	r3, [r7, #0]
 8002ee0:	695b      	ldr	r3, [r3, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 8002ee2:	430a      	orrs	r2, r1
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 8002ee4:	6979      	ldr	r1, [r7, #20]
 8002ee6:	3348      	adds	r3, #72	; 0x48
 8002ee8:	00db      	lsls	r3, r3, #3
 8002eea:	18cb      	adds	r3, r1, r3
 8002eec:	3304      	adds	r3, #4
 8002eee:	601a      	str	r2, [r3, #0]
    }

    /* Filter Mode */
    if (sFilterConfig->FilterMode == CAN_FILTERMODE_IDMASK)
 8002ef0:	683b      	ldr	r3, [r7, #0]
 8002ef2:	699b      	ldr	r3, [r3, #24]
 8002ef4:	2b00      	cmp	r3, #0
 8002ef6:	d10c      	bne.n	8002f12 <HAL_CAN_ConfigFilter+0x146>
    {
      /* Id/Mask mode for the filter*/
      CLEAR_BIT(can_ip->FM1R, filternbrbitpos);
 8002ef8:	697a      	ldr	r2, [r7, #20]
 8002efa:	2381      	movs	r3, #129	; 0x81
 8002efc:	009b      	lsls	r3, r3, #2
 8002efe:	58d3      	ldr	r3, [r2, r3]
 8002f00:	68fa      	ldr	r2, [r7, #12]
 8002f02:	43d2      	mvns	r2, r2
 8002f04:	401a      	ands	r2, r3
 8002f06:	0011      	movs	r1, r2
 8002f08:	697a      	ldr	r2, [r7, #20]
 8002f0a:	2381      	movs	r3, #129	; 0x81
 8002f0c:	009b      	lsls	r3, r3, #2
 8002f0e:	50d1      	str	r1, [r2, r3]
 8002f10:	e00a      	b.n	8002f28 <HAL_CAN_ConfigFilter+0x15c>
    }
    else /* CAN_FilterInitStruct->CAN_FilterMode == CAN_FilterMode_IdList */
    {
      /* Identifier list mode for the filter*/
      SET_BIT(can_ip->FM1R, filternbrbitpos);
 8002f12:	697a      	ldr	r2, [r7, #20]
 8002f14:	2381      	movs	r3, #129	; 0x81
 8002f16:	009b      	lsls	r3, r3, #2
 8002f18:	58d2      	ldr	r2, [r2, r3]
 8002f1a:	68fb      	ldr	r3, [r7, #12]
 8002f1c:	431a      	orrs	r2, r3
 8002f1e:	0011      	movs	r1, r2
 8002f20:	697a      	ldr	r2, [r7, #20]
 8002f22:	2381      	movs	r3, #129	; 0x81
 8002f24:	009b      	lsls	r3, r3, #2
 8002f26:	50d1      	str	r1, [r2, r3]
    }

    /* Filter FIFO assignment */
    if (sFilterConfig->FilterFIFOAssignment == CAN_FILTER_FIFO0)
 8002f28:	683b      	ldr	r3, [r7, #0]
 8002f2a:	691b      	ldr	r3, [r3, #16]
 8002f2c:	2b00      	cmp	r3, #0
 8002f2e:	d10c      	bne.n	8002f4a <HAL_CAN_ConfigFilter+0x17e>
    {
      /* FIFO 0 assignation for the filter */
      CLEAR_BIT(can_ip->FFA1R, filternbrbitpos);
 8002f30:	697a      	ldr	r2, [r7, #20]
 8002f32:	2385      	movs	r3, #133	; 0x85
 8002f34:	009b      	lsls	r3, r3, #2
 8002f36:	58d3      	ldr	r3, [r2, r3]
 8002f38:	68fa      	ldr	r2, [r7, #12]
 8002f3a:	43d2      	mvns	r2, r2
 8002f3c:	401a      	ands	r2, r3
 8002f3e:	0011      	movs	r1, r2
 8002f40:	697a      	ldr	r2, [r7, #20]
 8002f42:	2385      	movs	r3, #133	; 0x85
 8002f44:	009b      	lsls	r3, r3, #2
 8002f46:	50d1      	str	r1, [r2, r3]
 8002f48:	e00a      	b.n	8002f60 <HAL_CAN_ConfigFilter+0x194>
    }
    else
    {
      /* FIFO 1 assignation for the filter */
      SET_BIT(can_ip->FFA1R, filternbrbitpos);
 8002f4a:	697a      	ldr	r2, [r7, #20]
 8002f4c:	2385      	movs	r3, #133	; 0x85
 8002f4e:	009b      	lsls	r3, r3, #2
 8002f50:	58d2      	ldr	r2, [r2, r3]
 8002f52:	68fb      	ldr	r3, [r7, #12]
 8002f54:	431a      	orrs	r2, r3
 8002f56:	0011      	movs	r1, r2
 8002f58:	697a      	ldr	r2, [r7, #20]
 8002f5a:	2385      	movs	r3, #133	; 0x85
 8002f5c:	009b      	lsls	r3, r3, #2
 8002f5e:	50d1      	str	r1, [r2, r3]
    }

    /* Filter activation */
    if (sFilterConfig->FilterActivation == CAN_FILTER_ENABLE)
 8002f60:	683b      	ldr	r3, [r7, #0]
 8002f62:	6a1b      	ldr	r3, [r3, #32]
 8002f64:	2b01      	cmp	r3, #1
 8002f66:	d10a      	bne.n	8002f7e <HAL_CAN_ConfigFilter+0x1b2>
    {
      SET_BIT(can_ip->FA1R, filternbrbitpos);
 8002f68:	697a      	ldr	r2, [r7, #20]
 8002f6a:	2387      	movs	r3, #135	; 0x87
 8002f6c:	009b      	lsls	r3, r3, #2
 8002f6e:	58d2      	ldr	r2, [r2, r3]
 8002f70:	68fb      	ldr	r3, [r7, #12]
 8002f72:	431a      	orrs	r2, r3
 8002f74:	0011      	movs	r1, r2
 8002f76:	697a      	ldr	r2, [r7, #20]
 8002f78:	2387      	movs	r3, #135	; 0x87
 8002f7a:	009b      	lsls	r3, r3, #2
 8002f7c:	50d1      	str	r1, [r2, r3]
    }

    /* Leave the initialisation mode for the filter */
    CLEAR_BIT(can_ip->FMR, CAN_FMR_FINIT);
 8002f7e:	697a      	ldr	r2, [r7, #20]
 8002f80:	2380      	movs	r3, #128	; 0x80
 8002f82:	009b      	lsls	r3, r3, #2
 8002f84:	58d3      	ldr	r3, [r2, r3]
 8002f86:	2201      	movs	r2, #1
 8002f88:	4393      	bics	r3, r2
 8002f8a:	0019      	movs	r1, r3
 8002f8c:	697a      	ldr	r2, [r7, #20]
 8002f8e:	2380      	movs	r3, #128	; 0x80
 8002f90:	009b      	lsls	r3, r3, #2
 8002f92:	50d1      	str	r1, [r2, r3]

    /* Return function status */
    return HAL_OK;
 8002f94:	2300      	movs	r3, #0
 8002f96:	e007      	b.n	8002fa8 <HAL_CAN_ConfigFilter+0x1dc>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 8002f98:	687b      	ldr	r3, [r7, #4]
 8002f9a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002f9c:	2280      	movs	r2, #128	; 0x80
 8002f9e:	02d2      	lsls	r2, r2, #11
 8002fa0:	431a      	orrs	r2, r3
 8002fa2:	687b      	ldr	r3, [r7, #4]
 8002fa4:	625a      	str	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 8002fa6:	2301      	movs	r3, #1
  }
}
 8002fa8:	0018      	movs	r0, r3
 8002faa:	46bd      	mov	sp, r7
 8002fac:	b006      	add	sp, #24
 8002fae:	bd80      	pop	{r7, pc}

08002fb0 <HAL_CAN_Start>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_Start(CAN_HandleTypeDef *hcan)
{
 8002fb0:	b580      	push	{r7, lr}
 8002fb2:	b084      	sub	sp, #16
 8002fb4:	af00      	add	r7, sp, #0
 8002fb6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  if (hcan->State == HAL_CAN_STATE_READY)
 8002fb8:	687b      	ldr	r3, [r7, #4]
 8002fba:	2220      	movs	r2, #32
 8002fbc:	5c9b      	ldrb	r3, [r3, r2]
 8002fbe:	b2db      	uxtb	r3, r3
 8002fc0:	2b01      	cmp	r3, #1
 8002fc2:	d12f      	bne.n	8003024 <HAL_CAN_Start+0x74>
  {
    /* Change CAN peripheral state */
    hcan->State = HAL_CAN_STATE_LISTENING;
 8002fc4:	687b      	ldr	r3, [r7, #4]
 8002fc6:	2220      	movs	r2, #32
 8002fc8:	2102      	movs	r1, #2
 8002fca:	5499      	strb	r1, [r3, r2]

    /* Request leave initialisation */
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_INRQ);
 8002fcc:	687b      	ldr	r3, [r7, #4]
 8002fce:	681b      	ldr	r3, [r3, #0]
 8002fd0:	681a      	ldr	r2, [r3, #0]
 8002fd2:	687b      	ldr	r3, [r7, #4]
 8002fd4:	681b      	ldr	r3, [r3, #0]
 8002fd6:	2101      	movs	r1, #1
 8002fd8:	438a      	bics	r2, r1
 8002fda:	601a      	str	r2, [r3, #0]

    /* Get tick */
    tickstart = HAL_GetTick();
 8002fdc:	f7ff fa24 	bl	8002428 <HAL_GetTick>
 8002fe0:	0003      	movs	r3, r0
 8002fe2:	60fb      	str	r3, [r7, #12]

    /* Wait the acknowledge */
    while ((hcan->Instance->MSR & CAN_MSR_INAK) != 0U)
 8002fe4:	e013      	b.n	800300e <HAL_CAN_Start+0x5e>
    {
      /* Check for the Timeout */
      if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 8002fe6:	f7ff fa1f 	bl	8002428 <HAL_GetTick>
 8002fea:	0002      	movs	r2, r0
 8002fec:	68fb      	ldr	r3, [r7, #12]
 8002fee:	1ad3      	subs	r3, r2, r3
 8002ff0:	2b0a      	cmp	r3, #10
 8002ff2:	d90c      	bls.n	800300e <HAL_CAN_Start+0x5e>
      {
        /* Update error code */
        hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 8002ff4:	687b      	ldr	r3, [r7, #4]
 8002ff6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002ff8:	2280      	movs	r2, #128	; 0x80
 8002ffa:	0292      	lsls	r2, r2, #10
 8002ffc:	431a      	orrs	r2, r3
 8002ffe:	687b      	ldr	r3, [r7, #4]
 8003000:	625a      	str	r2, [r3, #36]	; 0x24

        /* Change CAN state */
        hcan->State = HAL_CAN_STATE_ERROR;
 8003002:	687b      	ldr	r3, [r7, #4]
 8003004:	2220      	movs	r2, #32
 8003006:	2105      	movs	r1, #5
 8003008:	5499      	strb	r1, [r3, r2]

        return HAL_ERROR;
 800300a:	2301      	movs	r3, #1
 800300c:	e012      	b.n	8003034 <HAL_CAN_Start+0x84>
    while ((hcan->Instance->MSR & CAN_MSR_INAK) != 0U)
 800300e:	687b      	ldr	r3, [r7, #4]
 8003010:	681b      	ldr	r3, [r3, #0]
 8003012:	685b      	ldr	r3, [r3, #4]
 8003014:	2201      	movs	r2, #1
 8003016:	4013      	ands	r3, r2
 8003018:	d1e5      	bne.n	8002fe6 <HAL_CAN_Start+0x36>
      }
    }

    /* Reset the CAN ErrorCode */
    hcan->ErrorCode = HAL_CAN_ERROR_NONE;
 800301a:	687b      	ldr	r3, [r7, #4]
 800301c:	2200      	movs	r2, #0
 800301e:	625a      	str	r2, [r3, #36]	; 0x24

    /* Return function status */
    return HAL_OK;
 8003020:	2300      	movs	r3, #0
 8003022:	e007      	b.n	8003034 <HAL_CAN_Start+0x84>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_READY;
 8003024:	687b      	ldr	r3, [r7, #4]
 8003026:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003028:	2280      	movs	r2, #128	; 0x80
 800302a:	0312      	lsls	r2, r2, #12
 800302c:	431a      	orrs	r2, r3
 800302e:	687b      	ldr	r3, [r7, #4]
 8003030:	625a      	str	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 8003032:	2301      	movs	r3, #1
  }
}
 8003034:	0018      	movs	r0, r3
 8003036:	46bd      	mov	sp, r7
 8003038:	b004      	add	sp, #16
 800303a:	bd80      	pop	{r7, pc}

0800303c <HAL_CAN_AddTxMessage>:
  *         This parameter can be a value of @arg CAN_Tx_Mailboxes.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_AddTxMessage(CAN_HandleTypeDef *hcan, const CAN_TxHeaderTypeDef *pHeader,
                                       const uint8_t aData[], uint32_t *pTxMailbox)
{
 800303c:	b580      	push	{r7, lr}
 800303e:	b088      	sub	sp, #32
 8003040:	af00      	add	r7, sp, #0
 8003042:	60f8      	str	r0, [r7, #12]
 8003044:	60b9      	str	r1, [r7, #8]
 8003046:	607a      	str	r2, [r7, #4]
 8003048:	603b      	str	r3, [r7, #0]
  uint32_t transmitmailbox;
  HAL_CAN_StateTypeDef state = hcan->State;
 800304a:	201f      	movs	r0, #31
 800304c:	183b      	adds	r3, r7, r0
 800304e:	68fa      	ldr	r2, [r7, #12]
 8003050:	2120      	movs	r1, #32
 8003052:	5c52      	ldrb	r2, [r2, r1]
 8003054:	701a      	strb	r2, [r3, #0]
  uint32_t tsr = READ_REG(hcan->Instance->TSR);
 8003056:	68fb      	ldr	r3, [r7, #12]
 8003058:	681b      	ldr	r3, [r3, #0]
 800305a:	689b      	ldr	r3, [r3, #8]
 800305c:	61bb      	str	r3, [r7, #24]
  {
    assert_param(IS_CAN_EXTID(pHeader->ExtId));
  }
  assert_param(IS_FUNCTIONAL_STATE(pHeader->TransmitGlobalTime));

  if ((state == HAL_CAN_STATE_READY) ||
 800305e:	183b      	adds	r3, r7, r0
 8003060:	781b      	ldrb	r3, [r3, #0]
 8003062:	2b01      	cmp	r3, #1
 8003064:	d004      	beq.n	8003070 <HAL_CAN_AddTxMessage+0x34>
 8003066:	183b      	adds	r3, r7, r0
 8003068:	781b      	ldrb	r3, [r3, #0]
 800306a:	2b02      	cmp	r3, #2
 800306c:	d000      	beq.n	8003070 <HAL_CAN_AddTxMessage+0x34>
 800306e:	e0ab      	b.n	80031c8 <HAL_CAN_AddTxMessage+0x18c>
      (state == HAL_CAN_STATE_LISTENING))
  {
    /* Check that all the Tx mailboxes are not full */
    if (((tsr & CAN_TSR_TME0) != 0U) ||
 8003070:	69ba      	ldr	r2, [r7, #24]
 8003072:	2380      	movs	r3, #128	; 0x80
 8003074:	04db      	lsls	r3, r3, #19
 8003076:	4013      	ands	r3, r2
 8003078:	d10a      	bne.n	8003090 <HAL_CAN_AddTxMessage+0x54>
        ((tsr & CAN_TSR_TME1) != 0U) ||
 800307a:	69ba      	ldr	r2, [r7, #24]
 800307c:	2380      	movs	r3, #128	; 0x80
 800307e:	051b      	lsls	r3, r3, #20
 8003080:	4013      	ands	r3, r2
    if (((tsr & CAN_TSR_TME0) != 0U) ||
 8003082:	d105      	bne.n	8003090 <HAL_CAN_AddTxMessage+0x54>
        ((tsr & CAN_TSR_TME2) != 0U))
 8003084:	69ba      	ldr	r2, [r7, #24]
 8003086:	2380      	movs	r3, #128	; 0x80
 8003088:	055b      	lsls	r3, r3, #21
 800308a:	4013      	ands	r3, r2
        ((tsr & CAN_TSR_TME1) != 0U) ||
 800308c:	d100      	bne.n	8003090 <HAL_CAN_AddTxMessage+0x54>
 800308e:	e092      	b.n	80031b6 <HAL_CAN_AddTxMessage+0x17a>
    {
      /* Select an empty transmit mailbox */
      transmitmailbox = (tsr & CAN_TSR_CODE) >> CAN_TSR_CODE_Pos;
 8003090:	69bb      	ldr	r3, [r7, #24]
 8003092:	0e1b      	lsrs	r3, r3, #24
 8003094:	2203      	movs	r2, #3
 8003096:	4013      	ands	r3, r2
 8003098:	617b      	str	r3, [r7, #20]

      /* Store the Tx mailbox */
      *pTxMailbox = (uint32_t)1 << transmitmailbox;
 800309a:	2201      	movs	r2, #1
 800309c:	697b      	ldr	r3, [r7, #20]
 800309e:	409a      	lsls	r2, r3
 80030a0:	683b      	ldr	r3, [r7, #0]
 80030a2:	601a      	str	r2, [r3, #0]

      /* Set up the Id */
      if (pHeader->IDE == CAN_ID_STD)
 80030a4:	68bb      	ldr	r3, [r7, #8]
 80030a6:	689b      	ldr	r3, [r3, #8]
 80030a8:	2b00      	cmp	r3, #0
 80030aa:	d10c      	bne.n	80030c6 <HAL_CAN_AddTxMessage+0x8a>
      {
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->StdId << CAN_TI0R_STID_Pos) |
 80030ac:	68bb      	ldr	r3, [r7, #8]
 80030ae:	681b      	ldr	r3, [r3, #0]
 80030b0:	0559      	lsls	r1, r3, #21
                                                           pHeader->RTR);
 80030b2:	68bb      	ldr	r3, [r7, #8]
 80030b4:	68da      	ldr	r2, [r3, #12]
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->StdId << CAN_TI0R_STID_Pos) |
 80030b6:	68fb      	ldr	r3, [r7, #12]
 80030b8:	681b      	ldr	r3, [r3, #0]
 80030ba:	4311      	orrs	r1, r2
 80030bc:	697a      	ldr	r2, [r7, #20]
 80030be:	3218      	adds	r2, #24
 80030c0:	0112      	lsls	r2, r2, #4
 80030c2:	50d1      	str	r1, [r2, r3]
 80030c4:	e00f      	b.n	80030e6 <HAL_CAN_AddTxMessage+0xaa>
      }
      else
      {
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->ExtId << CAN_TI0R_EXID_Pos) |
 80030c6:	68bb      	ldr	r3, [r7, #8]
 80030c8:	685b      	ldr	r3, [r3, #4]
 80030ca:	00da      	lsls	r2, r3, #3
                                                           pHeader->IDE |
 80030cc:	68bb      	ldr	r3, [r7, #8]
 80030ce:	689b      	ldr	r3, [r3, #8]
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->ExtId << CAN_TI0R_EXID_Pos) |
 80030d0:	431a      	orrs	r2, r3
 80030d2:	0011      	movs	r1, r2
                                                           pHeader->RTR);
 80030d4:	68bb      	ldr	r3, [r7, #8]
 80030d6:	68da      	ldr	r2, [r3, #12]
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->ExtId << CAN_TI0R_EXID_Pos) |
 80030d8:	68fb      	ldr	r3, [r7, #12]
 80030da:	681b      	ldr	r3, [r3, #0]
                                                           pHeader->IDE |
 80030dc:	4311      	orrs	r1, r2
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->ExtId << CAN_TI0R_EXID_Pos) |
 80030de:	697a      	ldr	r2, [r7, #20]
 80030e0:	3218      	adds	r2, #24
 80030e2:	0112      	lsls	r2, r2, #4
 80030e4:	50d1      	str	r1, [r2, r3]
      }

      /* Set up the DLC */
      hcan->Instance->sTxMailBox[transmitmailbox].TDTR = (pHeader->DLC);
 80030e6:	68fb      	ldr	r3, [r7, #12]
 80030e8:	6819      	ldr	r1, [r3, #0]
 80030ea:	68bb      	ldr	r3, [r7, #8]
 80030ec:	691a      	ldr	r2, [r3, #16]
 80030ee:	697b      	ldr	r3, [r7, #20]
 80030f0:	3318      	adds	r3, #24
 80030f2:	011b      	lsls	r3, r3, #4
 80030f4:	18cb      	adds	r3, r1, r3
 80030f6:	3304      	adds	r3, #4
 80030f8:	601a      	str	r2, [r3, #0]

      /* Set up the Transmit Global Time mode */
      if (pHeader->TransmitGlobalTime == ENABLE)
 80030fa:	68bb      	ldr	r3, [r7, #8]
 80030fc:	7d1b      	ldrb	r3, [r3, #20]
 80030fe:	2b01      	cmp	r3, #1
 8003100:	d112      	bne.n	8003128 <HAL_CAN_AddTxMessage+0xec>
      {
        SET_BIT(hcan->Instance->sTxMailBox[transmitmailbox].TDTR, CAN_TDT0R_TGT);
 8003102:	68fb      	ldr	r3, [r7, #12]
 8003104:	681a      	ldr	r2, [r3, #0]
 8003106:	697b      	ldr	r3, [r7, #20]
 8003108:	3318      	adds	r3, #24
 800310a:	011b      	lsls	r3, r3, #4
 800310c:	18d3      	adds	r3, r2, r3
 800310e:	3304      	adds	r3, #4
 8003110:	681a      	ldr	r2, [r3, #0]
 8003112:	68fb      	ldr	r3, [r7, #12]
 8003114:	6819      	ldr	r1, [r3, #0]
 8003116:	2380      	movs	r3, #128	; 0x80
 8003118:	005b      	lsls	r3, r3, #1
 800311a:	431a      	orrs	r2, r3
 800311c:	697b      	ldr	r3, [r7, #20]
 800311e:	3318      	adds	r3, #24
 8003120:	011b      	lsls	r3, r3, #4
 8003122:	18cb      	adds	r3, r1, r3
 8003124:	3304      	adds	r3, #4
 8003126:	601a      	str	r2, [r3, #0]
      }

      /* Set up the data field */
      WRITE_REG(hcan->Instance->sTxMailBox[transmitmailbox].TDHR,
 8003128:	687b      	ldr	r3, [r7, #4]
 800312a:	3307      	adds	r3, #7
 800312c:	781b      	ldrb	r3, [r3, #0]
 800312e:	061a      	lsls	r2, r3, #24
 8003130:	687b      	ldr	r3, [r7, #4]
 8003132:	3306      	adds	r3, #6
 8003134:	781b      	ldrb	r3, [r3, #0]
 8003136:	041b      	lsls	r3, r3, #16
 8003138:	431a      	orrs	r2, r3
 800313a:	687b      	ldr	r3, [r7, #4]
 800313c:	3305      	adds	r3, #5
 800313e:	781b      	ldrb	r3, [r3, #0]
 8003140:	021b      	lsls	r3, r3, #8
 8003142:	431a      	orrs	r2, r3
 8003144:	687b      	ldr	r3, [r7, #4]
 8003146:	3304      	adds	r3, #4
 8003148:	781b      	ldrb	r3, [r3, #0]
 800314a:	0019      	movs	r1, r3
 800314c:	68fb      	ldr	r3, [r7, #12]
 800314e:	6818      	ldr	r0, [r3, #0]
 8003150:	430a      	orrs	r2, r1
 8003152:	6979      	ldr	r1, [r7, #20]
 8003154:	23c6      	movs	r3, #198	; 0xc6
 8003156:	005b      	lsls	r3, r3, #1
 8003158:	0109      	lsls	r1, r1, #4
 800315a:	1841      	adds	r1, r0, r1
 800315c:	18cb      	adds	r3, r1, r3
 800315e:	601a      	str	r2, [r3, #0]
                ((uint32_t)aData[7] << CAN_TDH0R_DATA7_Pos) |
                ((uint32_t)aData[6] << CAN_TDH0R_DATA6_Pos) |
                ((uint32_t)aData[5] << CAN_TDH0R_DATA5_Pos) |
                ((uint32_t)aData[4] << CAN_TDH0R_DATA4_Pos));
      WRITE_REG(hcan->Instance->sTxMailBox[transmitmailbox].TDLR,
 8003160:	687b      	ldr	r3, [r7, #4]
 8003162:	3303      	adds	r3, #3
 8003164:	781b      	ldrb	r3, [r3, #0]
 8003166:	061a      	lsls	r2, r3, #24
 8003168:	687b      	ldr	r3, [r7, #4]
 800316a:	3302      	adds	r3, #2
 800316c:	781b      	ldrb	r3, [r3, #0]
 800316e:	041b      	lsls	r3, r3, #16
 8003170:	431a      	orrs	r2, r3
 8003172:	687b      	ldr	r3, [r7, #4]
 8003174:	3301      	adds	r3, #1
 8003176:	781b      	ldrb	r3, [r3, #0]
 8003178:	021b      	lsls	r3, r3, #8
 800317a:	431a      	orrs	r2, r3
 800317c:	687b      	ldr	r3, [r7, #4]
 800317e:	781b      	ldrb	r3, [r3, #0]
 8003180:	0019      	movs	r1, r3
 8003182:	68fb      	ldr	r3, [r7, #12]
 8003184:	6818      	ldr	r0, [r3, #0]
 8003186:	430a      	orrs	r2, r1
 8003188:	6979      	ldr	r1, [r7, #20]
 800318a:	23c4      	movs	r3, #196	; 0xc4
 800318c:	005b      	lsls	r3, r3, #1
 800318e:	0109      	lsls	r1, r1, #4
 8003190:	1841      	adds	r1, r0, r1
 8003192:	18cb      	adds	r3, r1, r3
 8003194:	601a      	str	r2, [r3, #0]
                ((uint32_t)aData[2] << CAN_TDL0R_DATA2_Pos) |
                ((uint32_t)aData[1] << CAN_TDL0R_DATA1_Pos) |
                ((uint32_t)aData[0] << CAN_TDL0R_DATA0_Pos));

      /* Request transmission */
      SET_BIT(hcan->Instance->sTxMailBox[transmitmailbox].TIR, CAN_TI0R_TXRQ);
 8003196:	68fb      	ldr	r3, [r7, #12]
 8003198:	681b      	ldr	r3, [r3, #0]
 800319a:	697a      	ldr	r2, [r7, #20]
 800319c:	3218      	adds	r2, #24
 800319e:	0112      	lsls	r2, r2, #4
 80031a0:	58d2      	ldr	r2, [r2, r3]
 80031a2:	68fb      	ldr	r3, [r7, #12]
 80031a4:	681b      	ldr	r3, [r3, #0]
 80031a6:	2101      	movs	r1, #1
 80031a8:	4311      	orrs	r1, r2
 80031aa:	697a      	ldr	r2, [r7, #20]
 80031ac:	3218      	adds	r2, #24
 80031ae:	0112      	lsls	r2, r2, #4
 80031b0:	50d1      	str	r1, [r2, r3]

      /* Return function status */
      return HAL_OK;
 80031b2:	2300      	movs	r3, #0
 80031b4:	e010      	b.n	80031d8 <HAL_CAN_AddTxMessage+0x19c>
    }
    else
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_PARAM;
 80031b6:	68fb      	ldr	r3, [r7, #12]
 80031b8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80031ba:	2280      	movs	r2, #128	; 0x80
 80031bc:	0392      	lsls	r2, r2, #14
 80031be:	431a      	orrs	r2, r3
 80031c0:	68fb      	ldr	r3, [r7, #12]
 80031c2:	625a      	str	r2, [r3, #36]	; 0x24

      return HAL_ERROR;
 80031c4:	2301      	movs	r3, #1
 80031c6:	e007      	b.n	80031d8 <HAL_CAN_AddTxMessage+0x19c>
    }
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 80031c8:	68fb      	ldr	r3, [r7, #12]
 80031ca:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80031cc:	2280      	movs	r2, #128	; 0x80
 80031ce:	02d2      	lsls	r2, r2, #11
 80031d0:	431a      	orrs	r2, r3
 80031d2:	68fb      	ldr	r3, [r7, #12]
 80031d4:	625a      	str	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 80031d6:	2301      	movs	r3, #1
  }
}
 80031d8:	0018      	movs	r0, r3
 80031da:	46bd      	mov	sp, r7
 80031dc:	b008      	add	sp, #32
 80031de:	bd80      	pop	{r7, pc}

080031e0 <HAL_CAN_GetRxMessage>:
  * @param  aData array where the payload of the Rx frame will be stored.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_GetRxMessage(CAN_HandleTypeDef *hcan, uint32_t RxFifo,
                                       CAN_RxHeaderTypeDef *pHeader, uint8_t aData[])
{
 80031e0:	b580      	push	{r7, lr}
 80031e2:	b086      	sub	sp, #24
 80031e4:	af00      	add	r7, sp, #0
 80031e6:	60f8      	str	r0, [r7, #12]
 80031e8:	60b9      	str	r1, [r7, #8]
 80031ea:	607a      	str	r2, [r7, #4]
 80031ec:	603b      	str	r3, [r7, #0]
  HAL_CAN_StateTypeDef state = hcan->State;
 80031ee:	2017      	movs	r0, #23
 80031f0:	183b      	adds	r3, r7, r0
 80031f2:	68fa      	ldr	r2, [r7, #12]
 80031f4:	2120      	movs	r1, #32
 80031f6:	5c52      	ldrb	r2, [r2, r1]
 80031f8:	701a      	strb	r2, [r3, #0]

  assert_param(IS_CAN_RX_FIFO(RxFifo));

  if ((state == HAL_CAN_STATE_READY) ||
 80031fa:	0002      	movs	r2, r0
 80031fc:	18bb      	adds	r3, r7, r2
 80031fe:	781b      	ldrb	r3, [r3, #0]
 8003200:	2b01      	cmp	r3, #1
 8003202:	d004      	beq.n	800320e <HAL_CAN_GetRxMessage+0x2e>
 8003204:	18bb      	adds	r3, r7, r2
 8003206:	781b      	ldrb	r3, [r3, #0]
 8003208:	2b02      	cmp	r3, #2
 800320a:	d000      	beq.n	800320e <HAL_CAN_GetRxMessage+0x2e>
 800320c:	e107      	b.n	800341e <HAL_CAN_GetRxMessage+0x23e>
      (state == HAL_CAN_STATE_LISTENING))
  {
    /* Check the Rx FIFO */
    if (RxFifo == CAN_RX_FIFO0) /* Rx element is assigned to Rx FIFO 0 */
 800320e:	68bb      	ldr	r3, [r7, #8]
 8003210:	2b00      	cmp	r3, #0
 8003212:	d10e      	bne.n	8003232 <HAL_CAN_GetRxMessage+0x52>
    {
      /* Check that the Rx FIFO 0 is not empty */
      if ((hcan->Instance->RF0R & CAN_RF0R_FMP0) == 0U)
 8003214:	68fb      	ldr	r3, [r7, #12]
 8003216:	681b      	ldr	r3, [r3, #0]
 8003218:	68db      	ldr	r3, [r3, #12]
 800321a:	2203      	movs	r2, #3
 800321c:	4013      	ands	r3, r2
 800321e:	d117      	bne.n	8003250 <HAL_CAN_GetRxMessage+0x70>
      {
        /* Update error code */
        hcan->ErrorCode |= HAL_CAN_ERROR_PARAM;
 8003220:	68fb      	ldr	r3, [r7, #12]
 8003222:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003224:	2280      	movs	r2, #128	; 0x80
 8003226:	0392      	lsls	r2, r2, #14
 8003228:	431a      	orrs	r2, r3
 800322a:	68fb      	ldr	r3, [r7, #12]
 800322c:	625a      	str	r2, [r3, #36]	; 0x24

        return HAL_ERROR;
 800322e:	2301      	movs	r3, #1
 8003230:	e0fd      	b.n	800342e <HAL_CAN_GetRxMessage+0x24e>
      }
    }
    else /* Rx element is assigned to Rx FIFO 1 */
    {
      /* Check that the Rx FIFO 1 is not empty */
      if ((hcan->Instance->RF1R & CAN_RF1R_FMP1) == 0U)
 8003232:	68fb      	ldr	r3, [r7, #12]
 8003234:	681b      	ldr	r3, [r3, #0]
 8003236:	691b      	ldr	r3, [r3, #16]
 8003238:	2203      	movs	r2, #3
 800323a:	4013      	ands	r3, r2
 800323c:	d108      	bne.n	8003250 <HAL_CAN_GetRxMessage+0x70>
      {
        /* Update error code */
        hcan->ErrorCode |= HAL_CAN_ERROR_PARAM;
 800323e:	68fb      	ldr	r3, [r7, #12]
 8003240:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003242:	2280      	movs	r2, #128	; 0x80
 8003244:	0392      	lsls	r2, r2, #14
 8003246:	431a      	orrs	r2, r3
 8003248:	68fb      	ldr	r3, [r7, #12]
 800324a:	625a      	str	r2, [r3, #36]	; 0x24

        return HAL_ERROR;
 800324c:	2301      	movs	r3, #1
 800324e:	e0ee      	b.n	800342e <HAL_CAN_GetRxMessage+0x24e>
      }
    }

    /* Get the header */
    pHeader->IDE = CAN_RI0R_IDE & hcan->Instance->sFIFOMailBox[RxFifo].RIR;
 8003250:	68fb      	ldr	r3, [r7, #12]
 8003252:	681b      	ldr	r3, [r3, #0]
 8003254:	68ba      	ldr	r2, [r7, #8]
 8003256:	321b      	adds	r2, #27
 8003258:	0112      	lsls	r2, r2, #4
 800325a:	58d3      	ldr	r3, [r2, r3]
 800325c:	2204      	movs	r2, #4
 800325e:	401a      	ands	r2, r3
 8003260:	687b      	ldr	r3, [r7, #4]
 8003262:	609a      	str	r2, [r3, #8]
    if (pHeader->IDE == CAN_ID_STD)
 8003264:	687b      	ldr	r3, [r7, #4]
 8003266:	689b      	ldr	r3, [r3, #8]
 8003268:	2b00      	cmp	r3, #0
 800326a:	d10b      	bne.n	8003284 <HAL_CAN_GetRxMessage+0xa4>
    {
      pHeader->StdId = (CAN_RI0R_STID & hcan->Instance->sFIFOMailBox[RxFifo].RIR) >> CAN_TI0R_STID_Pos;
 800326c:	68fb      	ldr	r3, [r7, #12]
 800326e:	681b      	ldr	r3, [r3, #0]
 8003270:	68ba      	ldr	r2, [r7, #8]
 8003272:	321b      	adds	r2, #27
 8003274:	0112      	lsls	r2, r2, #4
 8003276:	58d3      	ldr	r3, [r2, r3]
 8003278:	0d5b      	lsrs	r3, r3, #21
 800327a:	055b      	lsls	r3, r3, #21
 800327c:	0d5a      	lsrs	r2, r3, #21
 800327e:	687b      	ldr	r3, [r7, #4]
 8003280:	601a      	str	r2, [r3, #0]
 8003282:	e00a      	b.n	800329a <HAL_CAN_GetRxMessage+0xba>
    }
    else
    {
      pHeader->ExtId = ((CAN_RI0R_EXID | CAN_RI0R_STID) &
                        hcan->Instance->sFIFOMailBox[RxFifo].RIR) >> CAN_RI0R_EXID_Pos;
 8003284:	68fb      	ldr	r3, [r7, #12]
 8003286:	681b      	ldr	r3, [r3, #0]
 8003288:	68ba      	ldr	r2, [r7, #8]
 800328a:	321b      	adds	r2, #27
 800328c:	0112      	lsls	r2, r2, #4
 800328e:	58d3      	ldr	r3, [r2, r3]
 8003290:	08db      	lsrs	r3, r3, #3
 8003292:	00db      	lsls	r3, r3, #3
 8003294:	08da      	lsrs	r2, r3, #3
      pHeader->ExtId = ((CAN_RI0R_EXID | CAN_RI0R_STID) &
 8003296:	687b      	ldr	r3, [r7, #4]
 8003298:	605a      	str	r2, [r3, #4]
    }
    pHeader->RTR = (CAN_RI0R_RTR & hcan->Instance->sFIFOMailBox[RxFifo].RIR);
 800329a:	68fb      	ldr	r3, [r7, #12]
 800329c:	681b      	ldr	r3, [r3, #0]
 800329e:	68ba      	ldr	r2, [r7, #8]
 80032a0:	321b      	adds	r2, #27
 80032a2:	0112      	lsls	r2, r2, #4
 80032a4:	58d3      	ldr	r3, [r2, r3]
 80032a6:	2202      	movs	r2, #2
 80032a8:	401a      	ands	r2, r3
 80032aa:	687b      	ldr	r3, [r7, #4]
 80032ac:	60da      	str	r2, [r3, #12]
    if (((CAN_RDT0R_DLC & hcan->Instance->sFIFOMailBox[RxFifo].RDTR) >> CAN_RDT0R_DLC_Pos) >= 8U)
 80032ae:	68fb      	ldr	r3, [r7, #12]
 80032b0:	681a      	ldr	r2, [r3, #0]
 80032b2:	68bb      	ldr	r3, [r7, #8]
 80032b4:	331b      	adds	r3, #27
 80032b6:	011b      	lsls	r3, r3, #4
 80032b8:	18d3      	adds	r3, r2, r3
 80032ba:	3304      	adds	r3, #4
 80032bc:	681b      	ldr	r3, [r3, #0]
 80032be:	2208      	movs	r2, #8
 80032c0:	4013      	ands	r3, r2
 80032c2:	d003      	beq.n	80032cc <HAL_CAN_GetRxMessage+0xec>
    {
      /* Truncate DLC to 8 if received field is over range */
      pHeader->DLC = 8U;
 80032c4:	687b      	ldr	r3, [r7, #4]
 80032c6:	2208      	movs	r2, #8
 80032c8:	611a      	str	r2, [r3, #16]
 80032ca:	e00b      	b.n	80032e4 <HAL_CAN_GetRxMessage+0x104>
    }
    else
    {
      pHeader->DLC = (CAN_RDT0R_DLC & hcan->Instance->sFIFOMailBox[RxFifo].RDTR) >> CAN_RDT0R_DLC_Pos;
 80032cc:	68fb      	ldr	r3, [r7, #12]
 80032ce:	681a      	ldr	r2, [r3, #0]
 80032d0:	68bb      	ldr	r3, [r7, #8]
 80032d2:	331b      	adds	r3, #27
 80032d4:	011b      	lsls	r3, r3, #4
 80032d6:	18d3      	adds	r3, r2, r3
 80032d8:	3304      	adds	r3, #4
 80032da:	681b      	ldr	r3, [r3, #0]
 80032dc:	220f      	movs	r2, #15
 80032de:	401a      	ands	r2, r3
 80032e0:	687b      	ldr	r3, [r7, #4]
 80032e2:	611a      	str	r2, [r3, #16]
    }
    pHeader->FilterMatchIndex = (CAN_RDT0R_FMI & hcan->Instance->sFIFOMailBox[RxFifo].RDTR) >> CAN_RDT0R_FMI_Pos;
 80032e4:	68fb      	ldr	r3, [r7, #12]
 80032e6:	681a      	ldr	r2, [r3, #0]
 80032e8:	68bb      	ldr	r3, [r7, #8]
 80032ea:	331b      	adds	r3, #27
 80032ec:	011b      	lsls	r3, r3, #4
 80032ee:	18d3      	adds	r3, r2, r3
 80032f0:	3304      	adds	r3, #4
 80032f2:	681b      	ldr	r3, [r3, #0]
 80032f4:	0a1b      	lsrs	r3, r3, #8
 80032f6:	22ff      	movs	r2, #255	; 0xff
 80032f8:	401a      	ands	r2, r3
 80032fa:	687b      	ldr	r3, [r7, #4]
 80032fc:	619a      	str	r2, [r3, #24]
    pHeader->Timestamp = (CAN_RDT0R_TIME & hcan->Instance->sFIFOMailBox[RxFifo].RDTR) >> CAN_RDT0R_TIME_Pos;
 80032fe:	68fb      	ldr	r3, [r7, #12]
 8003300:	681a      	ldr	r2, [r3, #0]
 8003302:	68bb      	ldr	r3, [r7, #8]
 8003304:	331b      	adds	r3, #27
 8003306:	011b      	lsls	r3, r3, #4
 8003308:	18d3      	adds	r3, r2, r3
 800330a:	3304      	adds	r3, #4
 800330c:	681b      	ldr	r3, [r3, #0]
 800330e:	0c1b      	lsrs	r3, r3, #16
 8003310:	041b      	lsls	r3, r3, #16
 8003312:	0c1a      	lsrs	r2, r3, #16
 8003314:	687b      	ldr	r3, [r7, #4]
 8003316:	615a      	str	r2, [r3, #20]

    /* Get the data */
    aData[0] = (uint8_t)((CAN_RDL0R_DATA0 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA0_Pos);
 8003318:	68fb      	ldr	r3, [r7, #12]
 800331a:	6819      	ldr	r1, [r3, #0]
 800331c:	68ba      	ldr	r2, [r7, #8]
 800331e:	23dc      	movs	r3, #220	; 0xdc
 8003320:	005b      	lsls	r3, r3, #1
 8003322:	0112      	lsls	r2, r2, #4
 8003324:	188a      	adds	r2, r1, r2
 8003326:	18d3      	adds	r3, r2, r3
 8003328:	681b      	ldr	r3, [r3, #0]
 800332a:	b2da      	uxtb	r2, r3
 800332c:	683b      	ldr	r3, [r7, #0]
 800332e:	701a      	strb	r2, [r3, #0]
    aData[1] = (uint8_t)((CAN_RDL0R_DATA1 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA1_Pos);
 8003330:	68fb      	ldr	r3, [r7, #12]
 8003332:	6819      	ldr	r1, [r3, #0]
 8003334:	68ba      	ldr	r2, [r7, #8]
 8003336:	23dc      	movs	r3, #220	; 0xdc
 8003338:	005b      	lsls	r3, r3, #1
 800333a:	0112      	lsls	r2, r2, #4
 800333c:	188a      	adds	r2, r1, r2
 800333e:	18d3      	adds	r3, r2, r3
 8003340:	681b      	ldr	r3, [r3, #0]
 8003342:	0a1a      	lsrs	r2, r3, #8
 8003344:	683b      	ldr	r3, [r7, #0]
 8003346:	3301      	adds	r3, #1
 8003348:	b2d2      	uxtb	r2, r2
 800334a:	701a      	strb	r2, [r3, #0]
    aData[2] = (uint8_t)((CAN_RDL0R_DATA2 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA2_Pos);
 800334c:	68fb      	ldr	r3, [r7, #12]
 800334e:	6819      	ldr	r1, [r3, #0]
 8003350:	68ba      	ldr	r2, [r7, #8]
 8003352:	23dc      	movs	r3, #220	; 0xdc
 8003354:	005b      	lsls	r3, r3, #1
 8003356:	0112      	lsls	r2, r2, #4
 8003358:	188a      	adds	r2, r1, r2
 800335a:	18d3      	adds	r3, r2, r3
 800335c:	681b      	ldr	r3, [r3, #0]
 800335e:	0c1a      	lsrs	r2, r3, #16
 8003360:	683b      	ldr	r3, [r7, #0]
 8003362:	3302      	adds	r3, #2
 8003364:	b2d2      	uxtb	r2, r2
 8003366:	701a      	strb	r2, [r3, #0]
    aData[3] = (uint8_t)((CAN_RDL0R_DATA3 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA3_Pos);
 8003368:	68fb      	ldr	r3, [r7, #12]
 800336a:	6819      	ldr	r1, [r3, #0]
 800336c:	68ba      	ldr	r2, [r7, #8]
 800336e:	23dc      	movs	r3, #220	; 0xdc
 8003370:	005b      	lsls	r3, r3, #1
 8003372:	0112      	lsls	r2, r2, #4
 8003374:	188a      	adds	r2, r1, r2
 8003376:	18d3      	adds	r3, r2, r3
 8003378:	681b      	ldr	r3, [r3, #0]
 800337a:	0e1a      	lsrs	r2, r3, #24
 800337c:	683b      	ldr	r3, [r7, #0]
 800337e:	3303      	adds	r3, #3
 8003380:	b2d2      	uxtb	r2, r2
 8003382:	701a      	strb	r2, [r3, #0]
    aData[4] = (uint8_t)((CAN_RDH0R_DATA4 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA4_Pos);
 8003384:	68fb      	ldr	r3, [r7, #12]
 8003386:	6819      	ldr	r1, [r3, #0]
 8003388:	68ba      	ldr	r2, [r7, #8]
 800338a:	23de      	movs	r3, #222	; 0xde
 800338c:	005b      	lsls	r3, r3, #1
 800338e:	0112      	lsls	r2, r2, #4
 8003390:	188a      	adds	r2, r1, r2
 8003392:	18d3      	adds	r3, r2, r3
 8003394:	681a      	ldr	r2, [r3, #0]
 8003396:	683b      	ldr	r3, [r7, #0]
 8003398:	3304      	adds	r3, #4
 800339a:	b2d2      	uxtb	r2, r2
 800339c:	701a      	strb	r2, [r3, #0]
    aData[5] = (uint8_t)((CAN_RDH0R_DATA5 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA5_Pos);
 800339e:	68fb      	ldr	r3, [r7, #12]
 80033a0:	6819      	ldr	r1, [r3, #0]
 80033a2:	68ba      	ldr	r2, [r7, #8]
 80033a4:	23de      	movs	r3, #222	; 0xde
 80033a6:	005b      	lsls	r3, r3, #1
 80033a8:	0112      	lsls	r2, r2, #4
 80033aa:	188a      	adds	r2, r1, r2
 80033ac:	18d3      	adds	r3, r2, r3
 80033ae:	681b      	ldr	r3, [r3, #0]
 80033b0:	0a1a      	lsrs	r2, r3, #8
 80033b2:	683b      	ldr	r3, [r7, #0]
 80033b4:	3305      	adds	r3, #5
 80033b6:	b2d2      	uxtb	r2, r2
 80033b8:	701a      	strb	r2, [r3, #0]
    aData[6] = (uint8_t)((CAN_RDH0R_DATA6 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA6_Pos);
 80033ba:	68fb      	ldr	r3, [r7, #12]
 80033bc:	6819      	ldr	r1, [r3, #0]
 80033be:	68ba      	ldr	r2, [r7, #8]
 80033c0:	23de      	movs	r3, #222	; 0xde
 80033c2:	005b      	lsls	r3, r3, #1
 80033c4:	0112      	lsls	r2, r2, #4
 80033c6:	188a      	adds	r2, r1, r2
 80033c8:	18d3      	adds	r3, r2, r3
 80033ca:	681b      	ldr	r3, [r3, #0]
 80033cc:	0c1a      	lsrs	r2, r3, #16
 80033ce:	683b      	ldr	r3, [r7, #0]
 80033d0:	3306      	adds	r3, #6
 80033d2:	b2d2      	uxtb	r2, r2
 80033d4:	701a      	strb	r2, [r3, #0]
    aData[7] = (uint8_t)((CAN_RDH0R_DATA7 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA7_Pos);
 80033d6:	68fb      	ldr	r3, [r7, #12]
 80033d8:	6819      	ldr	r1, [r3, #0]
 80033da:	68ba      	ldr	r2, [r7, #8]
 80033dc:	23de      	movs	r3, #222	; 0xde
 80033de:	005b      	lsls	r3, r3, #1
 80033e0:	0112      	lsls	r2, r2, #4
 80033e2:	188a      	adds	r2, r1, r2
 80033e4:	18d3      	adds	r3, r2, r3
 80033e6:	681b      	ldr	r3, [r3, #0]
 80033e8:	0e1a      	lsrs	r2, r3, #24
 80033ea:	683b      	ldr	r3, [r7, #0]
 80033ec:	3307      	adds	r3, #7
 80033ee:	b2d2      	uxtb	r2, r2
 80033f0:	701a      	strb	r2, [r3, #0]

    /* Release the FIFO */
    if (RxFifo == CAN_RX_FIFO0) /* Rx element is assigned to Rx FIFO 0 */
 80033f2:	68bb      	ldr	r3, [r7, #8]
 80033f4:	2b00      	cmp	r3, #0
 80033f6:	d108      	bne.n	800340a <HAL_CAN_GetRxMessage+0x22a>
    {
      /* Release RX FIFO 0 */
      SET_BIT(hcan->Instance->RF0R, CAN_RF0R_RFOM0);
 80033f8:	68fb      	ldr	r3, [r7, #12]
 80033fa:	681b      	ldr	r3, [r3, #0]
 80033fc:	68da      	ldr	r2, [r3, #12]
 80033fe:	68fb      	ldr	r3, [r7, #12]
 8003400:	681b      	ldr	r3, [r3, #0]
 8003402:	2120      	movs	r1, #32
 8003404:	430a      	orrs	r2, r1
 8003406:	60da      	str	r2, [r3, #12]
 8003408:	e007      	b.n	800341a <HAL_CAN_GetRxMessage+0x23a>
    }
    else /* Rx element is assigned to Rx FIFO 1 */
    {
      /* Release RX FIFO 1 */
      SET_BIT(hcan->Instance->RF1R, CAN_RF1R_RFOM1);
 800340a:	68fb      	ldr	r3, [r7, #12]
 800340c:	681b      	ldr	r3, [r3, #0]
 800340e:	691a      	ldr	r2, [r3, #16]
 8003410:	68fb      	ldr	r3, [r7, #12]
 8003412:	681b      	ldr	r3, [r3, #0]
 8003414:	2120      	movs	r1, #32
 8003416:	430a      	orrs	r2, r1
 8003418:	611a      	str	r2, [r3, #16]
    }

    /* Return function status */
    return HAL_OK;
 800341a:	2300      	movs	r3, #0
 800341c:	e007      	b.n	800342e <HAL_CAN_GetRxMessage+0x24e>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 800341e:	68fb      	ldr	r3, [r7, #12]
 8003420:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003422:	2280      	movs	r2, #128	; 0x80
 8003424:	02d2      	lsls	r2, r2, #11
 8003426:	431a      	orrs	r2, r3
 8003428:	68fb      	ldr	r3, [r7, #12]
 800342a:	625a      	str	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 800342c:	2301      	movs	r3, #1
  }
}
 800342e:	0018      	movs	r0, r3
 8003430:	46bd      	mov	sp, r7
 8003432:	b006      	add	sp, #24
 8003434:	bd80      	pop	{r7, pc}

08003436 <HAL_CAN_ActivateNotification>:
  * @param  ActiveITs indicates which interrupts will be enabled.
  *         This parameter can be any combination of @arg CAN_Interrupts.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_ActivateNotification(CAN_HandleTypeDef *hcan, uint32_t ActiveITs)
{
 8003436:	b580      	push	{r7, lr}
 8003438:	b084      	sub	sp, #16
 800343a:	af00      	add	r7, sp, #0
 800343c:	6078      	str	r0, [r7, #4]
 800343e:	6039      	str	r1, [r7, #0]
  HAL_CAN_StateTypeDef state = hcan->State;
 8003440:	200f      	movs	r0, #15
 8003442:	183b      	adds	r3, r7, r0
 8003444:	687a      	ldr	r2, [r7, #4]
 8003446:	2120      	movs	r1, #32
 8003448:	5c52      	ldrb	r2, [r2, r1]
 800344a:	701a      	strb	r2, [r3, #0]

  /* Check function parameters */
  assert_param(IS_CAN_IT(ActiveITs));

  if ((state == HAL_CAN_STATE_READY) ||
 800344c:	0002      	movs	r2, r0
 800344e:	18bb      	adds	r3, r7, r2
 8003450:	781b      	ldrb	r3, [r3, #0]
 8003452:	2b01      	cmp	r3, #1
 8003454:	d003      	beq.n	800345e <HAL_CAN_ActivateNotification+0x28>
 8003456:	18bb      	adds	r3, r7, r2
 8003458:	781b      	ldrb	r3, [r3, #0]
 800345a:	2b02      	cmp	r3, #2
 800345c:	d109      	bne.n	8003472 <HAL_CAN_ActivateNotification+0x3c>
      (state == HAL_CAN_STATE_LISTENING))
  {
    /* Enable the selected interrupts */
    __HAL_CAN_ENABLE_IT(hcan, ActiveITs);
 800345e:	687b      	ldr	r3, [r7, #4]
 8003460:	681b      	ldr	r3, [r3, #0]
 8003462:	6959      	ldr	r1, [r3, #20]
 8003464:	687b      	ldr	r3, [r7, #4]
 8003466:	681b      	ldr	r3, [r3, #0]
 8003468:	683a      	ldr	r2, [r7, #0]
 800346a:	430a      	orrs	r2, r1
 800346c:	615a      	str	r2, [r3, #20]

    /* Return function status */
    return HAL_OK;
 800346e:	2300      	movs	r3, #0
 8003470:	e007      	b.n	8003482 <HAL_CAN_ActivateNotification+0x4c>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 8003472:	687b      	ldr	r3, [r7, #4]
 8003474:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003476:	2280      	movs	r2, #128	; 0x80
 8003478:	02d2      	lsls	r2, r2, #11
 800347a:	431a      	orrs	r2, r3
 800347c:	687b      	ldr	r3, [r7, #4]
 800347e:	625a      	str	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 8003480:	2301      	movs	r3, #1
  }
}
 8003482:	0018      	movs	r0, r3
 8003484:	46bd      	mov	sp, r7
 8003486:	b004      	add	sp, #16
 8003488:	bd80      	pop	{r7, pc}

0800348a <HAL_CAN_IRQHandler>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
void HAL_CAN_IRQHandler(CAN_HandleTypeDef *hcan)
{
 800348a:	b580      	push	{r7, lr}
 800348c:	b08a      	sub	sp, #40	; 0x28
 800348e:	af00      	add	r7, sp, #0
 8003490:	6078      	str	r0, [r7, #4]
  uint32_t errorcode = HAL_CAN_ERROR_NONE;
 8003492:	2300      	movs	r3, #0
 8003494:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t interrupts = READ_REG(hcan->Instance->IER);
 8003496:	687b      	ldr	r3, [r7, #4]
 8003498:	681b      	ldr	r3, [r3, #0]
 800349a:	695b      	ldr	r3, [r3, #20]
 800349c:	623b      	str	r3, [r7, #32]
  uint32_t msrflags = READ_REG(hcan->Instance->MSR);
 800349e:	687b      	ldr	r3, [r7, #4]
 80034a0:	681b      	ldr	r3, [r3, #0]
 80034a2:	685b      	ldr	r3, [r3, #4]
 80034a4:	61fb      	str	r3, [r7, #28]
  uint32_t tsrflags = READ_REG(hcan->Instance->TSR);
 80034a6:	687b      	ldr	r3, [r7, #4]
 80034a8:	681b      	ldr	r3, [r3, #0]
 80034aa:	689b      	ldr	r3, [r3, #8]
 80034ac:	61bb      	str	r3, [r7, #24]
  uint32_t rf0rflags = READ_REG(hcan->Instance->RF0R);
 80034ae:	687b      	ldr	r3, [r7, #4]
 80034b0:	681b      	ldr	r3, [r3, #0]
 80034b2:	68db      	ldr	r3, [r3, #12]
 80034b4:	617b      	str	r3, [r7, #20]
  uint32_t rf1rflags = READ_REG(hcan->Instance->RF1R);
 80034b6:	687b      	ldr	r3, [r7, #4]
 80034b8:	681b      	ldr	r3, [r3, #0]
 80034ba:	691b      	ldr	r3, [r3, #16]
 80034bc:	613b      	str	r3, [r7, #16]
  uint32_t esrflags = READ_REG(hcan->Instance->ESR);
 80034be:	687b      	ldr	r3, [r7, #4]
 80034c0:	681b      	ldr	r3, [r3, #0]
 80034c2:	699b      	ldr	r3, [r3, #24]
 80034c4:	60fb      	str	r3, [r7, #12]

  /* Transmit Mailbox empty interrupt management *****************************/
  if ((interrupts & CAN_IT_TX_MAILBOX_EMPTY) != 0U)
 80034c6:	6a3b      	ldr	r3, [r7, #32]
 80034c8:	2201      	movs	r2, #1
 80034ca:	4013      	ands	r3, r2
 80034cc:	d100      	bne.n	80034d0 <HAL_CAN_IRQHandler+0x46>
 80034ce:	e084      	b.n	80035da <HAL_CAN_IRQHandler+0x150>
  {
    /* Transmit Mailbox 0 management *****************************************/
    if ((tsrflags & CAN_TSR_RQCP0) != 0U)
 80034d0:	69bb      	ldr	r3, [r7, #24]
 80034d2:	2201      	movs	r2, #1
 80034d4:	4013      	ands	r3, r2
 80034d6:	d024      	beq.n	8003522 <HAL_CAN_IRQHandler+0x98>
    {
      /* Clear the Transmission Complete flag (and TXOK0,ALST0,TERR0 bits) */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_RQCP0);
 80034d8:	687b      	ldr	r3, [r7, #4]
 80034da:	681b      	ldr	r3, [r3, #0]
 80034dc:	2201      	movs	r2, #1
 80034de:	609a      	str	r2, [r3, #8]

      if ((tsrflags & CAN_TSR_TXOK0) != 0U)
 80034e0:	69bb      	ldr	r3, [r7, #24]
 80034e2:	2202      	movs	r2, #2
 80034e4:	4013      	ands	r3, r2
 80034e6:	d004      	beq.n	80034f2 <HAL_CAN_IRQHandler+0x68>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
        /* Call registered callback*/
        hcan->TxMailbox0CompleteCallback(hcan);
#else
        /* Call weak (surcharged) callback */
        HAL_CAN_TxMailbox0CompleteCallback(hcan);
 80034e8:	687b      	ldr	r3, [r7, #4]
 80034ea:	0018      	movs	r0, r3
 80034ec:	f000 f981 	bl	80037f2 <HAL_CAN_TxMailbox0CompleteCallback>
 80034f0:	e017      	b.n	8003522 <HAL_CAN_IRQHandler+0x98>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
      }
      else
      {
        if ((tsrflags & CAN_TSR_ALST0) != 0U)
 80034f2:	69bb      	ldr	r3, [r7, #24]
 80034f4:	2204      	movs	r2, #4
 80034f6:	4013      	ands	r3, r2
 80034f8:	d005      	beq.n	8003506 <HAL_CAN_IRQHandler+0x7c>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_ALST0;
 80034fa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80034fc:	2280      	movs	r2, #128	; 0x80
 80034fe:	0112      	lsls	r2, r2, #4
 8003500:	4313      	orrs	r3, r2
 8003502:	627b      	str	r3, [r7, #36]	; 0x24
 8003504:	e00d      	b.n	8003522 <HAL_CAN_IRQHandler+0x98>
        }
        else if ((tsrflags & CAN_TSR_TERR0) != 0U)
 8003506:	69bb      	ldr	r3, [r7, #24]
 8003508:	2208      	movs	r2, #8
 800350a:	4013      	ands	r3, r2
 800350c:	d005      	beq.n	800351a <HAL_CAN_IRQHandler+0x90>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_TERR0;
 800350e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003510:	2280      	movs	r2, #128	; 0x80
 8003512:	0152      	lsls	r2, r2, #5
 8003514:	4313      	orrs	r3, r2
 8003516:	627b      	str	r3, [r7, #36]	; 0x24
 8003518:	e003      	b.n	8003522 <HAL_CAN_IRQHandler+0x98>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
          /* Call registered callback*/
          hcan->TxMailbox0AbortCallback(hcan);
#else
          /* Call weak (surcharged) callback */
          HAL_CAN_TxMailbox0AbortCallback(hcan);
 800351a:	687b      	ldr	r3, [r7, #4]
 800351c:	0018      	movs	r0, r3
 800351e:	f000 f980 	bl	8003822 <HAL_CAN_TxMailbox0AbortCallback>
        }
      }
    }

    /* Transmit Mailbox 1 management *****************************************/
    if ((tsrflags & CAN_TSR_RQCP1) != 0U)
 8003522:	69ba      	ldr	r2, [r7, #24]
 8003524:	2380      	movs	r3, #128	; 0x80
 8003526:	005b      	lsls	r3, r3, #1
 8003528:	4013      	ands	r3, r2
 800352a:	d028      	beq.n	800357e <HAL_CAN_IRQHandler+0xf4>
    {
      /* Clear the Transmission Complete flag (and TXOK1,ALST1,TERR1 bits) */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_RQCP1);
 800352c:	687b      	ldr	r3, [r7, #4]
 800352e:	681b      	ldr	r3, [r3, #0]
 8003530:	2280      	movs	r2, #128	; 0x80
 8003532:	0052      	lsls	r2, r2, #1
 8003534:	609a      	str	r2, [r3, #8]

      if ((tsrflags & CAN_TSR_TXOK1) != 0U)
 8003536:	69ba      	ldr	r2, [r7, #24]
 8003538:	2380      	movs	r3, #128	; 0x80
 800353a:	009b      	lsls	r3, r3, #2
 800353c:	4013      	ands	r3, r2
 800353e:	d004      	beq.n	800354a <HAL_CAN_IRQHandler+0xc0>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
        /* Call registered callback*/
        hcan->TxMailbox1CompleteCallback(hcan);
#else
        /* Call weak (surcharged) callback */
        HAL_CAN_TxMailbox1CompleteCallback(hcan);
 8003540:	687b      	ldr	r3, [r7, #4]
 8003542:	0018      	movs	r0, r3
 8003544:	f000 f95d 	bl	8003802 <HAL_CAN_TxMailbox1CompleteCallback>
 8003548:	e019      	b.n	800357e <HAL_CAN_IRQHandler+0xf4>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
      }
      else
      {
        if ((tsrflags & CAN_TSR_ALST1) != 0U)
 800354a:	69ba      	ldr	r2, [r7, #24]
 800354c:	2380      	movs	r3, #128	; 0x80
 800354e:	00db      	lsls	r3, r3, #3
 8003550:	4013      	ands	r3, r2
 8003552:	d005      	beq.n	8003560 <HAL_CAN_IRQHandler+0xd6>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_ALST1;
 8003554:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003556:	2280      	movs	r2, #128	; 0x80
 8003558:	0192      	lsls	r2, r2, #6
 800355a:	4313      	orrs	r3, r2
 800355c:	627b      	str	r3, [r7, #36]	; 0x24
 800355e:	e00e      	b.n	800357e <HAL_CAN_IRQHandler+0xf4>
        }
        else if ((tsrflags & CAN_TSR_TERR1) != 0U)
 8003560:	69ba      	ldr	r2, [r7, #24]
 8003562:	2380      	movs	r3, #128	; 0x80
 8003564:	011b      	lsls	r3, r3, #4
 8003566:	4013      	ands	r3, r2
 8003568:	d005      	beq.n	8003576 <HAL_CAN_IRQHandler+0xec>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_TERR1;
 800356a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800356c:	2280      	movs	r2, #128	; 0x80
 800356e:	01d2      	lsls	r2, r2, #7
 8003570:	4313      	orrs	r3, r2
 8003572:	627b      	str	r3, [r7, #36]	; 0x24
 8003574:	e003      	b.n	800357e <HAL_CAN_IRQHandler+0xf4>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
          /* Call registered callback*/
          hcan->TxMailbox1AbortCallback(hcan);
#else
          /* Call weak (surcharged) callback */
          HAL_CAN_TxMailbox1AbortCallback(hcan);
 8003576:	687b      	ldr	r3, [r7, #4]
 8003578:	0018      	movs	r0, r3
 800357a:	f000 f95a 	bl	8003832 <HAL_CAN_TxMailbox1AbortCallback>
        }
      }
    }

    /* Transmit Mailbox 2 management *****************************************/
    if ((tsrflags & CAN_TSR_RQCP2) != 0U)
 800357e:	69ba      	ldr	r2, [r7, #24]
 8003580:	2380      	movs	r3, #128	; 0x80
 8003582:	025b      	lsls	r3, r3, #9
 8003584:	4013      	ands	r3, r2
 8003586:	d028      	beq.n	80035da <HAL_CAN_IRQHandler+0x150>
    {
      /* Clear the Transmission Complete flag (and TXOK2,ALST2,TERR2 bits) */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_RQCP2);
 8003588:	687b      	ldr	r3, [r7, #4]
 800358a:	681b      	ldr	r3, [r3, #0]
 800358c:	2280      	movs	r2, #128	; 0x80
 800358e:	0252      	lsls	r2, r2, #9
 8003590:	609a      	str	r2, [r3, #8]

      if ((tsrflags & CAN_TSR_TXOK2) != 0U)
 8003592:	69ba      	ldr	r2, [r7, #24]
 8003594:	2380      	movs	r3, #128	; 0x80
 8003596:	029b      	lsls	r3, r3, #10
 8003598:	4013      	ands	r3, r2
 800359a:	d004      	beq.n	80035a6 <HAL_CAN_IRQHandler+0x11c>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
        /* Call registered callback*/
        hcan->TxMailbox2CompleteCallback(hcan);
#else
        /* Call weak (surcharged) callback */
        HAL_CAN_TxMailbox2CompleteCallback(hcan);
 800359c:	687b      	ldr	r3, [r7, #4]
 800359e:	0018      	movs	r0, r3
 80035a0:	f000 f937 	bl	8003812 <HAL_CAN_TxMailbox2CompleteCallback>
 80035a4:	e019      	b.n	80035da <HAL_CAN_IRQHandler+0x150>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
      }
      else
      {
        if ((tsrflags & CAN_TSR_ALST2) != 0U)
 80035a6:	69ba      	ldr	r2, [r7, #24]
 80035a8:	2380      	movs	r3, #128	; 0x80
 80035aa:	02db      	lsls	r3, r3, #11
 80035ac:	4013      	ands	r3, r2
 80035ae:	d005      	beq.n	80035bc <HAL_CAN_IRQHandler+0x132>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_ALST2;
 80035b0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80035b2:	2280      	movs	r2, #128	; 0x80
 80035b4:	0212      	lsls	r2, r2, #8
 80035b6:	4313      	orrs	r3, r2
 80035b8:	627b      	str	r3, [r7, #36]	; 0x24
 80035ba:	e00e      	b.n	80035da <HAL_CAN_IRQHandler+0x150>
        }
        else if ((tsrflags & CAN_TSR_TERR2) != 0U)
 80035bc:	69ba      	ldr	r2, [r7, #24]
 80035be:	2380      	movs	r3, #128	; 0x80
 80035c0:	031b      	lsls	r3, r3, #12
 80035c2:	4013      	ands	r3, r2
 80035c4:	d005      	beq.n	80035d2 <HAL_CAN_IRQHandler+0x148>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_TERR2;
 80035c6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80035c8:	2280      	movs	r2, #128	; 0x80
 80035ca:	0252      	lsls	r2, r2, #9
 80035cc:	4313      	orrs	r3, r2
 80035ce:	627b      	str	r3, [r7, #36]	; 0x24
 80035d0:	e003      	b.n	80035da <HAL_CAN_IRQHandler+0x150>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
          /* Call registered callback*/
          hcan->TxMailbox2AbortCallback(hcan);
#else
          /* Call weak (surcharged) callback */
          HAL_CAN_TxMailbox2AbortCallback(hcan);
 80035d2:	687b      	ldr	r3, [r7, #4]
 80035d4:	0018      	movs	r0, r3
 80035d6:	f000 f934 	bl	8003842 <HAL_CAN_TxMailbox2AbortCallback>
      }
    }
  }

  /* Receive FIFO 0 overrun interrupt management *****************************/
  if ((interrupts & CAN_IT_RX_FIFO0_OVERRUN) != 0U)
 80035da:	6a3b      	ldr	r3, [r7, #32]
 80035dc:	2208      	movs	r2, #8
 80035de:	4013      	ands	r3, r2
 80035e0:	d00c      	beq.n	80035fc <HAL_CAN_IRQHandler+0x172>
  {
    if ((rf0rflags & CAN_RF0R_FOVR0) != 0U)
 80035e2:	697b      	ldr	r3, [r7, #20]
 80035e4:	2210      	movs	r2, #16
 80035e6:	4013      	ands	r3, r2
 80035e8:	d008      	beq.n	80035fc <HAL_CAN_IRQHandler+0x172>
    {
      /* Set CAN error code to Rx Fifo 0 overrun error */
      errorcode |= HAL_CAN_ERROR_RX_FOV0;
 80035ea:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80035ec:	2280      	movs	r2, #128	; 0x80
 80035ee:	0092      	lsls	r2, r2, #2
 80035f0:	4313      	orrs	r3, r2
 80035f2:	627b      	str	r3, [r7, #36]	; 0x24

      /* Clear FIFO0 Overrun Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FOV0);
 80035f4:	687b      	ldr	r3, [r7, #4]
 80035f6:	681b      	ldr	r3, [r3, #0]
 80035f8:	2210      	movs	r2, #16
 80035fa:	60da      	str	r2, [r3, #12]
    }
  }

  /* Receive FIFO 0 full interrupt management ********************************/
  if ((interrupts & CAN_IT_RX_FIFO0_FULL) != 0U)
 80035fc:	6a3b      	ldr	r3, [r7, #32]
 80035fe:	2204      	movs	r2, #4
 8003600:	4013      	ands	r3, r2
 8003602:	d00b      	beq.n	800361c <HAL_CAN_IRQHandler+0x192>
  {
    if ((rf0rflags & CAN_RF0R_FULL0) != 0U)
 8003604:	697b      	ldr	r3, [r7, #20]
 8003606:	2208      	movs	r2, #8
 8003608:	4013      	ands	r3, r2
 800360a:	d007      	beq.n	800361c <HAL_CAN_IRQHandler+0x192>
    {
      /* Clear FIFO 0 full Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FF0);
 800360c:	687b      	ldr	r3, [r7, #4]
 800360e:	681b      	ldr	r3, [r3, #0]
 8003610:	2208      	movs	r2, #8
 8003612:	60da      	str	r2, [r3, #12]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo0FullCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo0FullCallback(hcan);
 8003614:	687b      	ldr	r3, [r7, #4]
 8003616:	0018      	movs	r0, r3
 8003618:	f000 f91b 	bl	8003852 <HAL_CAN_RxFifo0FullCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Receive FIFO 0 message pending interrupt management *********************/
  if ((interrupts & CAN_IT_RX_FIFO0_MSG_PENDING) != 0U)
 800361c:	6a3b      	ldr	r3, [r7, #32]
 800361e:	2202      	movs	r2, #2
 8003620:	4013      	ands	r3, r2
 8003622:	d009      	beq.n	8003638 <HAL_CAN_IRQHandler+0x1ae>
  {
    /* Check if message is still pending */
    if ((hcan->Instance->RF0R & CAN_RF0R_FMP0) != 0U)
 8003624:	687b      	ldr	r3, [r7, #4]
 8003626:	681b      	ldr	r3, [r3, #0]
 8003628:	68db      	ldr	r3, [r3, #12]
 800362a:	2203      	movs	r2, #3
 800362c:	4013      	ands	r3, r2
 800362e:	d003      	beq.n	8003638 <HAL_CAN_IRQHandler+0x1ae>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo0MsgPendingCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo0MsgPendingCallback(hcan);
 8003630:	687b      	ldr	r3, [r7, #4]
 8003632:	0018      	movs	r0, r3
 8003634:	f7fe f8d0 	bl	80017d8 <HAL_CAN_RxFifo0MsgPendingCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Receive FIFO 1 overrun interrupt management *****************************/
  if ((interrupts & CAN_IT_RX_FIFO1_OVERRUN) != 0U)
 8003638:	6a3b      	ldr	r3, [r7, #32]
 800363a:	2240      	movs	r2, #64	; 0x40
 800363c:	4013      	ands	r3, r2
 800363e:	d00c      	beq.n	800365a <HAL_CAN_IRQHandler+0x1d0>
  {
    if ((rf1rflags & CAN_RF1R_FOVR1) != 0U)
 8003640:	693b      	ldr	r3, [r7, #16]
 8003642:	2210      	movs	r2, #16
 8003644:	4013      	ands	r3, r2
 8003646:	d008      	beq.n	800365a <HAL_CAN_IRQHandler+0x1d0>
    {
      /* Set CAN error code to Rx Fifo 1 overrun error */
      errorcode |= HAL_CAN_ERROR_RX_FOV1;
 8003648:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800364a:	2280      	movs	r2, #128	; 0x80
 800364c:	00d2      	lsls	r2, r2, #3
 800364e:	4313      	orrs	r3, r2
 8003650:	627b      	str	r3, [r7, #36]	; 0x24

      /* Clear FIFO1 Overrun Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FOV1);
 8003652:	687b      	ldr	r3, [r7, #4]
 8003654:	681b      	ldr	r3, [r3, #0]
 8003656:	2210      	movs	r2, #16
 8003658:	611a      	str	r2, [r3, #16]
    }
  }

  /* Receive FIFO 1 full interrupt management ********************************/
  if ((interrupts & CAN_IT_RX_FIFO1_FULL) != 0U)
 800365a:	6a3b      	ldr	r3, [r7, #32]
 800365c:	2220      	movs	r2, #32
 800365e:	4013      	ands	r3, r2
 8003660:	d00b      	beq.n	800367a <HAL_CAN_IRQHandler+0x1f0>
  {
    if ((rf1rflags & CAN_RF1R_FULL1) != 0U)
 8003662:	693b      	ldr	r3, [r7, #16]
 8003664:	2208      	movs	r2, #8
 8003666:	4013      	ands	r3, r2
 8003668:	d007      	beq.n	800367a <HAL_CAN_IRQHandler+0x1f0>
    {
      /* Clear FIFO 1 full Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FF1);
 800366a:	687b      	ldr	r3, [r7, #4]
 800366c:	681b      	ldr	r3, [r3, #0]
 800366e:	2208      	movs	r2, #8
 8003670:	611a      	str	r2, [r3, #16]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo1FullCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo1FullCallback(hcan);
 8003672:	687b      	ldr	r3, [r7, #4]
 8003674:	0018      	movs	r0, r3
 8003676:	f000 f8fc 	bl	8003872 <HAL_CAN_RxFifo1FullCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Receive FIFO 1 message pending interrupt management *********************/
  if ((interrupts & CAN_IT_RX_FIFO1_MSG_PENDING) != 0U)
 800367a:	6a3b      	ldr	r3, [r7, #32]
 800367c:	2210      	movs	r2, #16
 800367e:	4013      	ands	r3, r2
 8003680:	d009      	beq.n	8003696 <HAL_CAN_IRQHandler+0x20c>
  {
    /* Check if message is still pending */
    if ((hcan->Instance->RF1R & CAN_RF1R_FMP1) != 0U)
 8003682:	687b      	ldr	r3, [r7, #4]
 8003684:	681b      	ldr	r3, [r3, #0]
 8003686:	691b      	ldr	r3, [r3, #16]
 8003688:	2203      	movs	r2, #3
 800368a:	4013      	ands	r3, r2
 800368c:	d003      	beq.n	8003696 <HAL_CAN_IRQHandler+0x20c>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo1MsgPendingCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo1MsgPendingCallback(hcan);
 800368e:	687b      	ldr	r3, [r7, #4]
 8003690:	0018      	movs	r0, r3
 8003692:	f000 f8e6 	bl	8003862 <HAL_CAN_RxFifo1MsgPendingCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Sleep interrupt management *********************************************/
  if ((interrupts & CAN_IT_SLEEP_ACK) != 0U)
 8003696:	6a3a      	ldr	r2, [r7, #32]
 8003698:	2380      	movs	r3, #128	; 0x80
 800369a:	029b      	lsls	r3, r3, #10
 800369c:	4013      	ands	r3, r2
 800369e:	d00b      	beq.n	80036b8 <HAL_CAN_IRQHandler+0x22e>
  {
    if ((msrflags & CAN_MSR_SLAKI) != 0U)
 80036a0:	69fb      	ldr	r3, [r7, #28]
 80036a2:	2210      	movs	r2, #16
 80036a4:	4013      	ands	r3, r2
 80036a6:	d007      	beq.n	80036b8 <HAL_CAN_IRQHandler+0x22e>
    {
      /* Clear Sleep interrupt Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_SLAKI);
 80036a8:	687b      	ldr	r3, [r7, #4]
 80036aa:	681b      	ldr	r3, [r3, #0]
 80036ac:	2210      	movs	r2, #16
 80036ae:	605a      	str	r2, [r3, #4]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->SleepCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_SleepCallback(hcan);
 80036b0:	687b      	ldr	r3, [r7, #4]
 80036b2:	0018      	movs	r0, r3
 80036b4:	f000 f8e5 	bl	8003882 <HAL_CAN_SleepCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* WakeUp interrupt management *********************************************/
  if ((interrupts & CAN_IT_WAKEUP) != 0U)
 80036b8:	6a3a      	ldr	r2, [r7, #32]
 80036ba:	2380      	movs	r3, #128	; 0x80
 80036bc:	025b      	lsls	r3, r3, #9
 80036be:	4013      	ands	r3, r2
 80036c0:	d00b      	beq.n	80036da <HAL_CAN_IRQHandler+0x250>
  {
    if ((msrflags & CAN_MSR_WKUI) != 0U)
 80036c2:	69fb      	ldr	r3, [r7, #28]
 80036c4:	2208      	movs	r2, #8
 80036c6:	4013      	ands	r3, r2
 80036c8:	d007      	beq.n	80036da <HAL_CAN_IRQHandler+0x250>
    {
      /* Clear WakeUp Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_WKU);
 80036ca:	687b      	ldr	r3, [r7, #4]
 80036cc:	681b      	ldr	r3, [r3, #0]
 80036ce:	2208      	movs	r2, #8
 80036d0:	605a      	str	r2, [r3, #4]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->WakeUpFromRxMsgCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_WakeUpFromRxMsgCallback(hcan);
 80036d2:	687b      	ldr	r3, [r7, #4]
 80036d4:	0018      	movs	r0, r3
 80036d6:	f000 f8dc 	bl	8003892 <HAL_CAN_WakeUpFromRxMsgCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Error interrupts management *********************************************/
  if ((interrupts & CAN_IT_ERROR) != 0U)
 80036da:	6a3a      	ldr	r2, [r7, #32]
 80036dc:	2380      	movs	r3, #128	; 0x80
 80036de:	021b      	lsls	r3, r3, #8
 80036e0:	4013      	ands	r3, r2
 80036e2:	d100      	bne.n	80036e6 <HAL_CAN_IRQHandler+0x25c>
 80036e4:	e074      	b.n	80037d0 <HAL_CAN_IRQHandler+0x346>
  {
    if ((msrflags & CAN_MSR_ERRI) != 0U)
 80036e6:	69fb      	ldr	r3, [r7, #28]
 80036e8:	2204      	movs	r2, #4
 80036ea:	4013      	ands	r3, r2
 80036ec:	d100      	bne.n	80036f0 <HAL_CAN_IRQHandler+0x266>
 80036ee:	e06b      	b.n	80037c8 <HAL_CAN_IRQHandler+0x33e>
    {
      /* Check Error Warning Flag */
      if (((interrupts & CAN_IT_ERROR_WARNING) != 0U) &&
 80036f0:	6a3a      	ldr	r2, [r7, #32]
 80036f2:	2380      	movs	r3, #128	; 0x80
 80036f4:	005b      	lsls	r3, r3, #1
 80036f6:	4013      	ands	r3, r2
 80036f8:	d007      	beq.n	800370a <HAL_CAN_IRQHandler+0x280>
          ((esrflags & CAN_ESR_EWGF) != 0U))
 80036fa:	68fb      	ldr	r3, [r7, #12]
 80036fc:	2201      	movs	r2, #1
 80036fe:	4013      	ands	r3, r2
      if (((interrupts & CAN_IT_ERROR_WARNING) != 0U) &&
 8003700:	d003      	beq.n	800370a <HAL_CAN_IRQHandler+0x280>
      {
        /* Set CAN error code to Error Warning */
        errorcode |= HAL_CAN_ERROR_EWG;
 8003702:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003704:	2201      	movs	r2, #1
 8003706:	4313      	orrs	r3, r2
 8003708:	627b      	str	r3, [r7, #36]	; 0x24

        /* No need for clear of Error Warning Flag as read-only */
      }

      /* Check Error Passive Flag */
      if (((interrupts & CAN_IT_ERROR_PASSIVE) != 0U) &&
 800370a:	6a3a      	ldr	r2, [r7, #32]
 800370c:	2380      	movs	r3, #128	; 0x80
 800370e:	009b      	lsls	r3, r3, #2
 8003710:	4013      	ands	r3, r2
 8003712:	d007      	beq.n	8003724 <HAL_CAN_IRQHandler+0x29a>
          ((esrflags & CAN_ESR_EPVF) != 0U))
 8003714:	68fb      	ldr	r3, [r7, #12]
 8003716:	2202      	movs	r2, #2
 8003718:	4013      	ands	r3, r2
      if (((interrupts & CAN_IT_ERROR_PASSIVE) != 0U) &&
 800371a:	d003      	beq.n	8003724 <HAL_CAN_IRQHandler+0x29a>
      {
        /* Set CAN error code to Error Passive */
        errorcode |= HAL_CAN_ERROR_EPV;
 800371c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800371e:	2202      	movs	r2, #2
 8003720:	4313      	orrs	r3, r2
 8003722:	627b      	str	r3, [r7, #36]	; 0x24

        /* No need for clear of Error Passive Flag as read-only */
      }

      /* Check Bus-off Flag */
      if (((interrupts & CAN_IT_BUSOFF) != 0U) &&
 8003724:	6a3a      	ldr	r2, [r7, #32]
 8003726:	2380      	movs	r3, #128	; 0x80
 8003728:	00db      	lsls	r3, r3, #3
 800372a:	4013      	ands	r3, r2
 800372c:	d007      	beq.n	800373e <HAL_CAN_IRQHandler+0x2b4>
          ((esrflags & CAN_ESR_BOFF) != 0U))
 800372e:	68fb      	ldr	r3, [r7, #12]
 8003730:	2204      	movs	r2, #4
 8003732:	4013      	ands	r3, r2
      if (((interrupts & CAN_IT_BUSOFF) != 0U) &&
 8003734:	d003      	beq.n	800373e <HAL_CAN_IRQHandler+0x2b4>
      {
        /* Set CAN error code to Bus-Off */
        errorcode |= HAL_CAN_ERROR_BOF;
 8003736:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003738:	2204      	movs	r2, #4
 800373a:	4313      	orrs	r3, r2
 800373c:	627b      	str	r3, [r7, #36]	; 0x24

        /* No need for clear of Error Bus-Off as read-only */
      }

      /* Check Last Error Code Flag */
      if (((interrupts & CAN_IT_LAST_ERROR_CODE) != 0U) &&
 800373e:	6a3a      	ldr	r2, [r7, #32]
 8003740:	2380      	movs	r3, #128	; 0x80
 8003742:	011b      	lsls	r3, r3, #4
 8003744:	4013      	ands	r3, r2
 8003746:	d03f      	beq.n	80037c8 <HAL_CAN_IRQHandler+0x33e>
          ((esrflags & CAN_ESR_LEC) != 0U))
 8003748:	68fb      	ldr	r3, [r7, #12]
 800374a:	2270      	movs	r2, #112	; 0x70
 800374c:	4013      	ands	r3, r2
      if (((interrupts & CAN_IT_LAST_ERROR_CODE) != 0U) &&
 800374e:	d03b      	beq.n	80037c8 <HAL_CAN_IRQHandler+0x33e>
      {
        switch (esrflags & CAN_ESR_LEC)
 8003750:	68fb      	ldr	r3, [r7, #12]
 8003752:	2270      	movs	r2, #112	; 0x70
 8003754:	4013      	ands	r3, r2
 8003756:	2b60      	cmp	r3, #96	; 0x60
 8003758:	d027      	beq.n	80037aa <HAL_CAN_IRQHandler+0x320>
 800375a:	d82c      	bhi.n	80037b6 <HAL_CAN_IRQHandler+0x32c>
 800375c:	2b50      	cmp	r3, #80	; 0x50
 800375e:	d01f      	beq.n	80037a0 <HAL_CAN_IRQHandler+0x316>
 8003760:	d829      	bhi.n	80037b6 <HAL_CAN_IRQHandler+0x32c>
 8003762:	2b40      	cmp	r3, #64	; 0x40
 8003764:	d017      	beq.n	8003796 <HAL_CAN_IRQHandler+0x30c>
 8003766:	d826      	bhi.n	80037b6 <HAL_CAN_IRQHandler+0x32c>
 8003768:	2b30      	cmp	r3, #48	; 0x30
 800376a:	d00f      	beq.n	800378c <HAL_CAN_IRQHandler+0x302>
 800376c:	d823      	bhi.n	80037b6 <HAL_CAN_IRQHandler+0x32c>
 800376e:	2b10      	cmp	r3, #16
 8003770:	d002      	beq.n	8003778 <HAL_CAN_IRQHandler+0x2ee>
 8003772:	2b20      	cmp	r3, #32
 8003774:	d005      	beq.n	8003782 <HAL_CAN_IRQHandler+0x2f8>
          case (CAN_ESR_LEC_2 | CAN_ESR_LEC_1):
            /* Set CAN error code to CRC error */
            errorcode |= HAL_CAN_ERROR_CRC;
            break;
          default:
            break;
 8003776:	e01e      	b.n	80037b6 <HAL_CAN_IRQHandler+0x32c>
            errorcode |= HAL_CAN_ERROR_STF;
 8003778:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800377a:	2208      	movs	r2, #8
 800377c:	4313      	orrs	r3, r2
 800377e:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 8003780:	e01a      	b.n	80037b8 <HAL_CAN_IRQHandler+0x32e>
            errorcode |= HAL_CAN_ERROR_FOR;
 8003782:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003784:	2210      	movs	r2, #16
 8003786:	4313      	orrs	r3, r2
 8003788:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 800378a:	e015      	b.n	80037b8 <HAL_CAN_IRQHandler+0x32e>
            errorcode |= HAL_CAN_ERROR_ACK;
 800378c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800378e:	2220      	movs	r2, #32
 8003790:	4313      	orrs	r3, r2
 8003792:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 8003794:	e010      	b.n	80037b8 <HAL_CAN_IRQHandler+0x32e>
            errorcode |= HAL_CAN_ERROR_BR;
 8003796:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003798:	2240      	movs	r2, #64	; 0x40
 800379a:	4313      	orrs	r3, r2
 800379c:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 800379e:	e00b      	b.n	80037b8 <HAL_CAN_IRQHandler+0x32e>
            errorcode |= HAL_CAN_ERROR_BD;
 80037a0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80037a2:	2280      	movs	r2, #128	; 0x80
 80037a4:	4313      	orrs	r3, r2
 80037a6:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 80037a8:	e006      	b.n	80037b8 <HAL_CAN_IRQHandler+0x32e>
            errorcode |= HAL_CAN_ERROR_CRC;
 80037aa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80037ac:	2280      	movs	r2, #128	; 0x80
 80037ae:	0052      	lsls	r2, r2, #1
 80037b0:	4313      	orrs	r3, r2
 80037b2:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 80037b4:	e000      	b.n	80037b8 <HAL_CAN_IRQHandler+0x32e>
            break;
 80037b6:	46c0      	nop			; (mov r8, r8)
        }

        /* Clear Last error code Flag */
        CLEAR_BIT(hcan->Instance->ESR, CAN_ESR_LEC);
 80037b8:	687b      	ldr	r3, [r7, #4]
 80037ba:	681b      	ldr	r3, [r3, #0]
 80037bc:	699a      	ldr	r2, [r3, #24]
 80037be:	687b      	ldr	r3, [r7, #4]
 80037c0:	681b      	ldr	r3, [r3, #0]
 80037c2:	2170      	movs	r1, #112	; 0x70
 80037c4:	438a      	bics	r2, r1
 80037c6:	619a      	str	r2, [r3, #24]
      }
    }

    /* Clear ERRI Flag */
    __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_ERRI);
 80037c8:	687b      	ldr	r3, [r7, #4]
 80037ca:	681b      	ldr	r3, [r3, #0]
 80037cc:	2204      	movs	r2, #4
 80037ce:	605a      	str	r2, [r3, #4]
  }

  /* Call the Error call Back in case of Errors */
  if (errorcode != HAL_CAN_ERROR_NONE)
 80037d0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80037d2:	2b00      	cmp	r3, #0
 80037d4:	d009      	beq.n	80037ea <HAL_CAN_IRQHandler+0x360>
  {
    /* Update error code in handle */
    hcan->ErrorCode |= errorcode;
 80037d6:	687b      	ldr	r3, [r7, #4]
 80037d8:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80037da:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80037dc:	431a      	orrs	r2, r3
 80037de:	687b      	ldr	r3, [r7, #4]
 80037e0:	625a      	str	r2, [r3, #36]	; 0x24
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
    /* Call registered callback*/
    hcan->ErrorCallback(hcan);
#else
    /* Call weak (surcharged) callback */
    HAL_CAN_ErrorCallback(hcan);
 80037e2:	687b      	ldr	r3, [r7, #4]
 80037e4:	0018      	movs	r0, r3
 80037e6:	f000 f85c 	bl	80038a2 <HAL_CAN_ErrorCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
  }
}
 80037ea:	46c0      	nop			; (mov r8, r8)
 80037ec:	46bd      	mov	sp, r7
 80037ee:	b00a      	add	sp, #40	; 0x28
 80037f0:	bd80      	pop	{r7, pc}

080037f2 <HAL_CAN_TxMailbox0CompleteCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox0CompleteCallback(CAN_HandleTypeDef *hcan)
{
 80037f2:	b580      	push	{r7, lr}
 80037f4:	b082      	sub	sp, #8
 80037f6:	af00      	add	r7, sp, #0
 80037f8:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox0CompleteCallback could be implemented in the
            user file
   */
}
 80037fa:	46c0      	nop			; (mov r8, r8)
 80037fc:	46bd      	mov	sp, r7
 80037fe:	b002      	add	sp, #8
 8003800:	bd80      	pop	{r7, pc}

08003802 <HAL_CAN_TxMailbox1CompleteCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox1CompleteCallback(CAN_HandleTypeDef *hcan)
{
 8003802:	b580      	push	{r7, lr}
 8003804:	b082      	sub	sp, #8
 8003806:	af00      	add	r7, sp, #0
 8003808:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox1CompleteCallback could be implemented in the
            user file
   */
}
 800380a:	46c0      	nop			; (mov r8, r8)
 800380c:	46bd      	mov	sp, r7
 800380e:	b002      	add	sp, #8
 8003810:	bd80      	pop	{r7, pc}

08003812 <HAL_CAN_TxMailbox2CompleteCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox2CompleteCallback(CAN_HandleTypeDef *hcan)
{
 8003812:	b580      	push	{r7, lr}
 8003814:	b082      	sub	sp, #8
 8003816:	af00      	add	r7, sp, #0
 8003818:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox2CompleteCallback could be implemented in the
            user file
   */
}
 800381a:	46c0      	nop			; (mov r8, r8)
 800381c:	46bd      	mov	sp, r7
 800381e:	b002      	add	sp, #8
 8003820:	bd80      	pop	{r7, pc}

08003822 <HAL_CAN_TxMailbox0AbortCallback>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox0AbortCallback(CAN_HandleTypeDef *hcan)
{
 8003822:	b580      	push	{r7, lr}
 8003824:	b082      	sub	sp, #8
 8003826:	af00      	add	r7, sp, #0
 8003828:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox0AbortCallback could be implemented in the
            user file
   */
}
 800382a:	46c0      	nop			; (mov r8, r8)
 800382c:	46bd      	mov	sp, r7
 800382e:	b002      	add	sp, #8
 8003830:	bd80      	pop	{r7, pc}

08003832 <HAL_CAN_TxMailbox1AbortCallback>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox1AbortCallback(CAN_HandleTypeDef *hcan)
{
 8003832:	b580      	push	{r7, lr}
 8003834:	b082      	sub	sp, #8
 8003836:	af00      	add	r7, sp, #0
 8003838:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox1AbortCallback could be implemented in the
            user file
   */
}
 800383a:	46c0      	nop			; (mov r8, r8)
 800383c:	46bd      	mov	sp, r7
 800383e:	b002      	add	sp, #8
 8003840:	bd80      	pop	{r7, pc}

08003842 <HAL_CAN_TxMailbox2AbortCallback>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox2AbortCallback(CAN_HandleTypeDef *hcan)
{
 8003842:	b580      	push	{r7, lr}
 8003844:	b082      	sub	sp, #8
 8003846:	af00      	add	r7, sp, #0
 8003848:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox2AbortCallback could be implemented in the
            user file
   */
}
 800384a:	46c0      	nop			; (mov r8, r8)
 800384c:	46bd      	mov	sp, r7
 800384e:	b002      	add	sp, #8
 8003850:	bd80      	pop	{r7, pc}

08003852 <HAL_CAN_RxFifo0FullCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_RxFifo0FullCallback(CAN_HandleTypeDef *hcan)
{
 8003852:	b580      	push	{r7, lr}
 8003854:	b082      	sub	sp, #8
 8003856:	af00      	add	r7, sp, #0
 8003858:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_RxFifo0FullCallback could be implemented in the user
            file
   */
}
 800385a:	46c0      	nop			; (mov r8, r8)
 800385c:	46bd      	mov	sp, r7
 800385e:	b002      	add	sp, #8
 8003860:	bd80      	pop	{r7, pc}

08003862 <HAL_CAN_RxFifo1MsgPendingCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_RxFifo1MsgPendingCallback(CAN_HandleTypeDef *hcan)
{
 8003862:	b580      	push	{r7, lr}
 8003864:	b082      	sub	sp, #8
 8003866:	af00      	add	r7, sp, #0
 8003868:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_RxFifo1MsgPendingCallback could be implemented in the
            user file
   */
}
 800386a:	46c0      	nop			; (mov r8, r8)
 800386c:	46bd      	mov	sp, r7
 800386e:	b002      	add	sp, #8
 8003870:	bd80      	pop	{r7, pc}

08003872 <HAL_CAN_RxFifo1FullCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_RxFifo1FullCallback(CAN_HandleTypeDef *hcan)
{
 8003872:	b580      	push	{r7, lr}
 8003874:	b082      	sub	sp, #8
 8003876:	af00      	add	r7, sp, #0
 8003878:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_RxFifo1FullCallback could be implemented in the user
            file
   */
}
 800387a:	46c0      	nop			; (mov r8, r8)
 800387c:	46bd      	mov	sp, r7
 800387e:	b002      	add	sp, #8
 8003880:	bd80      	pop	{r7, pc}

08003882 <HAL_CAN_SleepCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_SleepCallback(CAN_HandleTypeDef *hcan)
{
 8003882:	b580      	push	{r7, lr}
 8003884:	b082      	sub	sp, #8
 8003886:	af00      	add	r7, sp, #0
 8003888:	6078      	str	r0, [r7, #4]
  UNUSED(hcan);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_SleepCallback could be implemented in the user file
   */
}
 800388a:	46c0      	nop			; (mov r8, r8)
 800388c:	46bd      	mov	sp, r7
 800388e:	b002      	add	sp, #8
 8003890:	bd80      	pop	{r7, pc}

08003892 <HAL_CAN_WakeUpFromRxMsgCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_WakeUpFromRxMsgCallback(CAN_HandleTypeDef *hcan)
{
 8003892:	b580      	push	{r7, lr}
 8003894:	b082      	sub	sp, #8
 8003896:	af00      	add	r7, sp, #0
 8003898:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_WakeUpFromRxMsgCallback could be implemented in the
            user file
   */
}
 800389a:	46c0      	nop			; (mov r8, r8)
 800389c:	46bd      	mov	sp, r7
 800389e:	b002      	add	sp, #8
 80038a0:	bd80      	pop	{r7, pc}

080038a2 <HAL_CAN_ErrorCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_ErrorCallback(CAN_HandleTypeDef *hcan)
{
 80038a2:	b580      	push	{r7, lr}
 80038a4:	b082      	sub	sp, #8
 80038a6:	af00      	add	r7, sp, #0
 80038a8:	6078      	str	r0, [r7, #4]
  UNUSED(hcan);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_ErrorCallback could be implemented in the user file
   */
}
 80038aa:	46c0      	nop			; (mov r8, r8)
 80038ac:	46bd      	mov	sp, r7
 80038ae:	b002      	add	sp, #8
 80038b0:	bd80      	pop	{r7, pc}
	...

080038b4 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80038b4:	b580      	push	{r7, lr}
 80038b6:	b082      	sub	sp, #8
 80038b8:	af00      	add	r7, sp, #0
 80038ba:	0002      	movs	r2, r0
 80038bc:	1dfb      	adds	r3, r7, #7
 80038be:	701a      	strb	r2, [r3, #0]
  if ((int32_t)(IRQn) >= 0)
 80038c0:	1dfb      	adds	r3, r7, #7
 80038c2:	781b      	ldrb	r3, [r3, #0]
 80038c4:	2b7f      	cmp	r3, #127	; 0x7f
 80038c6:	d809      	bhi.n	80038dc <__NVIC_EnableIRQ+0x28>
  {
    NVIC->ISER[0U] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80038c8:	1dfb      	adds	r3, r7, #7
 80038ca:	781b      	ldrb	r3, [r3, #0]
 80038cc:	001a      	movs	r2, r3
 80038ce:	231f      	movs	r3, #31
 80038d0:	401a      	ands	r2, r3
 80038d2:	4b04      	ldr	r3, [pc, #16]	; (80038e4 <__NVIC_EnableIRQ+0x30>)
 80038d4:	2101      	movs	r1, #1
 80038d6:	4091      	lsls	r1, r2
 80038d8:	000a      	movs	r2, r1
 80038da:	601a      	str	r2, [r3, #0]
  }
}
 80038dc:	46c0      	nop			; (mov r8, r8)
 80038de:	46bd      	mov	sp, r7
 80038e0:	b002      	add	sp, #8
 80038e2:	bd80      	pop	{r7, pc}
 80038e4:	e000e100 	.word	0xe000e100

080038e8 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80038e8:	b590      	push	{r4, r7, lr}
 80038ea:	b083      	sub	sp, #12
 80038ec:	af00      	add	r7, sp, #0
 80038ee:	0002      	movs	r2, r0
 80038f0:	6039      	str	r1, [r7, #0]
 80038f2:	1dfb      	adds	r3, r7, #7
 80038f4:	701a      	strb	r2, [r3, #0]
  if ((int32_t)(IRQn) >= 0)
 80038f6:	1dfb      	adds	r3, r7, #7
 80038f8:	781b      	ldrb	r3, [r3, #0]
 80038fa:	2b7f      	cmp	r3, #127	; 0x7f
 80038fc:	d828      	bhi.n	8003950 <__NVIC_SetPriority+0x68>
  {
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 80038fe:	4a2f      	ldr	r2, [pc, #188]	; (80039bc <__NVIC_SetPriority+0xd4>)
 8003900:	1dfb      	adds	r3, r7, #7
 8003902:	781b      	ldrb	r3, [r3, #0]
 8003904:	b25b      	sxtb	r3, r3
 8003906:	089b      	lsrs	r3, r3, #2
 8003908:	33c0      	adds	r3, #192	; 0xc0
 800390a:	009b      	lsls	r3, r3, #2
 800390c:	589b      	ldr	r3, [r3, r2]
 800390e:	1dfa      	adds	r2, r7, #7
 8003910:	7812      	ldrb	r2, [r2, #0]
 8003912:	0011      	movs	r1, r2
 8003914:	2203      	movs	r2, #3
 8003916:	400a      	ands	r2, r1
 8003918:	00d2      	lsls	r2, r2, #3
 800391a:	21ff      	movs	r1, #255	; 0xff
 800391c:	4091      	lsls	r1, r2
 800391e:	000a      	movs	r2, r1
 8003920:	43d2      	mvns	r2, r2
 8003922:	401a      	ands	r2, r3
 8003924:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 8003926:	683b      	ldr	r3, [r7, #0]
 8003928:	019b      	lsls	r3, r3, #6
 800392a:	22ff      	movs	r2, #255	; 0xff
 800392c:	401a      	ands	r2, r3
 800392e:	1dfb      	adds	r3, r7, #7
 8003930:	781b      	ldrb	r3, [r3, #0]
 8003932:	0018      	movs	r0, r3
 8003934:	2303      	movs	r3, #3
 8003936:	4003      	ands	r3, r0
 8003938:	00db      	lsls	r3, r3, #3
 800393a:	409a      	lsls	r2, r3
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 800393c:	481f      	ldr	r0, [pc, #124]	; (80039bc <__NVIC_SetPriority+0xd4>)
 800393e:	1dfb      	adds	r3, r7, #7
 8003940:	781b      	ldrb	r3, [r3, #0]
 8003942:	b25b      	sxtb	r3, r3
 8003944:	089b      	lsrs	r3, r3, #2
 8003946:	430a      	orrs	r2, r1
 8003948:	33c0      	adds	r3, #192	; 0xc0
 800394a:	009b      	lsls	r3, r3, #2
 800394c:	501a      	str	r2, [r3, r0]
  else
  {
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
  }
}
 800394e:	e031      	b.n	80039b4 <__NVIC_SetPriority+0xcc>
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8003950:	4a1b      	ldr	r2, [pc, #108]	; (80039c0 <__NVIC_SetPriority+0xd8>)
 8003952:	1dfb      	adds	r3, r7, #7
 8003954:	781b      	ldrb	r3, [r3, #0]
 8003956:	0019      	movs	r1, r3
 8003958:	230f      	movs	r3, #15
 800395a:	400b      	ands	r3, r1
 800395c:	3b08      	subs	r3, #8
 800395e:	089b      	lsrs	r3, r3, #2
 8003960:	3306      	adds	r3, #6
 8003962:	009b      	lsls	r3, r3, #2
 8003964:	18d3      	adds	r3, r2, r3
 8003966:	3304      	adds	r3, #4
 8003968:	681b      	ldr	r3, [r3, #0]
 800396a:	1dfa      	adds	r2, r7, #7
 800396c:	7812      	ldrb	r2, [r2, #0]
 800396e:	0011      	movs	r1, r2
 8003970:	2203      	movs	r2, #3
 8003972:	400a      	ands	r2, r1
 8003974:	00d2      	lsls	r2, r2, #3
 8003976:	21ff      	movs	r1, #255	; 0xff
 8003978:	4091      	lsls	r1, r2
 800397a:	000a      	movs	r2, r1
 800397c:	43d2      	mvns	r2, r2
 800397e:	401a      	ands	r2, r3
 8003980:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 8003982:	683b      	ldr	r3, [r7, #0]
 8003984:	019b      	lsls	r3, r3, #6
 8003986:	22ff      	movs	r2, #255	; 0xff
 8003988:	401a      	ands	r2, r3
 800398a:	1dfb      	adds	r3, r7, #7
 800398c:	781b      	ldrb	r3, [r3, #0]
 800398e:	0018      	movs	r0, r3
 8003990:	2303      	movs	r3, #3
 8003992:	4003      	ands	r3, r0
 8003994:	00db      	lsls	r3, r3, #3
 8003996:	409a      	lsls	r2, r3
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8003998:	4809      	ldr	r0, [pc, #36]	; (80039c0 <__NVIC_SetPriority+0xd8>)
 800399a:	1dfb      	adds	r3, r7, #7
 800399c:	781b      	ldrb	r3, [r3, #0]
 800399e:	001c      	movs	r4, r3
 80039a0:	230f      	movs	r3, #15
 80039a2:	4023      	ands	r3, r4
 80039a4:	3b08      	subs	r3, #8
 80039a6:	089b      	lsrs	r3, r3, #2
 80039a8:	430a      	orrs	r2, r1
 80039aa:	3306      	adds	r3, #6
 80039ac:	009b      	lsls	r3, r3, #2
 80039ae:	18c3      	adds	r3, r0, r3
 80039b0:	3304      	adds	r3, #4
 80039b2:	601a      	str	r2, [r3, #0]
}
 80039b4:	46c0      	nop			; (mov r8, r8)
 80039b6:	46bd      	mov	sp, r7
 80039b8:	b003      	add	sp, #12
 80039ba:	bd90      	pop	{r4, r7, pc}
 80039bc:	e000e100 	.word	0xe000e100
 80039c0:	e000ed00 	.word	0xe000ed00

080039c4 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80039c4:	b580      	push	{r7, lr}
 80039c6:	b082      	sub	sp, #8
 80039c8:	af00      	add	r7, sp, #0
 80039ca:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80039cc:	687b      	ldr	r3, [r7, #4]
 80039ce:	1e5a      	subs	r2, r3, #1
 80039d0:	2380      	movs	r3, #128	; 0x80
 80039d2:	045b      	lsls	r3, r3, #17
 80039d4:	429a      	cmp	r2, r3
 80039d6:	d301      	bcc.n	80039dc <SysTick_Config+0x18>
  {
    return (1UL);                                                   /* Reload value impossible */
 80039d8:	2301      	movs	r3, #1
 80039da:	e010      	b.n	80039fe <SysTick_Config+0x3a>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80039dc:	4b0a      	ldr	r3, [pc, #40]	; (8003a08 <SysTick_Config+0x44>)
 80039de:	687a      	ldr	r2, [r7, #4]
 80039e0:	3a01      	subs	r2, #1
 80039e2:	605a      	str	r2, [r3, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80039e4:	2301      	movs	r3, #1
 80039e6:	425b      	negs	r3, r3
 80039e8:	2103      	movs	r1, #3
 80039ea:	0018      	movs	r0, r3
 80039ec:	f7ff ff7c 	bl	80038e8 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80039f0:	4b05      	ldr	r3, [pc, #20]	; (8003a08 <SysTick_Config+0x44>)
 80039f2:	2200      	movs	r2, #0
 80039f4:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80039f6:	4b04      	ldr	r3, [pc, #16]	; (8003a08 <SysTick_Config+0x44>)
 80039f8:	2207      	movs	r2, #7
 80039fa:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80039fc:	2300      	movs	r3, #0
}
 80039fe:	0018      	movs	r0, r3
 8003a00:	46bd      	mov	sp, r7
 8003a02:	b002      	add	sp, #8
 8003a04:	bd80      	pop	{r7, pc}
 8003a06:	46c0      	nop			; (mov r8, r8)
 8003a08:	e000e010 	.word	0xe000e010

08003a0c <HAL_NVIC_SetPriority>:
  *         with stm32f0xx devices, this parameter is a dummy value and it is ignored, because 
  *         no subpriority supported in Cortex M0 based products.   
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8003a0c:	b580      	push	{r7, lr}
 8003a0e:	b084      	sub	sp, #16
 8003a10:	af00      	add	r7, sp, #0
 8003a12:	60b9      	str	r1, [r7, #8]
 8003a14:	607a      	str	r2, [r7, #4]
 8003a16:	210f      	movs	r1, #15
 8003a18:	187b      	adds	r3, r7, r1
 8003a1a:	1c02      	adds	r2, r0, #0
 8003a1c:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  NVIC_SetPriority(IRQn,PreemptPriority);
 8003a1e:	68ba      	ldr	r2, [r7, #8]
 8003a20:	187b      	adds	r3, r7, r1
 8003a22:	781b      	ldrb	r3, [r3, #0]
 8003a24:	b25b      	sxtb	r3, r3
 8003a26:	0011      	movs	r1, r2
 8003a28:	0018      	movs	r0, r3
 8003a2a:	f7ff ff5d 	bl	80038e8 <__NVIC_SetPriority>
}
 8003a2e:	46c0      	nop			; (mov r8, r8)
 8003a30:	46bd      	mov	sp, r7
 8003a32:	b004      	add	sp, #16
 8003a34:	bd80      	pop	{r7, pc}

08003a36 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f0xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8003a36:	b580      	push	{r7, lr}
 8003a38:	b082      	sub	sp, #8
 8003a3a:	af00      	add	r7, sp, #0
 8003a3c:	0002      	movs	r2, r0
 8003a3e:	1dfb      	adds	r3, r7, #7
 8003a40:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8003a42:	1dfb      	adds	r3, r7, #7
 8003a44:	781b      	ldrb	r3, [r3, #0]
 8003a46:	b25b      	sxtb	r3, r3
 8003a48:	0018      	movs	r0, r3
 8003a4a:	f7ff ff33 	bl	80038b4 <__NVIC_EnableIRQ>
}
 8003a4e:	46c0      	nop			; (mov r8, r8)
 8003a50:	46bd      	mov	sp, r7
 8003a52:	b002      	add	sp, #8
 8003a54:	bd80      	pop	{r7, pc}

08003a56 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8003a56:	b580      	push	{r7, lr}
 8003a58:	b082      	sub	sp, #8
 8003a5a:	af00      	add	r7, sp, #0
 8003a5c:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8003a5e:	687b      	ldr	r3, [r7, #4]
 8003a60:	0018      	movs	r0, r3
 8003a62:	f7ff ffaf 	bl	80039c4 <SysTick_Config>
 8003a66:	0003      	movs	r3, r0
}
 8003a68:	0018      	movs	r0, r3
 8003a6a:	46bd      	mov	sp, r7
 8003a6c:	b002      	add	sp, #8
 8003a6e:	bd80      	pop	{r7, pc}

08003a70 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8003a70:	b580      	push	{r7, lr}
 8003a72:	b086      	sub	sp, #24
 8003a74:	af00      	add	r7, sp, #0
 8003a76:	6078      	str	r0, [r7, #4]
 8003a78:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8003a7a:	2300      	movs	r3, #0
 8003a7c:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8003a7e:	e149      	b.n	8003d14 <HAL_GPIO_Init+0x2a4>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8003a80:	683b      	ldr	r3, [r7, #0]
 8003a82:	681b      	ldr	r3, [r3, #0]
 8003a84:	2101      	movs	r1, #1
 8003a86:	697a      	ldr	r2, [r7, #20]
 8003a88:	4091      	lsls	r1, r2
 8003a8a:	000a      	movs	r2, r1
 8003a8c:	4013      	ands	r3, r2
 8003a8e:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8003a90:	68fb      	ldr	r3, [r7, #12]
 8003a92:	2b00      	cmp	r3, #0
 8003a94:	d100      	bne.n	8003a98 <HAL_GPIO_Init+0x28>
 8003a96:	e13a      	b.n	8003d0e <HAL_GPIO_Init+0x29e>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 8003a98:	683b      	ldr	r3, [r7, #0]
 8003a9a:	685b      	ldr	r3, [r3, #4]
 8003a9c:	2203      	movs	r2, #3
 8003a9e:	4013      	ands	r3, r2
 8003aa0:	2b01      	cmp	r3, #1
 8003aa2:	d005      	beq.n	8003ab0 <HAL_GPIO_Init+0x40>
         ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8003aa4:	683b      	ldr	r3, [r7, #0]
 8003aa6:	685b      	ldr	r3, [r3, #4]
 8003aa8:	2203      	movs	r2, #3
 8003aaa:	4013      	ands	r3, r2
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 8003aac:	2b02      	cmp	r3, #2
 8003aae:	d130      	bne.n	8003b12 <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8003ab0:	687b      	ldr	r3, [r7, #4]
 8003ab2:	689b      	ldr	r3, [r3, #8]
 8003ab4:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2u));
 8003ab6:	697b      	ldr	r3, [r7, #20]
 8003ab8:	005b      	lsls	r3, r3, #1
 8003aba:	2203      	movs	r2, #3
 8003abc:	409a      	lsls	r2, r3
 8003abe:	0013      	movs	r3, r2
 8003ac0:	43da      	mvns	r2, r3
 8003ac2:	693b      	ldr	r3, [r7, #16]
 8003ac4:	4013      	ands	r3, r2
 8003ac6:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 8003ac8:	683b      	ldr	r3, [r7, #0]
 8003aca:	68da      	ldr	r2, [r3, #12]
 8003acc:	697b      	ldr	r3, [r7, #20]
 8003ace:	005b      	lsls	r3, r3, #1
 8003ad0:	409a      	lsls	r2, r3
 8003ad2:	0013      	movs	r3, r2
 8003ad4:	693a      	ldr	r2, [r7, #16]
 8003ad6:	4313      	orrs	r3, r2
 8003ad8:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8003ada:	687b      	ldr	r3, [r7, #4]
 8003adc:	693a      	ldr	r2, [r7, #16]
 8003ade:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8003ae0:	687b      	ldr	r3, [r7, #4]
 8003ae2:	685b      	ldr	r3, [r3, #4]
 8003ae4:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8003ae6:	2201      	movs	r2, #1
 8003ae8:	697b      	ldr	r3, [r7, #20]
 8003aea:	409a      	lsls	r2, r3
 8003aec:	0013      	movs	r3, r2
 8003aee:	43da      	mvns	r2, r3
 8003af0:	693b      	ldr	r3, [r7, #16]
 8003af2:	4013      	ands	r3, r2
 8003af4:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8003af6:	683b      	ldr	r3, [r7, #0]
 8003af8:	685b      	ldr	r3, [r3, #4]
 8003afa:	091b      	lsrs	r3, r3, #4
 8003afc:	2201      	movs	r2, #1
 8003afe:	401a      	ands	r2, r3
 8003b00:	697b      	ldr	r3, [r7, #20]
 8003b02:	409a      	lsls	r2, r3
 8003b04:	0013      	movs	r3, r2
 8003b06:	693a      	ldr	r2, [r7, #16]
 8003b08:	4313      	orrs	r3, r2
 8003b0a:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8003b0c:	687b      	ldr	r3, [r7, #4]
 8003b0e:	693a      	ldr	r2, [r7, #16]
 8003b10:	605a      	str	r2, [r3, #4]
      }
      
      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8003b12:	683b      	ldr	r3, [r7, #0]
 8003b14:	685b      	ldr	r3, [r3, #4]
 8003b16:	2203      	movs	r2, #3
 8003b18:	4013      	ands	r3, r2
 8003b1a:	2b03      	cmp	r3, #3
 8003b1c:	d017      	beq.n	8003b4e <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8003b1e:	687b      	ldr	r3, [r7, #4]
 8003b20:	68db      	ldr	r3, [r3, #12]
 8003b22:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2u));
 8003b24:	697b      	ldr	r3, [r7, #20]
 8003b26:	005b      	lsls	r3, r3, #1
 8003b28:	2203      	movs	r2, #3
 8003b2a:	409a      	lsls	r2, r3
 8003b2c:	0013      	movs	r3, r2
 8003b2e:	43da      	mvns	r2, r3
 8003b30:	693b      	ldr	r3, [r7, #16]
 8003b32:	4013      	ands	r3, r2
 8003b34:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2u));
 8003b36:	683b      	ldr	r3, [r7, #0]
 8003b38:	689a      	ldr	r2, [r3, #8]
 8003b3a:	697b      	ldr	r3, [r7, #20]
 8003b3c:	005b      	lsls	r3, r3, #1
 8003b3e:	409a      	lsls	r2, r3
 8003b40:	0013      	movs	r3, r2
 8003b42:	693a      	ldr	r2, [r7, #16]
 8003b44:	4313      	orrs	r3, r2
 8003b46:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8003b48:	687b      	ldr	r3, [r7, #4]
 8003b4a:	693a      	ldr	r2, [r7, #16]
 8003b4c:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8003b4e:	683b      	ldr	r3, [r7, #0]
 8003b50:	685b      	ldr	r3, [r3, #4]
 8003b52:	2203      	movs	r2, #3
 8003b54:	4013      	ands	r3, r2
 8003b56:	2b02      	cmp	r3, #2
 8003b58:	d123      	bne.n	8003ba2 <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 8003b5a:	697b      	ldr	r3, [r7, #20]
 8003b5c:	08da      	lsrs	r2, r3, #3
 8003b5e:	687b      	ldr	r3, [r7, #4]
 8003b60:	3208      	adds	r2, #8
 8003b62:	0092      	lsls	r2, r2, #2
 8003b64:	58d3      	ldr	r3, [r2, r3]
 8003b66:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 8003b68:	697b      	ldr	r3, [r7, #20]
 8003b6a:	2207      	movs	r2, #7
 8003b6c:	4013      	ands	r3, r2
 8003b6e:	009b      	lsls	r3, r3, #2
 8003b70:	220f      	movs	r2, #15
 8003b72:	409a      	lsls	r2, r3
 8003b74:	0013      	movs	r3, r2
 8003b76:	43da      	mvns	r2, r3
 8003b78:	693b      	ldr	r3, [r7, #16]
 8003b7a:	4013      	ands	r3, r2
 8003b7c:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 8003b7e:	683b      	ldr	r3, [r7, #0]
 8003b80:	691a      	ldr	r2, [r3, #16]
 8003b82:	697b      	ldr	r3, [r7, #20]
 8003b84:	2107      	movs	r1, #7
 8003b86:	400b      	ands	r3, r1
 8003b88:	009b      	lsls	r3, r3, #2
 8003b8a:	409a      	lsls	r2, r3
 8003b8c:	0013      	movs	r3, r2
 8003b8e:	693a      	ldr	r2, [r7, #16]
 8003b90:	4313      	orrs	r3, r2
 8003b92:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 8003b94:	697b      	ldr	r3, [r7, #20]
 8003b96:	08da      	lsrs	r2, r3, #3
 8003b98:	687b      	ldr	r3, [r7, #4]
 8003b9a:	3208      	adds	r2, #8
 8003b9c:	0092      	lsls	r2, r2, #2
 8003b9e:	6939      	ldr	r1, [r7, #16]
 8003ba0:	50d1      	str	r1, [r2, r3]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8003ba2:	687b      	ldr	r3, [r7, #4]
 8003ba4:	681b      	ldr	r3, [r3, #0]
 8003ba6:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2u));
 8003ba8:	697b      	ldr	r3, [r7, #20]
 8003baa:	005b      	lsls	r3, r3, #1
 8003bac:	2203      	movs	r2, #3
 8003bae:	409a      	lsls	r2, r3
 8003bb0:	0013      	movs	r3, r2
 8003bb2:	43da      	mvns	r2, r3
 8003bb4:	693b      	ldr	r3, [r7, #16]
 8003bb6:	4013      	ands	r3, r2
 8003bb8:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 8003bba:	683b      	ldr	r3, [r7, #0]
 8003bbc:	685b      	ldr	r3, [r3, #4]
 8003bbe:	2203      	movs	r2, #3
 8003bc0:	401a      	ands	r2, r3
 8003bc2:	697b      	ldr	r3, [r7, #20]
 8003bc4:	005b      	lsls	r3, r3, #1
 8003bc6:	409a      	lsls	r2, r3
 8003bc8:	0013      	movs	r3, r2
 8003bca:	693a      	ldr	r2, [r7, #16]
 8003bcc:	4313      	orrs	r3, r2
 8003bce:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8003bd0:	687b      	ldr	r3, [r7, #4]
 8003bd2:	693a      	ldr	r2, [r7, #16]
 8003bd4:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8003bd6:	683b      	ldr	r3, [r7, #0]
 8003bd8:	685a      	ldr	r2, [r3, #4]
 8003bda:	23c0      	movs	r3, #192	; 0xc0
 8003bdc:	029b      	lsls	r3, r3, #10
 8003bde:	4013      	ands	r3, r2
 8003be0:	d100      	bne.n	8003be4 <HAL_GPIO_Init+0x174>
 8003be2:	e094      	b.n	8003d0e <HAL_GPIO_Init+0x29e>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8003be4:	4b51      	ldr	r3, [pc, #324]	; (8003d2c <HAL_GPIO_Init+0x2bc>)
 8003be6:	699a      	ldr	r2, [r3, #24]
 8003be8:	4b50      	ldr	r3, [pc, #320]	; (8003d2c <HAL_GPIO_Init+0x2bc>)
 8003bea:	2101      	movs	r1, #1
 8003bec:	430a      	orrs	r2, r1
 8003bee:	619a      	str	r2, [r3, #24]
 8003bf0:	4b4e      	ldr	r3, [pc, #312]	; (8003d2c <HAL_GPIO_Init+0x2bc>)
 8003bf2:	699b      	ldr	r3, [r3, #24]
 8003bf4:	2201      	movs	r2, #1
 8003bf6:	4013      	ands	r3, r2
 8003bf8:	60bb      	str	r3, [r7, #8]
 8003bfa:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 8003bfc:	4a4c      	ldr	r2, [pc, #304]	; (8003d30 <HAL_GPIO_Init+0x2c0>)
 8003bfe:	697b      	ldr	r3, [r7, #20]
 8003c00:	089b      	lsrs	r3, r3, #2
 8003c02:	3302      	adds	r3, #2
 8003c04:	009b      	lsls	r3, r3, #2
 8003c06:	589b      	ldr	r3, [r3, r2]
 8003c08:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 8003c0a:	697b      	ldr	r3, [r7, #20]
 8003c0c:	2203      	movs	r2, #3
 8003c0e:	4013      	ands	r3, r2
 8003c10:	009b      	lsls	r3, r3, #2
 8003c12:	220f      	movs	r2, #15
 8003c14:	409a      	lsls	r2, r3
 8003c16:	0013      	movs	r3, r2
 8003c18:	43da      	mvns	r2, r3
 8003c1a:	693b      	ldr	r3, [r7, #16]
 8003c1c:	4013      	ands	r3, r2
 8003c1e:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 8003c20:	687a      	ldr	r2, [r7, #4]
 8003c22:	2390      	movs	r3, #144	; 0x90
 8003c24:	05db      	lsls	r3, r3, #23
 8003c26:	429a      	cmp	r2, r3
 8003c28:	d00d      	beq.n	8003c46 <HAL_GPIO_Init+0x1d6>
 8003c2a:	687b      	ldr	r3, [r7, #4]
 8003c2c:	4a41      	ldr	r2, [pc, #260]	; (8003d34 <HAL_GPIO_Init+0x2c4>)
 8003c2e:	4293      	cmp	r3, r2
 8003c30:	d007      	beq.n	8003c42 <HAL_GPIO_Init+0x1d2>
 8003c32:	687b      	ldr	r3, [r7, #4]
 8003c34:	4a40      	ldr	r2, [pc, #256]	; (8003d38 <HAL_GPIO_Init+0x2c8>)
 8003c36:	4293      	cmp	r3, r2
 8003c38:	d101      	bne.n	8003c3e <HAL_GPIO_Init+0x1ce>
 8003c3a:	2302      	movs	r3, #2
 8003c3c:	e004      	b.n	8003c48 <HAL_GPIO_Init+0x1d8>
 8003c3e:	2305      	movs	r3, #5
 8003c40:	e002      	b.n	8003c48 <HAL_GPIO_Init+0x1d8>
 8003c42:	2301      	movs	r3, #1
 8003c44:	e000      	b.n	8003c48 <HAL_GPIO_Init+0x1d8>
 8003c46:	2300      	movs	r3, #0
 8003c48:	697a      	ldr	r2, [r7, #20]
 8003c4a:	2103      	movs	r1, #3
 8003c4c:	400a      	ands	r2, r1
 8003c4e:	0092      	lsls	r2, r2, #2
 8003c50:	4093      	lsls	r3, r2
 8003c52:	693a      	ldr	r2, [r7, #16]
 8003c54:	4313      	orrs	r3, r2
 8003c56:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 8003c58:	4935      	ldr	r1, [pc, #212]	; (8003d30 <HAL_GPIO_Init+0x2c0>)
 8003c5a:	697b      	ldr	r3, [r7, #20]
 8003c5c:	089b      	lsrs	r3, r3, #2
 8003c5e:	3302      	adds	r3, #2
 8003c60:	009b      	lsls	r3, r3, #2
 8003c62:	693a      	ldr	r2, [r7, #16]
 8003c64:	505a      	str	r2, [r3, r1]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8003c66:	4b35      	ldr	r3, [pc, #212]	; (8003d3c <HAL_GPIO_Init+0x2cc>)
 8003c68:	689b      	ldr	r3, [r3, #8]
 8003c6a:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8003c6c:	68fb      	ldr	r3, [r7, #12]
 8003c6e:	43da      	mvns	r2, r3
 8003c70:	693b      	ldr	r3, [r7, #16]
 8003c72:	4013      	ands	r3, r2
 8003c74:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 8003c76:	683b      	ldr	r3, [r7, #0]
 8003c78:	685a      	ldr	r2, [r3, #4]
 8003c7a:	2380      	movs	r3, #128	; 0x80
 8003c7c:	035b      	lsls	r3, r3, #13
 8003c7e:	4013      	ands	r3, r2
 8003c80:	d003      	beq.n	8003c8a <HAL_GPIO_Init+0x21a>
        {
          temp |= iocurrent;
 8003c82:	693a      	ldr	r2, [r7, #16]
 8003c84:	68fb      	ldr	r3, [r7, #12]
 8003c86:	4313      	orrs	r3, r2
 8003c88:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR = temp;
 8003c8a:	4b2c      	ldr	r3, [pc, #176]	; (8003d3c <HAL_GPIO_Init+0x2cc>)
 8003c8c:	693a      	ldr	r2, [r7, #16]
 8003c8e:	609a      	str	r2, [r3, #8]

        temp = EXTI->FTSR;
 8003c90:	4b2a      	ldr	r3, [pc, #168]	; (8003d3c <HAL_GPIO_Init+0x2cc>)
 8003c92:	68db      	ldr	r3, [r3, #12]
 8003c94:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8003c96:	68fb      	ldr	r3, [r7, #12]
 8003c98:	43da      	mvns	r2, r3
 8003c9a:	693b      	ldr	r3, [r7, #16]
 8003c9c:	4013      	ands	r3, r2
 8003c9e:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 8003ca0:	683b      	ldr	r3, [r7, #0]
 8003ca2:	685a      	ldr	r2, [r3, #4]
 8003ca4:	2380      	movs	r3, #128	; 0x80
 8003ca6:	039b      	lsls	r3, r3, #14
 8003ca8:	4013      	ands	r3, r2
 8003caa:	d003      	beq.n	8003cb4 <HAL_GPIO_Init+0x244>
        {
          temp |= iocurrent;
 8003cac:	693a      	ldr	r2, [r7, #16]
 8003cae:	68fb      	ldr	r3, [r7, #12]
 8003cb0:	4313      	orrs	r3, r2
 8003cb2:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR = temp;
 8003cb4:	4b21      	ldr	r3, [pc, #132]	; (8003d3c <HAL_GPIO_Init+0x2cc>)
 8003cb6:	693a      	ldr	r2, [r7, #16]
 8003cb8:	60da      	str	r2, [r3, #12]

        /* Clear EXTI line configuration */
        temp = EXTI->EMR;
 8003cba:	4b20      	ldr	r3, [pc, #128]	; (8003d3c <HAL_GPIO_Init+0x2cc>)
 8003cbc:	685b      	ldr	r3, [r3, #4]
 8003cbe:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8003cc0:	68fb      	ldr	r3, [r7, #12]
 8003cc2:	43da      	mvns	r2, r3
 8003cc4:	693b      	ldr	r3, [r7, #16]
 8003cc6:	4013      	ands	r3, r2
 8003cc8:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 8003cca:	683b      	ldr	r3, [r7, #0]
 8003ccc:	685a      	ldr	r2, [r3, #4]
 8003cce:	2380      	movs	r3, #128	; 0x80
 8003cd0:	029b      	lsls	r3, r3, #10
 8003cd2:	4013      	ands	r3, r2
 8003cd4:	d003      	beq.n	8003cde <HAL_GPIO_Init+0x26e>
        {
          temp |= iocurrent;
 8003cd6:	693a      	ldr	r2, [r7, #16]
 8003cd8:	68fb      	ldr	r3, [r7, #12]
 8003cda:	4313      	orrs	r3, r2
 8003cdc:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR = temp;
 8003cde:	4b17      	ldr	r3, [pc, #92]	; (8003d3c <HAL_GPIO_Init+0x2cc>)
 8003ce0:	693a      	ldr	r2, [r7, #16]
 8003ce2:	605a      	str	r2, [r3, #4]

        temp = EXTI->IMR;
 8003ce4:	4b15      	ldr	r3, [pc, #84]	; (8003d3c <HAL_GPIO_Init+0x2cc>)
 8003ce6:	681b      	ldr	r3, [r3, #0]
 8003ce8:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8003cea:	68fb      	ldr	r3, [r7, #12]
 8003cec:	43da      	mvns	r2, r3
 8003cee:	693b      	ldr	r3, [r7, #16]
 8003cf0:	4013      	ands	r3, r2
 8003cf2:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 8003cf4:	683b      	ldr	r3, [r7, #0]
 8003cf6:	685a      	ldr	r2, [r3, #4]
 8003cf8:	2380      	movs	r3, #128	; 0x80
 8003cfa:	025b      	lsls	r3, r3, #9
 8003cfc:	4013      	ands	r3, r2
 8003cfe:	d003      	beq.n	8003d08 <HAL_GPIO_Init+0x298>
        {
          temp |= iocurrent;
 8003d00:	693a      	ldr	r2, [r7, #16]
 8003d02:	68fb      	ldr	r3, [r7, #12]
 8003d04:	4313      	orrs	r3, r2
 8003d06:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR = temp;
 8003d08:	4b0c      	ldr	r3, [pc, #48]	; (8003d3c <HAL_GPIO_Init+0x2cc>)
 8003d0a:	693a      	ldr	r2, [r7, #16]
 8003d0c:	601a      	str	r2, [r3, #0]
      }
    }

    position++;
 8003d0e:	697b      	ldr	r3, [r7, #20]
 8003d10:	3301      	adds	r3, #1
 8003d12:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8003d14:	683b      	ldr	r3, [r7, #0]
 8003d16:	681a      	ldr	r2, [r3, #0]
 8003d18:	697b      	ldr	r3, [r7, #20]
 8003d1a:	40da      	lsrs	r2, r3
 8003d1c:	1e13      	subs	r3, r2, #0
 8003d1e:	d000      	beq.n	8003d22 <HAL_GPIO_Init+0x2b2>
 8003d20:	e6ae      	b.n	8003a80 <HAL_GPIO_Init+0x10>
  } 
}
 8003d22:	46c0      	nop			; (mov r8, r8)
 8003d24:	46c0      	nop			; (mov r8, r8)
 8003d26:	46bd      	mov	sp, r7
 8003d28:	b006      	add	sp, #24
 8003d2a:	bd80      	pop	{r7, pc}
 8003d2c:	40021000 	.word	0x40021000
 8003d30:	40010000 	.word	0x40010000
 8003d34:	48000400 	.word	0x48000400
 8003d38:	48000800 	.word	0x48000800
 8003d3c:	40010400 	.word	0x40010400

08003d40 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8003d40:	b580      	push	{r7, lr}
 8003d42:	b084      	sub	sp, #16
 8003d44:	af00      	add	r7, sp, #0
 8003d46:	6078      	str	r0, [r7, #4]
 8003d48:	000a      	movs	r2, r1
 8003d4a:	1cbb      	adds	r3, r7, #2
 8003d4c:	801a      	strh	r2, [r3, #0]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 8003d4e:	687b      	ldr	r3, [r7, #4]
 8003d50:	691b      	ldr	r3, [r3, #16]
 8003d52:	1cba      	adds	r2, r7, #2
 8003d54:	8812      	ldrh	r2, [r2, #0]
 8003d56:	4013      	ands	r3, r2
 8003d58:	d004      	beq.n	8003d64 <HAL_GPIO_ReadPin+0x24>
  {
    bitstatus = GPIO_PIN_SET;
 8003d5a:	230f      	movs	r3, #15
 8003d5c:	18fb      	adds	r3, r7, r3
 8003d5e:	2201      	movs	r2, #1
 8003d60:	701a      	strb	r2, [r3, #0]
 8003d62:	e003      	b.n	8003d6c <HAL_GPIO_ReadPin+0x2c>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8003d64:	230f      	movs	r3, #15
 8003d66:	18fb      	adds	r3, r7, r3
 8003d68:	2200      	movs	r2, #0
 8003d6a:	701a      	strb	r2, [r3, #0]
  }
  return bitstatus;
 8003d6c:	230f      	movs	r3, #15
 8003d6e:	18fb      	adds	r3, r7, r3
 8003d70:	781b      	ldrb	r3, [r3, #0]
  }
 8003d72:	0018      	movs	r0, r3
 8003d74:	46bd      	mov	sp, r7
 8003d76:	b004      	add	sp, #16
 8003d78:	bd80      	pop	{r7, pc}

08003d7a <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8003d7a:	b580      	push	{r7, lr}
 8003d7c:	b082      	sub	sp, #8
 8003d7e:	af00      	add	r7, sp, #0
 8003d80:	6078      	str	r0, [r7, #4]
 8003d82:	0008      	movs	r0, r1
 8003d84:	0011      	movs	r1, r2
 8003d86:	1cbb      	adds	r3, r7, #2
 8003d88:	1c02      	adds	r2, r0, #0
 8003d8a:	801a      	strh	r2, [r3, #0]
 8003d8c:	1c7b      	adds	r3, r7, #1
 8003d8e:	1c0a      	adds	r2, r1, #0
 8003d90:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8003d92:	1c7b      	adds	r3, r7, #1
 8003d94:	781b      	ldrb	r3, [r3, #0]
 8003d96:	2b00      	cmp	r3, #0
 8003d98:	d004      	beq.n	8003da4 <HAL_GPIO_WritePin+0x2a>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8003d9a:	1cbb      	adds	r3, r7, #2
 8003d9c:	881a      	ldrh	r2, [r3, #0]
 8003d9e:	687b      	ldr	r3, [r7, #4]
 8003da0:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8003da2:	e003      	b.n	8003dac <HAL_GPIO_WritePin+0x32>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8003da4:	1cbb      	adds	r3, r7, #2
 8003da6:	881a      	ldrh	r2, [r3, #0]
 8003da8:	687b      	ldr	r3, [r7, #4]
 8003daa:	629a      	str	r2, [r3, #40]	; 0x28
}
 8003dac:	46c0      	nop			; (mov r8, r8)
 8003dae:	46bd      	mov	sp, r7
 8003db0:	b002      	add	sp, #8
 8003db2:	bd80      	pop	{r7, pc}

08003db4 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8003db4:	b580      	push	{r7, lr}
 8003db6:	b088      	sub	sp, #32
 8003db8:	af00      	add	r7, sp, #0
 8003dba:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;
  uint32_t pll_config2;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8003dbc:	687b      	ldr	r3, [r7, #4]
 8003dbe:	2b00      	cmp	r3, #0
 8003dc0:	d102      	bne.n	8003dc8 <HAL_RCC_OscConfig+0x14>
  {
    return HAL_ERROR;
 8003dc2:	2301      	movs	r3, #1
 8003dc4:	f000 fb76 	bl	80044b4 <HAL_RCC_OscConfig+0x700>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8003dc8:	687b      	ldr	r3, [r7, #4]
 8003dca:	681b      	ldr	r3, [r3, #0]
 8003dcc:	2201      	movs	r2, #1
 8003dce:	4013      	ands	r3, r2
 8003dd0:	d100      	bne.n	8003dd4 <HAL_RCC_OscConfig+0x20>
 8003dd2:	e08e      	b.n	8003ef2 <HAL_RCC_OscConfig+0x13e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE) 
 8003dd4:	4bc5      	ldr	r3, [pc, #788]	; (80040ec <HAL_RCC_OscConfig+0x338>)
 8003dd6:	685b      	ldr	r3, [r3, #4]
 8003dd8:	220c      	movs	r2, #12
 8003dda:	4013      	ands	r3, r2
 8003ddc:	2b04      	cmp	r3, #4
 8003dde:	d00e      	beq.n	8003dfe <HAL_RCC_OscConfig+0x4a>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8003de0:	4bc2      	ldr	r3, [pc, #776]	; (80040ec <HAL_RCC_OscConfig+0x338>)
 8003de2:	685b      	ldr	r3, [r3, #4]
 8003de4:	220c      	movs	r2, #12
 8003de6:	4013      	ands	r3, r2
 8003de8:	2b08      	cmp	r3, #8
 8003dea:	d117      	bne.n	8003e1c <HAL_RCC_OscConfig+0x68>
 8003dec:	4bbf      	ldr	r3, [pc, #764]	; (80040ec <HAL_RCC_OscConfig+0x338>)
 8003dee:	685a      	ldr	r2, [r3, #4]
 8003df0:	23c0      	movs	r3, #192	; 0xc0
 8003df2:	025b      	lsls	r3, r3, #9
 8003df4:	401a      	ands	r2, r3
 8003df6:	2380      	movs	r3, #128	; 0x80
 8003df8:	025b      	lsls	r3, r3, #9
 8003dfa:	429a      	cmp	r2, r3
 8003dfc:	d10e      	bne.n	8003e1c <HAL_RCC_OscConfig+0x68>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003dfe:	4bbb      	ldr	r3, [pc, #748]	; (80040ec <HAL_RCC_OscConfig+0x338>)
 8003e00:	681a      	ldr	r2, [r3, #0]
 8003e02:	2380      	movs	r3, #128	; 0x80
 8003e04:	029b      	lsls	r3, r3, #10
 8003e06:	4013      	ands	r3, r2
 8003e08:	d100      	bne.n	8003e0c <HAL_RCC_OscConfig+0x58>
 8003e0a:	e071      	b.n	8003ef0 <HAL_RCC_OscConfig+0x13c>
 8003e0c:	687b      	ldr	r3, [r7, #4]
 8003e0e:	685b      	ldr	r3, [r3, #4]
 8003e10:	2b00      	cmp	r3, #0
 8003e12:	d000      	beq.n	8003e16 <HAL_RCC_OscConfig+0x62>
 8003e14:	e06c      	b.n	8003ef0 <HAL_RCC_OscConfig+0x13c>
      {
        return HAL_ERROR;
 8003e16:	2301      	movs	r3, #1
 8003e18:	f000 fb4c 	bl	80044b4 <HAL_RCC_OscConfig+0x700>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8003e1c:	687b      	ldr	r3, [r7, #4]
 8003e1e:	685b      	ldr	r3, [r3, #4]
 8003e20:	2b01      	cmp	r3, #1
 8003e22:	d107      	bne.n	8003e34 <HAL_RCC_OscConfig+0x80>
 8003e24:	4bb1      	ldr	r3, [pc, #708]	; (80040ec <HAL_RCC_OscConfig+0x338>)
 8003e26:	681a      	ldr	r2, [r3, #0]
 8003e28:	4bb0      	ldr	r3, [pc, #704]	; (80040ec <HAL_RCC_OscConfig+0x338>)
 8003e2a:	2180      	movs	r1, #128	; 0x80
 8003e2c:	0249      	lsls	r1, r1, #9
 8003e2e:	430a      	orrs	r2, r1
 8003e30:	601a      	str	r2, [r3, #0]
 8003e32:	e02f      	b.n	8003e94 <HAL_RCC_OscConfig+0xe0>
 8003e34:	687b      	ldr	r3, [r7, #4]
 8003e36:	685b      	ldr	r3, [r3, #4]
 8003e38:	2b00      	cmp	r3, #0
 8003e3a:	d10c      	bne.n	8003e56 <HAL_RCC_OscConfig+0xa2>
 8003e3c:	4bab      	ldr	r3, [pc, #684]	; (80040ec <HAL_RCC_OscConfig+0x338>)
 8003e3e:	681a      	ldr	r2, [r3, #0]
 8003e40:	4baa      	ldr	r3, [pc, #680]	; (80040ec <HAL_RCC_OscConfig+0x338>)
 8003e42:	49ab      	ldr	r1, [pc, #684]	; (80040f0 <HAL_RCC_OscConfig+0x33c>)
 8003e44:	400a      	ands	r2, r1
 8003e46:	601a      	str	r2, [r3, #0]
 8003e48:	4ba8      	ldr	r3, [pc, #672]	; (80040ec <HAL_RCC_OscConfig+0x338>)
 8003e4a:	681a      	ldr	r2, [r3, #0]
 8003e4c:	4ba7      	ldr	r3, [pc, #668]	; (80040ec <HAL_RCC_OscConfig+0x338>)
 8003e4e:	49a9      	ldr	r1, [pc, #676]	; (80040f4 <HAL_RCC_OscConfig+0x340>)
 8003e50:	400a      	ands	r2, r1
 8003e52:	601a      	str	r2, [r3, #0]
 8003e54:	e01e      	b.n	8003e94 <HAL_RCC_OscConfig+0xe0>
 8003e56:	687b      	ldr	r3, [r7, #4]
 8003e58:	685b      	ldr	r3, [r3, #4]
 8003e5a:	2b05      	cmp	r3, #5
 8003e5c:	d10e      	bne.n	8003e7c <HAL_RCC_OscConfig+0xc8>
 8003e5e:	4ba3      	ldr	r3, [pc, #652]	; (80040ec <HAL_RCC_OscConfig+0x338>)
 8003e60:	681a      	ldr	r2, [r3, #0]
 8003e62:	4ba2      	ldr	r3, [pc, #648]	; (80040ec <HAL_RCC_OscConfig+0x338>)
 8003e64:	2180      	movs	r1, #128	; 0x80
 8003e66:	02c9      	lsls	r1, r1, #11
 8003e68:	430a      	orrs	r2, r1
 8003e6a:	601a      	str	r2, [r3, #0]
 8003e6c:	4b9f      	ldr	r3, [pc, #636]	; (80040ec <HAL_RCC_OscConfig+0x338>)
 8003e6e:	681a      	ldr	r2, [r3, #0]
 8003e70:	4b9e      	ldr	r3, [pc, #632]	; (80040ec <HAL_RCC_OscConfig+0x338>)
 8003e72:	2180      	movs	r1, #128	; 0x80
 8003e74:	0249      	lsls	r1, r1, #9
 8003e76:	430a      	orrs	r2, r1
 8003e78:	601a      	str	r2, [r3, #0]
 8003e7a:	e00b      	b.n	8003e94 <HAL_RCC_OscConfig+0xe0>
 8003e7c:	4b9b      	ldr	r3, [pc, #620]	; (80040ec <HAL_RCC_OscConfig+0x338>)
 8003e7e:	681a      	ldr	r2, [r3, #0]
 8003e80:	4b9a      	ldr	r3, [pc, #616]	; (80040ec <HAL_RCC_OscConfig+0x338>)
 8003e82:	499b      	ldr	r1, [pc, #620]	; (80040f0 <HAL_RCC_OscConfig+0x33c>)
 8003e84:	400a      	ands	r2, r1
 8003e86:	601a      	str	r2, [r3, #0]
 8003e88:	4b98      	ldr	r3, [pc, #608]	; (80040ec <HAL_RCC_OscConfig+0x338>)
 8003e8a:	681a      	ldr	r2, [r3, #0]
 8003e8c:	4b97      	ldr	r3, [pc, #604]	; (80040ec <HAL_RCC_OscConfig+0x338>)
 8003e8e:	4999      	ldr	r1, [pc, #612]	; (80040f4 <HAL_RCC_OscConfig+0x340>)
 8003e90:	400a      	ands	r2, r1
 8003e92:	601a      	str	r2, [r3, #0]
      

       /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8003e94:	687b      	ldr	r3, [r7, #4]
 8003e96:	685b      	ldr	r3, [r3, #4]
 8003e98:	2b00      	cmp	r3, #0
 8003e9a:	d014      	beq.n	8003ec6 <HAL_RCC_OscConfig+0x112>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003e9c:	f7fe fac4 	bl	8002428 <HAL_GetTick>
 8003ea0:	0003      	movs	r3, r0
 8003ea2:	61bb      	str	r3, [r7, #24]
        
        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003ea4:	e008      	b.n	8003eb8 <HAL_RCC_OscConfig+0x104>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8003ea6:	f7fe fabf 	bl	8002428 <HAL_GetTick>
 8003eaa:	0002      	movs	r2, r0
 8003eac:	69bb      	ldr	r3, [r7, #24]
 8003eae:	1ad3      	subs	r3, r2, r3
 8003eb0:	2b64      	cmp	r3, #100	; 0x64
 8003eb2:	d901      	bls.n	8003eb8 <HAL_RCC_OscConfig+0x104>
          {
            return HAL_TIMEOUT;
 8003eb4:	2303      	movs	r3, #3
 8003eb6:	e2fd      	b.n	80044b4 <HAL_RCC_OscConfig+0x700>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003eb8:	4b8c      	ldr	r3, [pc, #560]	; (80040ec <HAL_RCC_OscConfig+0x338>)
 8003eba:	681a      	ldr	r2, [r3, #0]
 8003ebc:	2380      	movs	r3, #128	; 0x80
 8003ebe:	029b      	lsls	r3, r3, #10
 8003ec0:	4013      	ands	r3, r2
 8003ec2:	d0f0      	beq.n	8003ea6 <HAL_RCC_OscConfig+0xf2>
 8003ec4:	e015      	b.n	8003ef2 <HAL_RCC_OscConfig+0x13e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003ec6:	f7fe faaf 	bl	8002428 <HAL_GetTick>
 8003eca:	0003      	movs	r3, r0
 8003ecc:	61bb      	str	r3, [r7, #24]
        
        /* Wait till HSE is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8003ece:	e008      	b.n	8003ee2 <HAL_RCC_OscConfig+0x12e>
        {
           if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8003ed0:	f7fe faaa 	bl	8002428 <HAL_GetTick>
 8003ed4:	0002      	movs	r2, r0
 8003ed6:	69bb      	ldr	r3, [r7, #24]
 8003ed8:	1ad3      	subs	r3, r2, r3
 8003eda:	2b64      	cmp	r3, #100	; 0x64
 8003edc:	d901      	bls.n	8003ee2 <HAL_RCC_OscConfig+0x12e>
          {
            return HAL_TIMEOUT;
 8003ede:	2303      	movs	r3, #3
 8003ee0:	e2e8      	b.n	80044b4 <HAL_RCC_OscConfig+0x700>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8003ee2:	4b82      	ldr	r3, [pc, #520]	; (80040ec <HAL_RCC_OscConfig+0x338>)
 8003ee4:	681a      	ldr	r2, [r3, #0]
 8003ee6:	2380      	movs	r3, #128	; 0x80
 8003ee8:	029b      	lsls	r3, r3, #10
 8003eea:	4013      	ands	r3, r2
 8003eec:	d1f0      	bne.n	8003ed0 <HAL_RCC_OscConfig+0x11c>
 8003eee:	e000      	b.n	8003ef2 <HAL_RCC_OscConfig+0x13e>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003ef0:	46c0      	nop			; (mov r8, r8)
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8003ef2:	687b      	ldr	r3, [r7, #4]
 8003ef4:	681b      	ldr	r3, [r3, #0]
 8003ef6:	2202      	movs	r2, #2
 8003ef8:	4013      	ands	r3, r2
 8003efa:	d100      	bne.n	8003efe <HAL_RCC_OscConfig+0x14a>
 8003efc:	e06c      	b.n	8003fd8 <HAL_RCC_OscConfig+0x224>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));
    
    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */ 
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI) 
 8003efe:	4b7b      	ldr	r3, [pc, #492]	; (80040ec <HAL_RCC_OscConfig+0x338>)
 8003f00:	685b      	ldr	r3, [r3, #4]
 8003f02:	220c      	movs	r2, #12
 8003f04:	4013      	ands	r3, r2
 8003f06:	d00e      	beq.n	8003f26 <HAL_RCC_OscConfig+0x172>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI)))
 8003f08:	4b78      	ldr	r3, [pc, #480]	; (80040ec <HAL_RCC_OscConfig+0x338>)
 8003f0a:	685b      	ldr	r3, [r3, #4]
 8003f0c:	220c      	movs	r2, #12
 8003f0e:	4013      	ands	r3, r2
 8003f10:	2b08      	cmp	r3, #8
 8003f12:	d11f      	bne.n	8003f54 <HAL_RCC_OscConfig+0x1a0>
 8003f14:	4b75      	ldr	r3, [pc, #468]	; (80040ec <HAL_RCC_OscConfig+0x338>)
 8003f16:	685a      	ldr	r2, [r3, #4]
 8003f18:	23c0      	movs	r3, #192	; 0xc0
 8003f1a:	025b      	lsls	r3, r3, #9
 8003f1c:	401a      	ands	r2, r3
 8003f1e:	2380      	movs	r3, #128	; 0x80
 8003f20:	021b      	lsls	r3, r3, #8
 8003f22:	429a      	cmp	r2, r3
 8003f24:	d116      	bne.n	8003f54 <HAL_RCC_OscConfig+0x1a0>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8003f26:	4b71      	ldr	r3, [pc, #452]	; (80040ec <HAL_RCC_OscConfig+0x338>)
 8003f28:	681b      	ldr	r3, [r3, #0]
 8003f2a:	2202      	movs	r2, #2
 8003f2c:	4013      	ands	r3, r2
 8003f2e:	d005      	beq.n	8003f3c <HAL_RCC_OscConfig+0x188>
 8003f30:	687b      	ldr	r3, [r7, #4]
 8003f32:	68db      	ldr	r3, [r3, #12]
 8003f34:	2b01      	cmp	r3, #1
 8003f36:	d001      	beq.n	8003f3c <HAL_RCC_OscConfig+0x188>
      {
        return HAL_ERROR;
 8003f38:	2301      	movs	r3, #1
 8003f3a:	e2bb      	b.n	80044b4 <HAL_RCC_OscConfig+0x700>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003f3c:	4b6b      	ldr	r3, [pc, #428]	; (80040ec <HAL_RCC_OscConfig+0x338>)
 8003f3e:	681b      	ldr	r3, [r3, #0]
 8003f40:	22f8      	movs	r2, #248	; 0xf8
 8003f42:	4393      	bics	r3, r2
 8003f44:	0019      	movs	r1, r3
 8003f46:	687b      	ldr	r3, [r7, #4]
 8003f48:	691b      	ldr	r3, [r3, #16]
 8003f4a:	00da      	lsls	r2, r3, #3
 8003f4c:	4b67      	ldr	r3, [pc, #412]	; (80040ec <HAL_RCC_OscConfig+0x338>)
 8003f4e:	430a      	orrs	r2, r1
 8003f50:	601a      	str	r2, [r3, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8003f52:	e041      	b.n	8003fd8 <HAL_RCC_OscConfig+0x224>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8003f54:	687b      	ldr	r3, [r7, #4]
 8003f56:	68db      	ldr	r3, [r3, #12]
 8003f58:	2b00      	cmp	r3, #0
 8003f5a:	d024      	beq.n	8003fa6 <HAL_RCC_OscConfig+0x1f2>
      {
       /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8003f5c:	4b63      	ldr	r3, [pc, #396]	; (80040ec <HAL_RCC_OscConfig+0x338>)
 8003f5e:	681a      	ldr	r2, [r3, #0]
 8003f60:	4b62      	ldr	r3, [pc, #392]	; (80040ec <HAL_RCC_OscConfig+0x338>)
 8003f62:	2101      	movs	r1, #1
 8003f64:	430a      	orrs	r2, r1
 8003f66:	601a      	str	r2, [r3, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003f68:	f7fe fa5e 	bl	8002428 <HAL_GetTick>
 8003f6c:	0003      	movs	r3, r0
 8003f6e:	61bb      	str	r3, [r7, #24]
        
        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003f70:	e008      	b.n	8003f84 <HAL_RCC_OscConfig+0x1d0>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8003f72:	f7fe fa59 	bl	8002428 <HAL_GetTick>
 8003f76:	0002      	movs	r2, r0
 8003f78:	69bb      	ldr	r3, [r7, #24]
 8003f7a:	1ad3      	subs	r3, r2, r3
 8003f7c:	2b02      	cmp	r3, #2
 8003f7e:	d901      	bls.n	8003f84 <HAL_RCC_OscConfig+0x1d0>
          {
            return HAL_TIMEOUT;
 8003f80:	2303      	movs	r3, #3
 8003f82:	e297      	b.n	80044b4 <HAL_RCC_OscConfig+0x700>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003f84:	4b59      	ldr	r3, [pc, #356]	; (80040ec <HAL_RCC_OscConfig+0x338>)
 8003f86:	681b      	ldr	r3, [r3, #0]
 8003f88:	2202      	movs	r2, #2
 8003f8a:	4013      	ands	r3, r2
 8003f8c:	d0f1      	beq.n	8003f72 <HAL_RCC_OscConfig+0x1be>
          }
        }
                
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003f8e:	4b57      	ldr	r3, [pc, #348]	; (80040ec <HAL_RCC_OscConfig+0x338>)
 8003f90:	681b      	ldr	r3, [r3, #0]
 8003f92:	22f8      	movs	r2, #248	; 0xf8
 8003f94:	4393      	bics	r3, r2
 8003f96:	0019      	movs	r1, r3
 8003f98:	687b      	ldr	r3, [r7, #4]
 8003f9a:	691b      	ldr	r3, [r3, #16]
 8003f9c:	00da      	lsls	r2, r3, #3
 8003f9e:	4b53      	ldr	r3, [pc, #332]	; (80040ec <HAL_RCC_OscConfig+0x338>)
 8003fa0:	430a      	orrs	r2, r1
 8003fa2:	601a      	str	r2, [r3, #0]
 8003fa4:	e018      	b.n	8003fd8 <HAL_RCC_OscConfig+0x224>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8003fa6:	4b51      	ldr	r3, [pc, #324]	; (80040ec <HAL_RCC_OscConfig+0x338>)
 8003fa8:	681a      	ldr	r2, [r3, #0]
 8003faa:	4b50      	ldr	r3, [pc, #320]	; (80040ec <HAL_RCC_OscConfig+0x338>)
 8003fac:	2101      	movs	r1, #1
 8003fae:	438a      	bics	r2, r1
 8003fb0:	601a      	str	r2, [r3, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003fb2:	f7fe fa39 	bl	8002428 <HAL_GetTick>
 8003fb6:	0003      	movs	r3, r0
 8003fb8:	61bb      	str	r3, [r7, #24]
        
        /* Wait till HSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8003fba:	e008      	b.n	8003fce <HAL_RCC_OscConfig+0x21a>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8003fbc:	f7fe fa34 	bl	8002428 <HAL_GetTick>
 8003fc0:	0002      	movs	r2, r0
 8003fc2:	69bb      	ldr	r3, [r7, #24]
 8003fc4:	1ad3      	subs	r3, r2, r3
 8003fc6:	2b02      	cmp	r3, #2
 8003fc8:	d901      	bls.n	8003fce <HAL_RCC_OscConfig+0x21a>
          {
            return HAL_TIMEOUT;
 8003fca:	2303      	movs	r3, #3
 8003fcc:	e272      	b.n	80044b4 <HAL_RCC_OscConfig+0x700>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8003fce:	4b47      	ldr	r3, [pc, #284]	; (80040ec <HAL_RCC_OscConfig+0x338>)
 8003fd0:	681b      	ldr	r3, [r3, #0]
 8003fd2:	2202      	movs	r2, #2
 8003fd4:	4013      	ands	r3, r2
 8003fd6:	d1f1      	bne.n	8003fbc <HAL_RCC_OscConfig+0x208>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8003fd8:	687b      	ldr	r3, [r7, #4]
 8003fda:	681b      	ldr	r3, [r3, #0]
 8003fdc:	2208      	movs	r2, #8
 8003fde:	4013      	ands	r3, r2
 8003fe0:	d036      	beq.n	8004050 <HAL_RCC_OscConfig+0x29c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));
    
    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8003fe2:	687b      	ldr	r3, [r7, #4]
 8003fe4:	69db      	ldr	r3, [r3, #28]
 8003fe6:	2b00      	cmp	r3, #0
 8003fe8:	d019      	beq.n	800401e <HAL_RCC_OscConfig+0x26a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8003fea:	4b40      	ldr	r3, [pc, #256]	; (80040ec <HAL_RCC_OscConfig+0x338>)
 8003fec:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8003fee:	4b3f      	ldr	r3, [pc, #252]	; (80040ec <HAL_RCC_OscConfig+0x338>)
 8003ff0:	2101      	movs	r1, #1
 8003ff2:	430a      	orrs	r2, r1
 8003ff4:	625a      	str	r2, [r3, #36]	; 0x24
      
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003ff6:	f7fe fa17 	bl	8002428 <HAL_GetTick>
 8003ffa:	0003      	movs	r3, r0
 8003ffc:	61bb      	str	r3, [r7, #24]
      
      /* Wait till LSI is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8003ffe:	e008      	b.n	8004012 <HAL_RCC_OscConfig+0x25e>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8004000:	f7fe fa12 	bl	8002428 <HAL_GetTick>
 8004004:	0002      	movs	r2, r0
 8004006:	69bb      	ldr	r3, [r7, #24]
 8004008:	1ad3      	subs	r3, r2, r3
 800400a:	2b02      	cmp	r3, #2
 800400c:	d901      	bls.n	8004012 <HAL_RCC_OscConfig+0x25e>
        {
          return HAL_TIMEOUT;
 800400e:	2303      	movs	r3, #3
 8004010:	e250      	b.n	80044b4 <HAL_RCC_OscConfig+0x700>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8004012:	4b36      	ldr	r3, [pc, #216]	; (80040ec <HAL_RCC_OscConfig+0x338>)
 8004014:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004016:	2202      	movs	r2, #2
 8004018:	4013      	ands	r3, r2
 800401a:	d0f1      	beq.n	8004000 <HAL_RCC_OscConfig+0x24c>
 800401c:	e018      	b.n	8004050 <HAL_RCC_OscConfig+0x29c>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 800401e:	4b33      	ldr	r3, [pc, #204]	; (80040ec <HAL_RCC_OscConfig+0x338>)
 8004020:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8004022:	4b32      	ldr	r3, [pc, #200]	; (80040ec <HAL_RCC_OscConfig+0x338>)
 8004024:	2101      	movs	r1, #1
 8004026:	438a      	bics	r2, r1
 8004028:	625a      	str	r2, [r3, #36]	; 0x24
      
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800402a:	f7fe f9fd 	bl	8002428 <HAL_GetTick>
 800402e:	0003      	movs	r3, r0
 8004030:	61bb      	str	r3, [r7, #24]
      
      /* Wait till LSI is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8004032:	e008      	b.n	8004046 <HAL_RCC_OscConfig+0x292>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8004034:	f7fe f9f8 	bl	8002428 <HAL_GetTick>
 8004038:	0002      	movs	r2, r0
 800403a:	69bb      	ldr	r3, [r7, #24]
 800403c:	1ad3      	subs	r3, r2, r3
 800403e:	2b02      	cmp	r3, #2
 8004040:	d901      	bls.n	8004046 <HAL_RCC_OscConfig+0x292>
        {
          return HAL_TIMEOUT;
 8004042:	2303      	movs	r3, #3
 8004044:	e236      	b.n	80044b4 <HAL_RCC_OscConfig+0x700>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8004046:	4b29      	ldr	r3, [pc, #164]	; (80040ec <HAL_RCC_OscConfig+0x338>)
 8004048:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800404a:	2202      	movs	r2, #2
 800404c:	4013      	ands	r3, r2
 800404e:	d1f1      	bne.n	8004034 <HAL_RCC_OscConfig+0x280>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8004050:	687b      	ldr	r3, [r7, #4]
 8004052:	681b      	ldr	r3, [r3, #0]
 8004054:	2204      	movs	r2, #4
 8004056:	4013      	ands	r3, r2
 8004058:	d100      	bne.n	800405c <HAL_RCC_OscConfig+0x2a8>
 800405a:	e0b5      	b.n	80041c8 <HAL_RCC_OscConfig+0x414>
  {
    FlagStatus       pwrclkchanged = RESET;
 800405c:	201f      	movs	r0, #31
 800405e:	183b      	adds	r3, r7, r0
 8004060:	2200      	movs	r2, #0
 8004062:	701a      	strb	r2, [r3, #0]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8004064:	4b21      	ldr	r3, [pc, #132]	; (80040ec <HAL_RCC_OscConfig+0x338>)
 8004066:	69da      	ldr	r2, [r3, #28]
 8004068:	2380      	movs	r3, #128	; 0x80
 800406a:	055b      	lsls	r3, r3, #21
 800406c:	4013      	ands	r3, r2
 800406e:	d110      	bne.n	8004092 <HAL_RCC_OscConfig+0x2de>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8004070:	4b1e      	ldr	r3, [pc, #120]	; (80040ec <HAL_RCC_OscConfig+0x338>)
 8004072:	69da      	ldr	r2, [r3, #28]
 8004074:	4b1d      	ldr	r3, [pc, #116]	; (80040ec <HAL_RCC_OscConfig+0x338>)
 8004076:	2180      	movs	r1, #128	; 0x80
 8004078:	0549      	lsls	r1, r1, #21
 800407a:	430a      	orrs	r2, r1
 800407c:	61da      	str	r2, [r3, #28]
 800407e:	4b1b      	ldr	r3, [pc, #108]	; (80040ec <HAL_RCC_OscConfig+0x338>)
 8004080:	69da      	ldr	r2, [r3, #28]
 8004082:	2380      	movs	r3, #128	; 0x80
 8004084:	055b      	lsls	r3, r3, #21
 8004086:	4013      	ands	r3, r2
 8004088:	60fb      	str	r3, [r7, #12]
 800408a:	68fb      	ldr	r3, [r7, #12]
      pwrclkchanged = SET;
 800408c:	183b      	adds	r3, r7, r0
 800408e:	2201      	movs	r2, #1
 8004090:	701a      	strb	r2, [r3, #0]
    }
    
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004092:	4b19      	ldr	r3, [pc, #100]	; (80040f8 <HAL_RCC_OscConfig+0x344>)
 8004094:	681a      	ldr	r2, [r3, #0]
 8004096:	2380      	movs	r3, #128	; 0x80
 8004098:	005b      	lsls	r3, r3, #1
 800409a:	4013      	ands	r3, r2
 800409c:	d11a      	bne.n	80040d4 <HAL_RCC_OscConfig+0x320>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 800409e:	4b16      	ldr	r3, [pc, #88]	; (80040f8 <HAL_RCC_OscConfig+0x344>)
 80040a0:	681a      	ldr	r2, [r3, #0]
 80040a2:	4b15      	ldr	r3, [pc, #84]	; (80040f8 <HAL_RCC_OscConfig+0x344>)
 80040a4:	2180      	movs	r1, #128	; 0x80
 80040a6:	0049      	lsls	r1, r1, #1
 80040a8:	430a      	orrs	r2, r1
 80040aa:	601a      	str	r2, [r3, #0]
      
      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80040ac:	f7fe f9bc 	bl	8002428 <HAL_GetTick>
 80040b0:	0003      	movs	r3, r0
 80040b2:	61bb      	str	r3, [r7, #24]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80040b4:	e008      	b.n	80040c8 <HAL_RCC_OscConfig+0x314>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80040b6:	f7fe f9b7 	bl	8002428 <HAL_GetTick>
 80040ba:	0002      	movs	r2, r0
 80040bc:	69bb      	ldr	r3, [r7, #24]
 80040be:	1ad3      	subs	r3, r2, r3
 80040c0:	2b64      	cmp	r3, #100	; 0x64
 80040c2:	d901      	bls.n	80040c8 <HAL_RCC_OscConfig+0x314>
        {
          return HAL_TIMEOUT;
 80040c4:	2303      	movs	r3, #3
 80040c6:	e1f5      	b.n	80044b4 <HAL_RCC_OscConfig+0x700>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80040c8:	4b0b      	ldr	r3, [pc, #44]	; (80040f8 <HAL_RCC_OscConfig+0x344>)
 80040ca:	681a      	ldr	r2, [r3, #0]
 80040cc:	2380      	movs	r3, #128	; 0x80
 80040ce:	005b      	lsls	r3, r3, #1
 80040d0:	4013      	ands	r3, r2
 80040d2:	d0f0      	beq.n	80040b6 <HAL_RCC_OscConfig+0x302>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80040d4:	687b      	ldr	r3, [r7, #4]
 80040d6:	689b      	ldr	r3, [r3, #8]
 80040d8:	2b01      	cmp	r3, #1
 80040da:	d10f      	bne.n	80040fc <HAL_RCC_OscConfig+0x348>
 80040dc:	4b03      	ldr	r3, [pc, #12]	; (80040ec <HAL_RCC_OscConfig+0x338>)
 80040de:	6a1a      	ldr	r2, [r3, #32]
 80040e0:	4b02      	ldr	r3, [pc, #8]	; (80040ec <HAL_RCC_OscConfig+0x338>)
 80040e2:	2101      	movs	r1, #1
 80040e4:	430a      	orrs	r2, r1
 80040e6:	621a      	str	r2, [r3, #32]
 80040e8:	e036      	b.n	8004158 <HAL_RCC_OscConfig+0x3a4>
 80040ea:	46c0      	nop			; (mov r8, r8)
 80040ec:	40021000 	.word	0x40021000
 80040f0:	fffeffff 	.word	0xfffeffff
 80040f4:	fffbffff 	.word	0xfffbffff
 80040f8:	40007000 	.word	0x40007000
 80040fc:	687b      	ldr	r3, [r7, #4]
 80040fe:	689b      	ldr	r3, [r3, #8]
 8004100:	2b00      	cmp	r3, #0
 8004102:	d10c      	bne.n	800411e <HAL_RCC_OscConfig+0x36a>
 8004104:	4bca      	ldr	r3, [pc, #808]	; (8004430 <HAL_RCC_OscConfig+0x67c>)
 8004106:	6a1a      	ldr	r2, [r3, #32]
 8004108:	4bc9      	ldr	r3, [pc, #804]	; (8004430 <HAL_RCC_OscConfig+0x67c>)
 800410a:	2101      	movs	r1, #1
 800410c:	438a      	bics	r2, r1
 800410e:	621a      	str	r2, [r3, #32]
 8004110:	4bc7      	ldr	r3, [pc, #796]	; (8004430 <HAL_RCC_OscConfig+0x67c>)
 8004112:	6a1a      	ldr	r2, [r3, #32]
 8004114:	4bc6      	ldr	r3, [pc, #792]	; (8004430 <HAL_RCC_OscConfig+0x67c>)
 8004116:	2104      	movs	r1, #4
 8004118:	438a      	bics	r2, r1
 800411a:	621a      	str	r2, [r3, #32]
 800411c:	e01c      	b.n	8004158 <HAL_RCC_OscConfig+0x3a4>
 800411e:	687b      	ldr	r3, [r7, #4]
 8004120:	689b      	ldr	r3, [r3, #8]
 8004122:	2b05      	cmp	r3, #5
 8004124:	d10c      	bne.n	8004140 <HAL_RCC_OscConfig+0x38c>
 8004126:	4bc2      	ldr	r3, [pc, #776]	; (8004430 <HAL_RCC_OscConfig+0x67c>)
 8004128:	6a1a      	ldr	r2, [r3, #32]
 800412a:	4bc1      	ldr	r3, [pc, #772]	; (8004430 <HAL_RCC_OscConfig+0x67c>)
 800412c:	2104      	movs	r1, #4
 800412e:	430a      	orrs	r2, r1
 8004130:	621a      	str	r2, [r3, #32]
 8004132:	4bbf      	ldr	r3, [pc, #764]	; (8004430 <HAL_RCC_OscConfig+0x67c>)
 8004134:	6a1a      	ldr	r2, [r3, #32]
 8004136:	4bbe      	ldr	r3, [pc, #760]	; (8004430 <HAL_RCC_OscConfig+0x67c>)
 8004138:	2101      	movs	r1, #1
 800413a:	430a      	orrs	r2, r1
 800413c:	621a      	str	r2, [r3, #32]
 800413e:	e00b      	b.n	8004158 <HAL_RCC_OscConfig+0x3a4>
 8004140:	4bbb      	ldr	r3, [pc, #748]	; (8004430 <HAL_RCC_OscConfig+0x67c>)
 8004142:	6a1a      	ldr	r2, [r3, #32]
 8004144:	4bba      	ldr	r3, [pc, #744]	; (8004430 <HAL_RCC_OscConfig+0x67c>)
 8004146:	2101      	movs	r1, #1
 8004148:	438a      	bics	r2, r1
 800414a:	621a      	str	r2, [r3, #32]
 800414c:	4bb8      	ldr	r3, [pc, #736]	; (8004430 <HAL_RCC_OscConfig+0x67c>)
 800414e:	6a1a      	ldr	r2, [r3, #32]
 8004150:	4bb7      	ldr	r3, [pc, #732]	; (8004430 <HAL_RCC_OscConfig+0x67c>)
 8004152:	2104      	movs	r1, #4
 8004154:	438a      	bics	r2, r1
 8004156:	621a      	str	r2, [r3, #32]
    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8004158:	687b      	ldr	r3, [r7, #4]
 800415a:	689b      	ldr	r3, [r3, #8]
 800415c:	2b00      	cmp	r3, #0
 800415e:	d014      	beq.n	800418a <HAL_RCC_OscConfig+0x3d6>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8004160:	f7fe f962 	bl	8002428 <HAL_GetTick>
 8004164:	0003      	movs	r3, r0
 8004166:	61bb      	str	r3, [r7, #24]
      
      /* Wait till LSE is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004168:	e009      	b.n	800417e <HAL_RCC_OscConfig+0x3ca>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800416a:	f7fe f95d 	bl	8002428 <HAL_GetTick>
 800416e:	0002      	movs	r2, r0
 8004170:	69bb      	ldr	r3, [r7, #24]
 8004172:	1ad3      	subs	r3, r2, r3
 8004174:	4aaf      	ldr	r2, [pc, #700]	; (8004434 <HAL_RCC_OscConfig+0x680>)
 8004176:	4293      	cmp	r3, r2
 8004178:	d901      	bls.n	800417e <HAL_RCC_OscConfig+0x3ca>
        {
          return HAL_TIMEOUT;
 800417a:	2303      	movs	r3, #3
 800417c:	e19a      	b.n	80044b4 <HAL_RCC_OscConfig+0x700>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800417e:	4bac      	ldr	r3, [pc, #688]	; (8004430 <HAL_RCC_OscConfig+0x67c>)
 8004180:	6a1b      	ldr	r3, [r3, #32]
 8004182:	2202      	movs	r2, #2
 8004184:	4013      	ands	r3, r2
 8004186:	d0f0      	beq.n	800416a <HAL_RCC_OscConfig+0x3b6>
 8004188:	e013      	b.n	80041b2 <HAL_RCC_OscConfig+0x3fe>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800418a:	f7fe f94d 	bl	8002428 <HAL_GetTick>
 800418e:	0003      	movs	r3, r0
 8004190:	61bb      	str	r3, [r7, #24]
      
      /* Wait till LSE is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8004192:	e009      	b.n	80041a8 <HAL_RCC_OscConfig+0x3f4>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8004194:	f7fe f948 	bl	8002428 <HAL_GetTick>
 8004198:	0002      	movs	r2, r0
 800419a:	69bb      	ldr	r3, [r7, #24]
 800419c:	1ad3      	subs	r3, r2, r3
 800419e:	4aa5      	ldr	r2, [pc, #660]	; (8004434 <HAL_RCC_OscConfig+0x680>)
 80041a0:	4293      	cmp	r3, r2
 80041a2:	d901      	bls.n	80041a8 <HAL_RCC_OscConfig+0x3f4>
        {
          return HAL_TIMEOUT;
 80041a4:	2303      	movs	r3, #3
 80041a6:	e185      	b.n	80044b4 <HAL_RCC_OscConfig+0x700>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80041a8:	4ba1      	ldr	r3, [pc, #644]	; (8004430 <HAL_RCC_OscConfig+0x67c>)
 80041aa:	6a1b      	ldr	r3, [r3, #32]
 80041ac:	2202      	movs	r2, #2
 80041ae:	4013      	ands	r3, r2
 80041b0:	d1f0      	bne.n	8004194 <HAL_RCC_OscConfig+0x3e0>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 80041b2:	231f      	movs	r3, #31
 80041b4:	18fb      	adds	r3, r7, r3
 80041b6:	781b      	ldrb	r3, [r3, #0]
 80041b8:	2b01      	cmp	r3, #1
 80041ba:	d105      	bne.n	80041c8 <HAL_RCC_OscConfig+0x414>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80041bc:	4b9c      	ldr	r3, [pc, #624]	; (8004430 <HAL_RCC_OscConfig+0x67c>)
 80041be:	69da      	ldr	r2, [r3, #28]
 80041c0:	4b9b      	ldr	r3, [pc, #620]	; (8004430 <HAL_RCC_OscConfig+0x67c>)
 80041c2:	499d      	ldr	r1, [pc, #628]	; (8004438 <HAL_RCC_OscConfig+0x684>)
 80041c4:	400a      	ands	r2, r1
 80041c6:	61da      	str	r2, [r3, #28]
    }
  }

  /*----------------------------- HSI14 Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI14) == RCC_OSCILLATORTYPE_HSI14)
 80041c8:	687b      	ldr	r3, [r7, #4]
 80041ca:	681b      	ldr	r3, [r3, #0]
 80041cc:	2210      	movs	r2, #16
 80041ce:	4013      	ands	r3, r2
 80041d0:	d063      	beq.n	800429a <HAL_RCC_OscConfig+0x4e6>
    /* Check the parameters */
    assert_param(IS_RCC_HSI14(RCC_OscInitStruct->HSI14State));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSI14CalibrationValue));

    /* Check the HSI14 State */
    if(RCC_OscInitStruct->HSI14State == RCC_HSI14_ON)
 80041d2:	687b      	ldr	r3, [r7, #4]
 80041d4:	695b      	ldr	r3, [r3, #20]
 80041d6:	2b01      	cmp	r3, #1
 80041d8:	d12a      	bne.n	8004230 <HAL_RCC_OscConfig+0x47c>
    {
      /* Disable ADC control of the Internal High Speed oscillator HSI14 */
      __HAL_RCC_HSI14ADC_DISABLE();
 80041da:	4b95      	ldr	r3, [pc, #596]	; (8004430 <HAL_RCC_OscConfig+0x67c>)
 80041dc:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80041de:	4b94      	ldr	r3, [pc, #592]	; (8004430 <HAL_RCC_OscConfig+0x67c>)
 80041e0:	2104      	movs	r1, #4
 80041e2:	430a      	orrs	r2, r1
 80041e4:	635a      	str	r2, [r3, #52]	; 0x34

      /* Enable the Internal High Speed oscillator (HSI). */
      __HAL_RCC_HSI14_ENABLE();
 80041e6:	4b92      	ldr	r3, [pc, #584]	; (8004430 <HAL_RCC_OscConfig+0x67c>)
 80041e8:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80041ea:	4b91      	ldr	r3, [pc, #580]	; (8004430 <HAL_RCC_OscConfig+0x67c>)
 80041ec:	2101      	movs	r1, #1
 80041ee:	430a      	orrs	r2, r1
 80041f0:	635a      	str	r2, [r3, #52]	; 0x34

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80041f2:	f7fe f919 	bl	8002428 <HAL_GetTick>
 80041f6:	0003      	movs	r3, r0
 80041f8:	61bb      	str	r3, [r7, #24]
      
      /* Wait till HSI is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI14RDY) == RESET)
 80041fa:	e008      	b.n	800420e <HAL_RCC_OscConfig+0x45a>
      {
        if((HAL_GetTick() - tickstart) > HSI14_TIMEOUT_VALUE)
 80041fc:	f7fe f914 	bl	8002428 <HAL_GetTick>
 8004200:	0002      	movs	r2, r0
 8004202:	69bb      	ldr	r3, [r7, #24]
 8004204:	1ad3      	subs	r3, r2, r3
 8004206:	2b02      	cmp	r3, #2
 8004208:	d901      	bls.n	800420e <HAL_RCC_OscConfig+0x45a>
        {
          return HAL_TIMEOUT;
 800420a:	2303      	movs	r3, #3
 800420c:	e152      	b.n	80044b4 <HAL_RCC_OscConfig+0x700>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI14RDY) == RESET)
 800420e:	4b88      	ldr	r3, [pc, #544]	; (8004430 <HAL_RCC_OscConfig+0x67c>)
 8004210:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004212:	2202      	movs	r2, #2
 8004214:	4013      	ands	r3, r2
 8004216:	d0f1      	beq.n	80041fc <HAL_RCC_OscConfig+0x448>
        }      
      } 

      /* Adjusts the Internal High Speed oscillator 14Mhz (HSI14) calibration value. */
      __HAL_RCC_HSI14_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSI14CalibrationValue);
 8004218:	4b85      	ldr	r3, [pc, #532]	; (8004430 <HAL_RCC_OscConfig+0x67c>)
 800421a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800421c:	22f8      	movs	r2, #248	; 0xf8
 800421e:	4393      	bics	r3, r2
 8004220:	0019      	movs	r1, r3
 8004222:	687b      	ldr	r3, [r7, #4]
 8004224:	699b      	ldr	r3, [r3, #24]
 8004226:	00da      	lsls	r2, r3, #3
 8004228:	4b81      	ldr	r3, [pc, #516]	; (8004430 <HAL_RCC_OscConfig+0x67c>)
 800422a:	430a      	orrs	r2, r1
 800422c:	635a      	str	r2, [r3, #52]	; 0x34
 800422e:	e034      	b.n	800429a <HAL_RCC_OscConfig+0x4e6>
    }
    else if(RCC_OscInitStruct->HSI14State == RCC_HSI14_ADC_CONTROL)
 8004230:	687b      	ldr	r3, [r7, #4]
 8004232:	695b      	ldr	r3, [r3, #20]
 8004234:	3305      	adds	r3, #5
 8004236:	d111      	bne.n	800425c <HAL_RCC_OscConfig+0x4a8>
    {
      /* Enable ADC control of the Internal High Speed oscillator HSI14 */
      __HAL_RCC_HSI14ADC_ENABLE();
 8004238:	4b7d      	ldr	r3, [pc, #500]	; (8004430 <HAL_RCC_OscConfig+0x67c>)
 800423a:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800423c:	4b7c      	ldr	r3, [pc, #496]	; (8004430 <HAL_RCC_OscConfig+0x67c>)
 800423e:	2104      	movs	r1, #4
 8004240:	438a      	bics	r2, r1
 8004242:	635a      	str	r2, [r3, #52]	; 0x34

      /* Adjusts the Internal High Speed oscillator 14Mhz (HSI14) calibration value. */
      __HAL_RCC_HSI14_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSI14CalibrationValue);
 8004244:	4b7a      	ldr	r3, [pc, #488]	; (8004430 <HAL_RCC_OscConfig+0x67c>)
 8004246:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004248:	22f8      	movs	r2, #248	; 0xf8
 800424a:	4393      	bics	r3, r2
 800424c:	0019      	movs	r1, r3
 800424e:	687b      	ldr	r3, [r7, #4]
 8004250:	699b      	ldr	r3, [r3, #24]
 8004252:	00da      	lsls	r2, r3, #3
 8004254:	4b76      	ldr	r3, [pc, #472]	; (8004430 <HAL_RCC_OscConfig+0x67c>)
 8004256:	430a      	orrs	r2, r1
 8004258:	635a      	str	r2, [r3, #52]	; 0x34
 800425a:	e01e      	b.n	800429a <HAL_RCC_OscConfig+0x4e6>
    }
    else
    {
      /* Disable ADC control of the Internal High Speed oscillator HSI14 */
      __HAL_RCC_HSI14ADC_DISABLE();
 800425c:	4b74      	ldr	r3, [pc, #464]	; (8004430 <HAL_RCC_OscConfig+0x67c>)
 800425e:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8004260:	4b73      	ldr	r3, [pc, #460]	; (8004430 <HAL_RCC_OscConfig+0x67c>)
 8004262:	2104      	movs	r1, #4
 8004264:	430a      	orrs	r2, r1
 8004266:	635a      	str	r2, [r3, #52]	; 0x34

      /* Disable the Internal High Speed oscillator (HSI). */
      __HAL_RCC_HSI14_DISABLE();
 8004268:	4b71      	ldr	r3, [pc, #452]	; (8004430 <HAL_RCC_OscConfig+0x67c>)
 800426a:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800426c:	4b70      	ldr	r3, [pc, #448]	; (8004430 <HAL_RCC_OscConfig+0x67c>)
 800426e:	2101      	movs	r1, #1
 8004270:	438a      	bics	r2, r1
 8004272:	635a      	str	r2, [r3, #52]	; 0x34

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8004274:	f7fe f8d8 	bl	8002428 <HAL_GetTick>
 8004278:	0003      	movs	r3, r0
 800427a:	61bb      	str	r3, [r7, #24]
      
      /* Wait till HSI is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI14RDY) != RESET)
 800427c:	e008      	b.n	8004290 <HAL_RCC_OscConfig+0x4dc>
      {
        if((HAL_GetTick() - tickstart) > HSI14_TIMEOUT_VALUE)
 800427e:	f7fe f8d3 	bl	8002428 <HAL_GetTick>
 8004282:	0002      	movs	r2, r0
 8004284:	69bb      	ldr	r3, [r7, #24]
 8004286:	1ad3      	subs	r3, r2, r3
 8004288:	2b02      	cmp	r3, #2
 800428a:	d901      	bls.n	8004290 <HAL_RCC_OscConfig+0x4dc>
        {
          return HAL_TIMEOUT;
 800428c:	2303      	movs	r3, #3
 800428e:	e111      	b.n	80044b4 <HAL_RCC_OscConfig+0x700>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI14RDY) != RESET)
 8004290:	4b67      	ldr	r3, [pc, #412]	; (8004430 <HAL_RCC_OscConfig+0x67c>)
 8004292:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004294:	2202      	movs	r2, #2
 8004296:	4013      	ands	r3, r2
 8004298:	d1f1      	bne.n	800427e <HAL_RCC_OscConfig+0x4ca>
    }
  }

#if defined(RCC_HSI48_SUPPORT)
  /*----------------------------- HSI48 Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 800429a:	687b      	ldr	r3, [r7, #4]
 800429c:	681b      	ldr	r3, [r3, #0]
 800429e:	2220      	movs	r2, #32
 80042a0:	4013      	ands	r3, r2
 80042a2:	d05c      	beq.n	800435e <HAL_RCC_OscConfig+0x5aa>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* When the HSI48 is used as system clock it is not allowed to be disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI48) ||
 80042a4:	4b62      	ldr	r3, [pc, #392]	; (8004430 <HAL_RCC_OscConfig+0x67c>)
 80042a6:	685b      	ldr	r3, [r3, #4]
 80042a8:	220c      	movs	r2, #12
 80042aa:	4013      	ands	r3, r2
 80042ac:	2b0c      	cmp	r3, #12
 80042ae:	d00e      	beq.n	80042ce <HAL_RCC_OscConfig+0x51a>
       ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI48)))
 80042b0:	4b5f      	ldr	r3, [pc, #380]	; (8004430 <HAL_RCC_OscConfig+0x67c>)
 80042b2:	685b      	ldr	r3, [r3, #4]
 80042b4:	220c      	movs	r2, #12
 80042b6:	4013      	ands	r3, r2
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI48) ||
 80042b8:	2b08      	cmp	r3, #8
 80042ba:	d114      	bne.n	80042e6 <HAL_RCC_OscConfig+0x532>
       ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI48)))
 80042bc:	4b5c      	ldr	r3, [pc, #368]	; (8004430 <HAL_RCC_OscConfig+0x67c>)
 80042be:	685a      	ldr	r2, [r3, #4]
 80042c0:	23c0      	movs	r3, #192	; 0xc0
 80042c2:	025b      	lsls	r3, r3, #9
 80042c4:	401a      	ands	r2, r3
 80042c6:	23c0      	movs	r3, #192	; 0xc0
 80042c8:	025b      	lsls	r3, r3, #9
 80042ca:	429a      	cmp	r2, r3
 80042cc:	d10b      	bne.n	80042e6 <HAL_RCC_OscConfig+0x532>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != RESET) && (RCC_OscInitStruct->HSI48State != RCC_HSI48_ON))
 80042ce:	4b58      	ldr	r3, [pc, #352]	; (8004430 <HAL_RCC_OscConfig+0x67c>)
 80042d0:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80042d2:	2380      	movs	r3, #128	; 0x80
 80042d4:	029b      	lsls	r3, r3, #10
 80042d6:	4013      	ands	r3, r2
 80042d8:	d040      	beq.n	800435c <HAL_RCC_OscConfig+0x5a8>
 80042da:	687b      	ldr	r3, [r7, #4]
 80042dc:	6a1b      	ldr	r3, [r3, #32]
 80042de:	2b01      	cmp	r3, #1
 80042e0:	d03c      	beq.n	800435c <HAL_RCC_OscConfig+0x5a8>
      {
        return HAL_ERROR;
 80042e2:	2301      	movs	r3, #1
 80042e4:	e0e6      	b.n	80044b4 <HAL_RCC_OscConfig+0x700>
      }
    }
    else
    {
      /* Check the HSI48 State */
      if(RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 80042e6:	687b      	ldr	r3, [r7, #4]
 80042e8:	6a1b      	ldr	r3, [r3, #32]
 80042ea:	2b00      	cmp	r3, #0
 80042ec:	d01b      	beq.n	8004326 <HAL_RCC_OscConfig+0x572>
      {
        /* Enable the Internal High Speed oscillator (HSI48). */
        __HAL_RCC_HSI48_ENABLE();
 80042ee:	4b50      	ldr	r3, [pc, #320]	; (8004430 <HAL_RCC_OscConfig+0x67c>)
 80042f0:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80042f2:	4b4f      	ldr	r3, [pc, #316]	; (8004430 <HAL_RCC_OscConfig+0x67c>)
 80042f4:	2180      	movs	r1, #128	; 0x80
 80042f6:	0249      	lsls	r1, r1, #9
 80042f8:	430a      	orrs	r2, r1
 80042fa:	635a      	str	r2, [r3, #52]	; 0x34

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80042fc:	f7fe f894 	bl	8002428 <HAL_GetTick>
 8004300:	0003      	movs	r3, r0
 8004302:	61bb      	str	r3, [r7, #24]
      
        /* Wait till HSI48 is ready */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == RESET)
 8004304:	e008      	b.n	8004318 <HAL_RCC_OscConfig+0x564>
        {
          if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8004306:	f7fe f88f 	bl	8002428 <HAL_GetTick>
 800430a:	0002      	movs	r2, r0
 800430c:	69bb      	ldr	r3, [r7, #24]
 800430e:	1ad3      	subs	r3, r2, r3
 8004310:	2b02      	cmp	r3, #2
 8004312:	d901      	bls.n	8004318 <HAL_RCC_OscConfig+0x564>
          {
            return HAL_TIMEOUT;
 8004314:	2303      	movs	r3, #3
 8004316:	e0cd      	b.n	80044b4 <HAL_RCC_OscConfig+0x700>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == RESET)
 8004318:	4b45      	ldr	r3, [pc, #276]	; (8004430 <HAL_RCC_OscConfig+0x67c>)
 800431a:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800431c:	2380      	movs	r3, #128	; 0x80
 800431e:	029b      	lsls	r3, r3, #10
 8004320:	4013      	ands	r3, r2
 8004322:	d0f0      	beq.n	8004306 <HAL_RCC_OscConfig+0x552>
 8004324:	e01b      	b.n	800435e <HAL_RCC_OscConfig+0x5aa>
        } 
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI48). */
        __HAL_RCC_HSI48_DISABLE();
 8004326:	4b42      	ldr	r3, [pc, #264]	; (8004430 <HAL_RCC_OscConfig+0x67c>)
 8004328:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800432a:	4b41      	ldr	r3, [pc, #260]	; (8004430 <HAL_RCC_OscConfig+0x67c>)
 800432c:	4943      	ldr	r1, [pc, #268]	; (800443c <HAL_RCC_OscConfig+0x688>)
 800432e:	400a      	ands	r2, r1
 8004330:	635a      	str	r2, [r3, #52]	; 0x34

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004332:	f7fe f879 	bl	8002428 <HAL_GetTick>
 8004336:	0003      	movs	r3, r0
 8004338:	61bb      	str	r3, [r7, #24]
      
        /* Wait till HSI48 is ready */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != RESET)
 800433a:	e008      	b.n	800434e <HAL_RCC_OscConfig+0x59a>
        {
          if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 800433c:	f7fe f874 	bl	8002428 <HAL_GetTick>
 8004340:	0002      	movs	r2, r0
 8004342:	69bb      	ldr	r3, [r7, #24]
 8004344:	1ad3      	subs	r3, r2, r3
 8004346:	2b02      	cmp	r3, #2
 8004348:	d901      	bls.n	800434e <HAL_RCC_OscConfig+0x59a>
          {
            return HAL_TIMEOUT;
 800434a:	2303      	movs	r3, #3
 800434c:	e0b2      	b.n	80044b4 <HAL_RCC_OscConfig+0x700>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != RESET)
 800434e:	4b38      	ldr	r3, [pc, #224]	; (8004430 <HAL_RCC_OscConfig+0x67c>)
 8004350:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8004352:	2380      	movs	r3, #128	; 0x80
 8004354:	029b      	lsls	r3, r3, #10
 8004356:	4013      	ands	r3, r2
 8004358:	d1f0      	bne.n	800433c <HAL_RCC_OscConfig+0x588>
 800435a:	e000      	b.n	800435e <HAL_RCC_OscConfig+0x5aa>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != RESET) && (RCC_OscInitStruct->HSI48State != RCC_HSI48_ON))
 800435c:	46c0      	nop			; (mov r8, r8)
#endif /* RCC_HSI48_SUPPORT */
       
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 800435e:	687b      	ldr	r3, [r7, #4]
 8004360:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004362:	2b00      	cmp	r3, #0
 8004364:	d100      	bne.n	8004368 <HAL_RCC_OscConfig+0x5b4>
 8004366:	e0a4      	b.n	80044b2 <HAL_RCC_OscConfig+0x6fe>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8004368:	4b31      	ldr	r3, [pc, #196]	; (8004430 <HAL_RCC_OscConfig+0x67c>)
 800436a:	685b      	ldr	r3, [r3, #4]
 800436c:	220c      	movs	r2, #12
 800436e:	4013      	ands	r3, r2
 8004370:	2b08      	cmp	r3, #8
 8004372:	d100      	bne.n	8004376 <HAL_RCC_OscConfig+0x5c2>
 8004374:	e078      	b.n	8004468 <HAL_RCC_OscConfig+0x6b4>
    { 
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8004376:	687b      	ldr	r3, [r7, #4]
 8004378:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800437a:	2b02      	cmp	r3, #2
 800437c:	d14c      	bne.n	8004418 <HAL_RCC_OscConfig+0x664>
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));
        assert_param(IS_RCC_PREDIV(RCC_OscInitStruct->PLL.PREDIV));
  
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800437e:	4b2c      	ldr	r3, [pc, #176]	; (8004430 <HAL_RCC_OscConfig+0x67c>)
 8004380:	681a      	ldr	r2, [r3, #0]
 8004382:	4b2b      	ldr	r3, [pc, #172]	; (8004430 <HAL_RCC_OscConfig+0x67c>)
 8004384:	492e      	ldr	r1, [pc, #184]	; (8004440 <HAL_RCC_OscConfig+0x68c>)
 8004386:	400a      	ands	r2, r1
 8004388:	601a      	str	r2, [r3, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800438a:	f7fe f84d 	bl	8002428 <HAL_GetTick>
 800438e:	0003      	movs	r3, r0
 8004390:	61bb      	str	r3, [r7, #24]
        
        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8004392:	e008      	b.n	80043a6 <HAL_RCC_OscConfig+0x5f2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8004394:	f7fe f848 	bl	8002428 <HAL_GetTick>
 8004398:	0002      	movs	r2, r0
 800439a:	69bb      	ldr	r3, [r7, #24]
 800439c:	1ad3      	subs	r3, r2, r3
 800439e:	2b02      	cmp	r3, #2
 80043a0:	d901      	bls.n	80043a6 <HAL_RCC_OscConfig+0x5f2>
          {
            return HAL_TIMEOUT;
 80043a2:	2303      	movs	r3, #3
 80043a4:	e086      	b.n	80044b4 <HAL_RCC_OscConfig+0x700>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80043a6:	4b22      	ldr	r3, [pc, #136]	; (8004430 <HAL_RCC_OscConfig+0x67c>)
 80043a8:	681a      	ldr	r2, [r3, #0]
 80043aa:	2380      	movs	r3, #128	; 0x80
 80043ac:	049b      	lsls	r3, r3, #18
 80043ae:	4013      	ands	r3, r2
 80043b0:	d1f0      	bne.n	8004394 <HAL_RCC_OscConfig+0x5e0>
          }
        }

        /* Configure the main PLL clock source, predivider and multiplication factor. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 80043b2:	4b1f      	ldr	r3, [pc, #124]	; (8004430 <HAL_RCC_OscConfig+0x67c>)
 80043b4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80043b6:	220f      	movs	r2, #15
 80043b8:	4393      	bics	r3, r2
 80043ba:	0019      	movs	r1, r3
 80043bc:	687b      	ldr	r3, [r7, #4]
 80043be:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80043c0:	4b1b      	ldr	r3, [pc, #108]	; (8004430 <HAL_RCC_OscConfig+0x67c>)
 80043c2:	430a      	orrs	r2, r1
 80043c4:	62da      	str	r2, [r3, #44]	; 0x2c
 80043c6:	4b1a      	ldr	r3, [pc, #104]	; (8004430 <HAL_RCC_OscConfig+0x67c>)
 80043c8:	685b      	ldr	r3, [r3, #4]
 80043ca:	4a1e      	ldr	r2, [pc, #120]	; (8004444 <HAL_RCC_OscConfig+0x690>)
 80043cc:	4013      	ands	r3, r2
 80043ce:	0019      	movs	r1, r3
 80043d0:	687b      	ldr	r3, [r7, #4]
 80043d2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80043d4:	687b      	ldr	r3, [r7, #4]
 80043d6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80043d8:	431a      	orrs	r2, r3
 80043da:	4b15      	ldr	r3, [pc, #84]	; (8004430 <HAL_RCC_OscConfig+0x67c>)
 80043dc:	430a      	orrs	r2, r1
 80043de:	605a      	str	r2, [r3, #4]
                             RCC_OscInitStruct->PLL.PREDIV,
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80043e0:	4b13      	ldr	r3, [pc, #76]	; (8004430 <HAL_RCC_OscConfig+0x67c>)
 80043e2:	681a      	ldr	r2, [r3, #0]
 80043e4:	4b12      	ldr	r3, [pc, #72]	; (8004430 <HAL_RCC_OscConfig+0x67c>)
 80043e6:	2180      	movs	r1, #128	; 0x80
 80043e8:	0449      	lsls	r1, r1, #17
 80043ea:	430a      	orrs	r2, r1
 80043ec:	601a      	str	r2, [r3, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80043ee:	f7fe f81b 	bl	8002428 <HAL_GetTick>
 80043f2:	0003      	movs	r3, r0
 80043f4:	61bb      	str	r3, [r7, #24]
        
        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 80043f6:	e008      	b.n	800440a <HAL_RCC_OscConfig+0x656>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80043f8:	f7fe f816 	bl	8002428 <HAL_GetTick>
 80043fc:	0002      	movs	r2, r0
 80043fe:	69bb      	ldr	r3, [r7, #24]
 8004400:	1ad3      	subs	r3, r2, r3
 8004402:	2b02      	cmp	r3, #2
 8004404:	d901      	bls.n	800440a <HAL_RCC_OscConfig+0x656>
          {
            return HAL_TIMEOUT;
 8004406:	2303      	movs	r3, #3
 8004408:	e054      	b.n	80044b4 <HAL_RCC_OscConfig+0x700>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 800440a:	4b09      	ldr	r3, [pc, #36]	; (8004430 <HAL_RCC_OscConfig+0x67c>)
 800440c:	681a      	ldr	r2, [r3, #0]
 800440e:	2380      	movs	r3, #128	; 0x80
 8004410:	049b      	lsls	r3, r3, #18
 8004412:	4013      	ands	r3, r2
 8004414:	d0f0      	beq.n	80043f8 <HAL_RCC_OscConfig+0x644>
 8004416:	e04c      	b.n	80044b2 <HAL_RCC_OscConfig+0x6fe>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8004418:	4b05      	ldr	r3, [pc, #20]	; (8004430 <HAL_RCC_OscConfig+0x67c>)
 800441a:	681a      	ldr	r2, [r3, #0]
 800441c:	4b04      	ldr	r3, [pc, #16]	; (8004430 <HAL_RCC_OscConfig+0x67c>)
 800441e:	4908      	ldr	r1, [pc, #32]	; (8004440 <HAL_RCC_OscConfig+0x68c>)
 8004420:	400a      	ands	r2, r1
 8004422:	601a      	str	r2, [r3, #0]
 
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004424:	f7fe f800 	bl	8002428 <HAL_GetTick>
 8004428:	0003      	movs	r3, r0
 800442a:	61bb      	str	r3, [r7, #24]
        
        /* Wait till PLL is disabled */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800442c:	e015      	b.n	800445a <HAL_RCC_OscConfig+0x6a6>
 800442e:	46c0      	nop			; (mov r8, r8)
 8004430:	40021000 	.word	0x40021000
 8004434:	00001388 	.word	0x00001388
 8004438:	efffffff 	.word	0xefffffff
 800443c:	fffeffff 	.word	0xfffeffff
 8004440:	feffffff 	.word	0xfeffffff
 8004444:	ffc27fff 	.word	0xffc27fff
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8004448:	f7fd ffee 	bl	8002428 <HAL_GetTick>
 800444c:	0002      	movs	r2, r0
 800444e:	69bb      	ldr	r3, [r7, #24]
 8004450:	1ad3      	subs	r3, r2, r3
 8004452:	2b02      	cmp	r3, #2
 8004454:	d901      	bls.n	800445a <HAL_RCC_OscConfig+0x6a6>
          {
            return HAL_TIMEOUT;
 8004456:	2303      	movs	r3, #3
 8004458:	e02c      	b.n	80044b4 <HAL_RCC_OscConfig+0x700>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800445a:	4b18      	ldr	r3, [pc, #96]	; (80044bc <HAL_RCC_OscConfig+0x708>)
 800445c:	681a      	ldr	r2, [r3, #0]
 800445e:	2380      	movs	r3, #128	; 0x80
 8004460:	049b      	lsls	r3, r3, #18
 8004462:	4013      	ands	r3, r2
 8004464:	d1f0      	bne.n	8004448 <HAL_RCC_OscConfig+0x694>
 8004466:	e024      	b.n	80044b2 <HAL_RCC_OscConfig+0x6fe>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8004468:	687b      	ldr	r3, [r7, #4]
 800446a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800446c:	2b01      	cmp	r3, #1
 800446e:	d101      	bne.n	8004474 <HAL_RCC_OscConfig+0x6c0>
      {
        return HAL_ERROR;
 8004470:	2301      	movs	r3, #1
 8004472:	e01f      	b.n	80044b4 <HAL_RCC_OscConfig+0x700>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config  = RCC->CFGR;
 8004474:	4b11      	ldr	r3, [pc, #68]	; (80044bc <HAL_RCC_OscConfig+0x708>)
 8004476:	685b      	ldr	r3, [r3, #4]
 8004478:	617b      	str	r3, [r7, #20]
        pll_config2 = RCC->CFGR2;
 800447a:	4b10      	ldr	r3, [pc, #64]	; (80044bc <HAL_RCC_OscConfig+0x708>)
 800447c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800447e:	613b      	str	r3, [r7, #16]
        if((READ_BIT(pll_config,  RCC_CFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8004480:	697a      	ldr	r2, [r7, #20]
 8004482:	23c0      	movs	r3, #192	; 0xc0
 8004484:	025b      	lsls	r3, r3, #9
 8004486:	401a      	ands	r2, r3
 8004488:	687b      	ldr	r3, [r7, #4]
 800448a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800448c:	429a      	cmp	r2, r3
 800448e:	d10e      	bne.n	80044ae <HAL_RCC_OscConfig+0x6fa>
           (READ_BIT(pll_config2, RCC_CFGR2_PREDIV) != RCC_OscInitStruct->PLL.PREDIV)    ||
 8004490:	693b      	ldr	r3, [r7, #16]
 8004492:	220f      	movs	r2, #15
 8004494:	401a      	ands	r2, r3
 8004496:	687b      	ldr	r3, [r7, #4]
 8004498:	6b1b      	ldr	r3, [r3, #48]	; 0x30
        if((READ_BIT(pll_config,  RCC_CFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 800449a:	429a      	cmp	r2, r3
 800449c:	d107      	bne.n	80044ae <HAL_RCC_OscConfig+0x6fa>
           (READ_BIT(pll_config,  RCC_CFGR_PLLMUL)  != RCC_OscInitStruct->PLL.PLLMUL))
 800449e:	697a      	ldr	r2, [r7, #20]
 80044a0:	23f0      	movs	r3, #240	; 0xf0
 80044a2:	039b      	lsls	r3, r3, #14
 80044a4:	401a      	ands	r2, r3
 80044a6:	687b      	ldr	r3, [r7, #4]
 80044a8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
           (READ_BIT(pll_config2, RCC_CFGR2_PREDIV) != RCC_OscInitStruct->PLL.PREDIV)    ||
 80044aa:	429a      	cmp	r2, r3
 80044ac:	d001      	beq.n	80044b2 <HAL_RCC_OscConfig+0x6fe>
        {
          return HAL_ERROR;
 80044ae:	2301      	movs	r3, #1
 80044b0:	e000      	b.n	80044b4 <HAL_RCC_OscConfig+0x700>
        }
      }
    }
  }

  return HAL_OK;
 80044b2:	2300      	movs	r3, #0
}
 80044b4:	0018      	movs	r0, r3
 80044b6:	46bd      	mov	sp, r7
 80044b8:	b008      	add	sp, #32
 80044ba:	bd80      	pop	{r7, pc}
 80044bc:	40021000 	.word	0x40021000

080044c0 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80044c0:	b580      	push	{r7, lr}
 80044c2:	b084      	sub	sp, #16
 80044c4:	af00      	add	r7, sp, #0
 80044c6:	6078      	str	r0, [r7, #4]
 80044c8:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 80044ca:	687b      	ldr	r3, [r7, #4]
 80044cc:	2b00      	cmp	r3, #0
 80044ce:	d101      	bne.n	80044d4 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80044d0:	2301      	movs	r3, #1
 80044d2:	e0bf      	b.n	8004654 <HAL_RCC_ClockConfig+0x194>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY) 
  must be correctly programmed according to the frequency of the CPU clock 
    (HCLK) of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 80044d4:	4b61      	ldr	r3, [pc, #388]	; (800465c <HAL_RCC_ClockConfig+0x19c>)
 80044d6:	681b      	ldr	r3, [r3, #0]
 80044d8:	2201      	movs	r2, #1
 80044da:	4013      	ands	r3, r2
 80044dc:	683a      	ldr	r2, [r7, #0]
 80044de:	429a      	cmp	r2, r3
 80044e0:	d911      	bls.n	8004506 <HAL_RCC_ClockConfig+0x46>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80044e2:	4b5e      	ldr	r3, [pc, #376]	; (800465c <HAL_RCC_ClockConfig+0x19c>)
 80044e4:	681b      	ldr	r3, [r3, #0]
 80044e6:	2201      	movs	r2, #1
 80044e8:	4393      	bics	r3, r2
 80044ea:	0019      	movs	r1, r3
 80044ec:	4b5b      	ldr	r3, [pc, #364]	; (800465c <HAL_RCC_ClockConfig+0x19c>)
 80044ee:	683a      	ldr	r2, [r7, #0]
 80044f0:	430a      	orrs	r2, r1
 80044f2:	601a      	str	r2, [r3, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80044f4:	4b59      	ldr	r3, [pc, #356]	; (800465c <HAL_RCC_ClockConfig+0x19c>)
 80044f6:	681b      	ldr	r3, [r3, #0]
 80044f8:	2201      	movs	r2, #1
 80044fa:	4013      	ands	r3, r2
 80044fc:	683a      	ldr	r2, [r7, #0]
 80044fe:	429a      	cmp	r2, r3
 8004500:	d001      	beq.n	8004506 <HAL_RCC_ClockConfig+0x46>
    {
      return HAL_ERROR;
 8004502:	2301      	movs	r3, #1
 8004504:	e0a6      	b.n	8004654 <HAL_RCC_ClockConfig+0x194>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8004506:	687b      	ldr	r3, [r7, #4]
 8004508:	681b      	ldr	r3, [r3, #0]
 800450a:	2202      	movs	r2, #2
 800450c:	4013      	ands	r3, r2
 800450e:	d015      	beq.n	800453c <HAL_RCC_ClockConfig+0x7c>
  {
    /* Set the highest APB divider in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8004510:	687b      	ldr	r3, [r7, #4]
 8004512:	681b      	ldr	r3, [r3, #0]
 8004514:	2204      	movs	r2, #4
 8004516:	4013      	ands	r3, r2
 8004518:	d006      	beq.n	8004528 <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE, RCC_HCLK_DIV16);
 800451a:	4b51      	ldr	r3, [pc, #324]	; (8004660 <HAL_RCC_ClockConfig+0x1a0>)
 800451c:	685a      	ldr	r2, [r3, #4]
 800451e:	4b50      	ldr	r3, [pc, #320]	; (8004660 <HAL_RCC_ClockConfig+0x1a0>)
 8004520:	21e0      	movs	r1, #224	; 0xe0
 8004522:	00c9      	lsls	r1, r1, #3
 8004524:	430a      	orrs	r2, r1
 8004526:	605a      	str	r2, [r3, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8004528:	4b4d      	ldr	r3, [pc, #308]	; (8004660 <HAL_RCC_ClockConfig+0x1a0>)
 800452a:	685b      	ldr	r3, [r3, #4]
 800452c:	22f0      	movs	r2, #240	; 0xf0
 800452e:	4393      	bics	r3, r2
 8004530:	0019      	movs	r1, r3
 8004532:	687b      	ldr	r3, [r7, #4]
 8004534:	689a      	ldr	r2, [r3, #8]
 8004536:	4b4a      	ldr	r3, [pc, #296]	; (8004660 <HAL_RCC_ClockConfig+0x1a0>)
 8004538:	430a      	orrs	r2, r1
 800453a:	605a      	str	r2, [r3, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800453c:	687b      	ldr	r3, [r7, #4]
 800453e:	681b      	ldr	r3, [r3, #0]
 8004540:	2201      	movs	r2, #1
 8004542:	4013      	ands	r3, r2
 8004544:	d04c      	beq.n	80045e0 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
    
    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8004546:	687b      	ldr	r3, [r7, #4]
 8004548:	685b      	ldr	r3, [r3, #4]
 800454a:	2b01      	cmp	r3, #1
 800454c:	d107      	bne.n	800455e <HAL_RCC_ClockConfig+0x9e>
    {
      /* Check the HSE ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800454e:	4b44      	ldr	r3, [pc, #272]	; (8004660 <HAL_RCC_ClockConfig+0x1a0>)
 8004550:	681a      	ldr	r2, [r3, #0]
 8004552:	2380      	movs	r3, #128	; 0x80
 8004554:	029b      	lsls	r3, r3, #10
 8004556:	4013      	ands	r3, r2
 8004558:	d120      	bne.n	800459c <HAL_RCC_ClockConfig+0xdc>
      {
        return HAL_ERROR;
 800455a:	2301      	movs	r3, #1
 800455c:	e07a      	b.n	8004654 <HAL_RCC_ClockConfig+0x194>
      }
    }
    /* PLL is selected as System Clock Source */
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 800455e:	687b      	ldr	r3, [r7, #4]
 8004560:	685b      	ldr	r3, [r3, #4]
 8004562:	2b02      	cmp	r3, #2
 8004564:	d107      	bne.n	8004576 <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the PLL ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8004566:	4b3e      	ldr	r3, [pc, #248]	; (8004660 <HAL_RCC_ClockConfig+0x1a0>)
 8004568:	681a      	ldr	r2, [r3, #0]
 800456a:	2380      	movs	r3, #128	; 0x80
 800456c:	049b      	lsls	r3, r3, #18
 800456e:	4013      	ands	r3, r2
 8004570:	d114      	bne.n	800459c <HAL_RCC_ClockConfig+0xdc>
      {
        return HAL_ERROR;
 8004572:	2301      	movs	r3, #1
 8004574:	e06e      	b.n	8004654 <HAL_RCC_ClockConfig+0x194>
      }
    }
#if defined(RCC_CFGR_SWS_HSI48)
    /* HSI48 is selected as System Clock Source */
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSI48)
 8004576:	687b      	ldr	r3, [r7, #4]
 8004578:	685b      	ldr	r3, [r3, #4]
 800457a:	2b03      	cmp	r3, #3
 800457c:	d107      	bne.n	800458e <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the HSI48 ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == RESET)
 800457e:	4b38      	ldr	r3, [pc, #224]	; (8004660 <HAL_RCC_ClockConfig+0x1a0>)
 8004580:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8004582:	2380      	movs	r3, #128	; 0x80
 8004584:	029b      	lsls	r3, r3, #10
 8004586:	4013      	ands	r3, r2
 8004588:	d108      	bne.n	800459c <HAL_RCC_ClockConfig+0xdc>
      {
        return HAL_ERROR;
 800458a:	2301      	movs	r3, #1
 800458c:	e062      	b.n	8004654 <HAL_RCC_ClockConfig+0x194>
#endif /* RCC_CFGR_SWS_HSI48 */
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800458e:	4b34      	ldr	r3, [pc, #208]	; (8004660 <HAL_RCC_ClockConfig+0x1a0>)
 8004590:	681b      	ldr	r3, [r3, #0]
 8004592:	2202      	movs	r2, #2
 8004594:	4013      	ands	r3, r2
 8004596:	d101      	bne.n	800459c <HAL_RCC_ClockConfig+0xdc>
      {
        return HAL_ERROR;
 8004598:	2301      	movs	r3, #1
 800459a:	e05b      	b.n	8004654 <HAL_RCC_ClockConfig+0x194>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 800459c:	4b30      	ldr	r3, [pc, #192]	; (8004660 <HAL_RCC_ClockConfig+0x1a0>)
 800459e:	685b      	ldr	r3, [r3, #4]
 80045a0:	2203      	movs	r2, #3
 80045a2:	4393      	bics	r3, r2
 80045a4:	0019      	movs	r1, r3
 80045a6:	687b      	ldr	r3, [r7, #4]
 80045a8:	685a      	ldr	r2, [r3, #4]
 80045aa:	4b2d      	ldr	r3, [pc, #180]	; (8004660 <HAL_RCC_ClockConfig+0x1a0>)
 80045ac:	430a      	orrs	r2, r1
 80045ae:	605a      	str	r2, [r3, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 80045b0:	f7fd ff3a 	bl	8002428 <HAL_GetTick>
 80045b4:	0003      	movs	r3, r0
 80045b6:	60fb      	str	r3, [r7, #12]
    
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80045b8:	e009      	b.n	80045ce <HAL_RCC_ClockConfig+0x10e>
    {
      if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 80045ba:	f7fd ff35 	bl	8002428 <HAL_GetTick>
 80045be:	0002      	movs	r2, r0
 80045c0:	68fb      	ldr	r3, [r7, #12]
 80045c2:	1ad3      	subs	r3, r2, r3
 80045c4:	4a27      	ldr	r2, [pc, #156]	; (8004664 <HAL_RCC_ClockConfig+0x1a4>)
 80045c6:	4293      	cmp	r3, r2
 80045c8:	d901      	bls.n	80045ce <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 80045ca:	2303      	movs	r3, #3
 80045cc:	e042      	b.n	8004654 <HAL_RCC_ClockConfig+0x194>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80045ce:	4b24      	ldr	r3, [pc, #144]	; (8004660 <HAL_RCC_ClockConfig+0x1a0>)
 80045d0:	685b      	ldr	r3, [r3, #4]
 80045d2:	220c      	movs	r2, #12
 80045d4:	401a      	ands	r2, r3
 80045d6:	687b      	ldr	r3, [r7, #4]
 80045d8:	685b      	ldr	r3, [r3, #4]
 80045da:	009b      	lsls	r3, r3, #2
 80045dc:	429a      	cmp	r2, r3
 80045de:	d1ec      	bne.n	80045ba <HAL_RCC_ClockConfig+0xfa>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 80045e0:	4b1e      	ldr	r3, [pc, #120]	; (800465c <HAL_RCC_ClockConfig+0x19c>)
 80045e2:	681b      	ldr	r3, [r3, #0]
 80045e4:	2201      	movs	r2, #1
 80045e6:	4013      	ands	r3, r2
 80045e8:	683a      	ldr	r2, [r7, #0]
 80045ea:	429a      	cmp	r2, r3
 80045ec:	d211      	bcs.n	8004612 <HAL_RCC_ClockConfig+0x152>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80045ee:	4b1b      	ldr	r3, [pc, #108]	; (800465c <HAL_RCC_ClockConfig+0x19c>)
 80045f0:	681b      	ldr	r3, [r3, #0]
 80045f2:	2201      	movs	r2, #1
 80045f4:	4393      	bics	r3, r2
 80045f6:	0019      	movs	r1, r3
 80045f8:	4b18      	ldr	r3, [pc, #96]	; (800465c <HAL_RCC_ClockConfig+0x19c>)
 80045fa:	683a      	ldr	r2, [r7, #0]
 80045fc:	430a      	orrs	r2, r1
 80045fe:	601a      	str	r2, [r3, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8004600:	4b16      	ldr	r3, [pc, #88]	; (800465c <HAL_RCC_ClockConfig+0x19c>)
 8004602:	681b      	ldr	r3, [r3, #0]
 8004604:	2201      	movs	r2, #1
 8004606:	4013      	ands	r3, r2
 8004608:	683a      	ldr	r2, [r7, #0]
 800460a:	429a      	cmp	r2, r3
 800460c:	d001      	beq.n	8004612 <HAL_RCC_ClockConfig+0x152>
    {
      return HAL_ERROR;
 800460e:	2301      	movs	r3, #1
 8004610:	e020      	b.n	8004654 <HAL_RCC_ClockConfig+0x194>
    }
  }    

  /*-------------------------- PCLK1 Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8004612:	687b      	ldr	r3, [r7, #4]
 8004614:	681b      	ldr	r3, [r3, #0]
 8004616:	2204      	movs	r2, #4
 8004618:	4013      	ands	r3, r2
 800461a:	d009      	beq.n	8004630 <HAL_RCC_ClockConfig+0x170>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE, RCC_ClkInitStruct->APB1CLKDivider);
 800461c:	4b10      	ldr	r3, [pc, #64]	; (8004660 <HAL_RCC_ClockConfig+0x1a0>)
 800461e:	685b      	ldr	r3, [r3, #4]
 8004620:	4a11      	ldr	r2, [pc, #68]	; (8004668 <HAL_RCC_ClockConfig+0x1a8>)
 8004622:	4013      	ands	r3, r2
 8004624:	0019      	movs	r1, r3
 8004626:	687b      	ldr	r3, [r7, #4]
 8004628:	68da      	ldr	r2, [r3, #12]
 800462a:	4b0d      	ldr	r3, [pc, #52]	; (8004660 <HAL_RCC_ClockConfig+0x1a0>)
 800462c:	430a      	orrs	r2, r1
 800462e:	605a      	str	r2, [r3, #4]
  }
  
  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_BITNUMBER];
 8004630:	f000 f820 	bl	8004674 <HAL_RCC_GetSysClockFreq>
 8004634:	0001      	movs	r1, r0
 8004636:	4b0a      	ldr	r3, [pc, #40]	; (8004660 <HAL_RCC_ClockConfig+0x1a0>)
 8004638:	685b      	ldr	r3, [r3, #4]
 800463a:	091b      	lsrs	r3, r3, #4
 800463c:	220f      	movs	r2, #15
 800463e:	4013      	ands	r3, r2
 8004640:	4a0a      	ldr	r2, [pc, #40]	; (800466c <HAL_RCC_ClockConfig+0x1ac>)
 8004642:	5cd3      	ldrb	r3, [r2, r3]
 8004644:	000a      	movs	r2, r1
 8004646:	40da      	lsrs	r2, r3
 8004648:	4b09      	ldr	r3, [pc, #36]	; (8004670 <HAL_RCC_ClockConfig+0x1b0>)
 800464a:	601a      	str	r2, [r3, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick (TICK_INT_PRIORITY);
 800464c:	2003      	movs	r0, #3
 800464e:	f7fd fea5 	bl	800239c <HAL_InitTick>
  
  return HAL_OK;
 8004652:	2300      	movs	r3, #0
}
 8004654:	0018      	movs	r0, r3
 8004656:	46bd      	mov	sp, r7
 8004658:	b004      	add	sp, #16
 800465a:	bd80      	pop	{r7, pc}
 800465c:	40022000 	.word	0x40022000
 8004660:	40021000 	.word	0x40021000
 8004664:	00001388 	.word	0x00001388
 8004668:	fffff8ff 	.word	0xfffff8ff
 800466c:	08005dec 	.word	0x08005dec
 8004670:	20000050 	.word	0x20000050

08004674 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *         
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8004674:	b580      	push	{r7, lr}
 8004676:	b086      	sub	sp, #24
 8004678:	af00      	add	r7, sp, #0
  static const uint8_t aPLLMULFactorTable[16U] = { 2U,  3U,  4U,  5U,  6U,  7U,  8U,  9U,
                                                   10U, 11U, 12U, 13U, 14U, 15U, 16U, 16U};
  static const uint8_t aPredivFactorTable[16U] = { 1U, 2U,  3U,  4U,  5U,  6U,  7U,  8U,
                                                   9U,10U, 11U, 12U, 13U, 14U, 15U, 16U};

  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 800467a:	2300      	movs	r3, #0
 800467c:	60fb      	str	r3, [r7, #12]
 800467e:	2300      	movs	r3, #0
 8004680:	60bb      	str	r3, [r7, #8]
 8004682:	2300      	movs	r3, #0
 8004684:	617b      	str	r3, [r7, #20]
 8004686:	2300      	movs	r3, #0
 8004688:	607b      	str	r3, [r7, #4]
  uint32_t sysclockfreq = 0U;
 800468a:	2300      	movs	r3, #0
 800468c:	613b      	str	r3, [r7, #16]
  
  tmpreg = RCC->CFGR;
 800468e:	4b2d      	ldr	r3, [pc, #180]	; (8004744 <HAL_RCC_GetSysClockFreq+0xd0>)
 8004690:	685b      	ldr	r3, [r3, #4]
 8004692:	60fb      	str	r3, [r7, #12]
  
  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8004694:	68fb      	ldr	r3, [r7, #12]
 8004696:	220c      	movs	r2, #12
 8004698:	4013      	ands	r3, r2
 800469a:	2b0c      	cmp	r3, #12
 800469c:	d046      	beq.n	800472c <HAL_RCC_GetSysClockFreq+0xb8>
 800469e:	d848      	bhi.n	8004732 <HAL_RCC_GetSysClockFreq+0xbe>
 80046a0:	2b04      	cmp	r3, #4
 80046a2:	d002      	beq.n	80046aa <HAL_RCC_GetSysClockFreq+0x36>
 80046a4:	2b08      	cmp	r3, #8
 80046a6:	d003      	beq.n	80046b0 <HAL_RCC_GetSysClockFreq+0x3c>
 80046a8:	e043      	b.n	8004732 <HAL_RCC_GetSysClockFreq+0xbe>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 80046aa:	4b27      	ldr	r3, [pc, #156]	; (8004748 <HAL_RCC_GetSysClockFreq+0xd4>)
 80046ac:	613b      	str	r3, [r7, #16]
      break;
 80046ae:	e043      	b.n	8004738 <HAL_RCC_GetSysClockFreq+0xc4>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMUL) >> RCC_CFGR_PLLMUL_BITNUMBER];
 80046b0:	68fb      	ldr	r3, [r7, #12]
 80046b2:	0c9b      	lsrs	r3, r3, #18
 80046b4:	220f      	movs	r2, #15
 80046b6:	4013      	ands	r3, r2
 80046b8:	4a24      	ldr	r2, [pc, #144]	; (800474c <HAL_RCC_GetSysClockFreq+0xd8>)
 80046ba:	5cd3      	ldrb	r3, [r2, r3]
 80046bc:	607b      	str	r3, [r7, #4]
      prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV) >> RCC_CFGR2_PREDIV_BITNUMBER];
 80046be:	4b21      	ldr	r3, [pc, #132]	; (8004744 <HAL_RCC_GetSysClockFreq+0xd0>)
 80046c0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80046c2:	220f      	movs	r2, #15
 80046c4:	4013      	ands	r3, r2
 80046c6:	4a22      	ldr	r2, [pc, #136]	; (8004750 <HAL_RCC_GetSysClockFreq+0xdc>)
 80046c8:	5cd3      	ldrb	r3, [r2, r3]
 80046ca:	60bb      	str	r3, [r7, #8]
      if ((tmpreg & RCC_CFGR_PLLSRC) == RCC_PLLSOURCE_HSE)
 80046cc:	68fa      	ldr	r2, [r7, #12]
 80046ce:	23c0      	movs	r3, #192	; 0xc0
 80046d0:	025b      	lsls	r3, r3, #9
 80046d2:	401a      	ands	r2, r3
 80046d4:	2380      	movs	r3, #128	; 0x80
 80046d6:	025b      	lsls	r3, r3, #9
 80046d8:	429a      	cmp	r2, r3
 80046da:	d109      	bne.n	80046f0 <HAL_RCC_GetSysClockFreq+0x7c>
      {
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV * PLLMUL */
        pllclk = (uint32_t)((uint64_t) HSE_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
 80046dc:	68b9      	ldr	r1, [r7, #8]
 80046de:	481a      	ldr	r0, [pc, #104]	; (8004748 <HAL_RCC_GetSysClockFreq+0xd4>)
 80046e0:	f7fb fd12 	bl	8000108 <__udivsi3>
 80046e4:	0003      	movs	r3, r0
 80046e6:	001a      	movs	r2, r3
 80046e8:	687b      	ldr	r3, [r7, #4]
 80046ea:	4353      	muls	r3, r2
 80046ec:	617b      	str	r3, [r7, #20]
 80046ee:	e01a      	b.n	8004726 <HAL_RCC_GetSysClockFreq+0xb2>
      }
#if defined(RCC_CFGR_PLLSRC_HSI48_PREDIV)
      else if ((tmpreg & RCC_CFGR_PLLSRC) == RCC_PLLSOURCE_HSI48)
 80046f0:	68fa      	ldr	r2, [r7, #12]
 80046f2:	23c0      	movs	r3, #192	; 0xc0
 80046f4:	025b      	lsls	r3, r3, #9
 80046f6:	401a      	ands	r2, r3
 80046f8:	23c0      	movs	r3, #192	; 0xc0
 80046fa:	025b      	lsls	r3, r3, #9
 80046fc:	429a      	cmp	r2, r3
 80046fe:	d109      	bne.n	8004714 <HAL_RCC_GetSysClockFreq+0xa0>
      {
        /* HSI48 used as PLL clock source : PLLCLK = HSI48/PREDIV * PLLMUL */
        pllclk = (uint32_t)((uint64_t) HSI48_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
 8004700:	68b9      	ldr	r1, [r7, #8]
 8004702:	4814      	ldr	r0, [pc, #80]	; (8004754 <HAL_RCC_GetSysClockFreq+0xe0>)
 8004704:	f7fb fd00 	bl	8000108 <__udivsi3>
 8004708:	0003      	movs	r3, r0
 800470a:	001a      	movs	r2, r3
 800470c:	687b      	ldr	r3, [r7, #4]
 800470e:	4353      	muls	r3, r2
 8004710:	617b      	str	r3, [r7, #20]
 8004712:	e008      	b.n	8004726 <HAL_RCC_GetSysClockFreq+0xb2>
#endif /* RCC_CFGR_PLLSRC_HSI48_PREDIV */
      else
      {
#if  (defined(STM32F042x6) || defined(STM32F048xx) || defined(STM32F070x6) || defined(STM32F071xB) || defined(STM32F072xB) || defined(STM32F078xx) || defined(STM32F070xB) || defined(STM32F091xC) || defined(STM32F098xx) || defined(STM32F030xC))
        /* HSI used as PLL clock source : PLLCLK = HSI/PREDIV * PLLMUL */
        pllclk = (uint32_t)((uint64_t) HSI_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
 8004714:	68b9      	ldr	r1, [r7, #8]
 8004716:	4810      	ldr	r0, [pc, #64]	; (8004758 <HAL_RCC_GetSysClockFreq+0xe4>)
 8004718:	f7fb fcf6 	bl	8000108 <__udivsi3>
 800471c:	0003      	movs	r3, r0
 800471e:	001a      	movs	r2, r3
 8004720:	687b      	ldr	r3, [r7, #4]
 8004722:	4353      	muls	r3, r2
 8004724:	617b      	str	r3, [r7, #20]
#else
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((uint64_t) (HSI_VALUE >> 1U) * ((uint64_t) pllmul));
#endif
      }
      sysclockfreq = pllclk;
 8004726:	697b      	ldr	r3, [r7, #20]
 8004728:	613b      	str	r3, [r7, #16]
      break;
 800472a:	e005      	b.n	8004738 <HAL_RCC_GetSysClockFreq+0xc4>
    }
#if defined(RCC_CFGR_SWS_HSI48)
    case RCC_SYSCLKSOURCE_STATUS_HSI48:    /* HSI48 used as system clock source */
    {
      sysclockfreq = HSI48_VALUE;
 800472c:	4b09      	ldr	r3, [pc, #36]	; (8004754 <HAL_RCC_GetSysClockFreq+0xe0>)
 800472e:	613b      	str	r3, [r7, #16]
      break;
 8004730:	e002      	b.n	8004738 <HAL_RCC_GetSysClockFreq+0xc4>
    }
#endif /* RCC_CFGR_SWS_HSI48 */
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 8004732:	4b09      	ldr	r3, [pc, #36]	; (8004758 <HAL_RCC_GetSysClockFreq+0xe4>)
 8004734:	613b      	str	r3, [r7, #16]
      break;
 8004736:	46c0      	nop			; (mov r8, r8)
    }
  }
  return sysclockfreq;
 8004738:	693b      	ldr	r3, [r7, #16]
}
 800473a:	0018      	movs	r0, r3
 800473c:	46bd      	mov	sp, r7
 800473e:	b006      	add	sp, #24
 8004740:	bd80      	pop	{r7, pc}
 8004742:	46c0      	nop			; (mov r8, r8)
 8004744:	40021000 	.word	0x40021000
 8004748:	00f42400 	.word	0x00f42400
 800474c:	08005e04 	.word	0x08005e04
 8004750:	08005e14 	.word	0x08005e14
 8004754:	02dc6c00 	.word	0x02dc6c00
 8004758:	007a1200 	.word	0x007a1200

0800475c <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency 
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 800475c:	b580      	push	{r7, lr}
 800475e:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8004760:	4b02      	ldr	r3, [pc, #8]	; (800476c <HAL_RCC_GetHCLKFreq+0x10>)
 8004762:	681b      	ldr	r3, [r3, #0]
}
 8004764:	0018      	movs	r0, r3
 8004766:	46bd      	mov	sp, r7
 8004768:	bd80      	pop	{r7, pc}
 800476a:	46c0      	nop			; (mov r8, r8)
 800476c:	20000050 	.word	0x20000050

08004770 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8004770:	b580      	push	{r7, lr}
 8004772:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE) >> RCC_CFGR_PPRE_BITNUMBER]);
 8004774:	f7ff fff2 	bl	800475c <HAL_RCC_GetHCLKFreq>
 8004778:	0001      	movs	r1, r0
 800477a:	4b06      	ldr	r3, [pc, #24]	; (8004794 <HAL_RCC_GetPCLK1Freq+0x24>)
 800477c:	685b      	ldr	r3, [r3, #4]
 800477e:	0a1b      	lsrs	r3, r3, #8
 8004780:	2207      	movs	r2, #7
 8004782:	4013      	ands	r3, r2
 8004784:	4a04      	ldr	r2, [pc, #16]	; (8004798 <HAL_RCC_GetPCLK1Freq+0x28>)
 8004786:	5cd3      	ldrb	r3, [r2, r3]
 8004788:	40d9      	lsrs	r1, r3
 800478a:	000b      	movs	r3, r1
}    
 800478c:	0018      	movs	r0, r3
 800478e:	46bd      	mov	sp, r7
 8004790:	bd80      	pop	{r7, pc}
 8004792:	46c0      	nop			; (mov r8, r8)
 8004794:	40021000 	.word	0x40021000
 8004798:	08005dfc 	.word	0x08005dfc

0800479c <HAL_RCCEx_PeriphCLKConfig>:
  *         the backup registers) and RCC_BDCR register are set to their reset values.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 800479c:	b580      	push	{r7, lr}
 800479e:	b086      	sub	sp, #24
 80047a0:	af00      	add	r7, sp, #0
 80047a2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 80047a4:	2300      	movs	r3, #0
 80047a6:	613b      	str	r3, [r7, #16]
  uint32_t temp_reg = 0U;
 80047a8:	2300      	movs	r3, #0
 80047aa:	60fb      	str	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));
  
  /*---------------------------- RTC configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 80047ac:	687b      	ldr	r3, [r7, #4]
 80047ae:	681a      	ldr	r2, [r3, #0]
 80047b0:	2380      	movs	r3, #128	; 0x80
 80047b2:	025b      	lsls	r3, r3, #9
 80047b4:	4013      	ands	r3, r2
 80047b6:	d100      	bne.n	80047ba <HAL_RCCEx_PeriphCLKConfig+0x1e>
 80047b8:	e08e      	b.n	80048d8 <HAL_RCCEx_PeriphCLKConfig+0x13c>
  {
    /* check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));
    
    FlagStatus       pwrclkchanged = RESET;
 80047ba:	2017      	movs	r0, #23
 80047bc:	183b      	adds	r3, r7, r0
 80047be:	2200      	movs	r2, #0
 80047c0:	701a      	strb	r2, [r3, #0]

    /* As soon as function is called to change RTC clock source, activation of the 
       power domain is done. */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 80047c2:	4b67      	ldr	r3, [pc, #412]	; (8004960 <HAL_RCCEx_PeriphCLKConfig+0x1c4>)
 80047c4:	69da      	ldr	r2, [r3, #28]
 80047c6:	2380      	movs	r3, #128	; 0x80
 80047c8:	055b      	lsls	r3, r3, #21
 80047ca:	4013      	ands	r3, r2
 80047cc:	d110      	bne.n	80047f0 <HAL_RCCEx_PeriphCLKConfig+0x54>
    {
    __HAL_RCC_PWR_CLK_ENABLE();
 80047ce:	4b64      	ldr	r3, [pc, #400]	; (8004960 <HAL_RCCEx_PeriphCLKConfig+0x1c4>)
 80047d0:	69da      	ldr	r2, [r3, #28]
 80047d2:	4b63      	ldr	r3, [pc, #396]	; (8004960 <HAL_RCCEx_PeriphCLKConfig+0x1c4>)
 80047d4:	2180      	movs	r1, #128	; 0x80
 80047d6:	0549      	lsls	r1, r1, #21
 80047d8:	430a      	orrs	r2, r1
 80047da:	61da      	str	r2, [r3, #28]
 80047dc:	4b60      	ldr	r3, [pc, #384]	; (8004960 <HAL_RCCEx_PeriphCLKConfig+0x1c4>)
 80047de:	69da      	ldr	r2, [r3, #28]
 80047e0:	2380      	movs	r3, #128	; 0x80
 80047e2:	055b      	lsls	r3, r3, #21
 80047e4:	4013      	ands	r3, r2
 80047e6:	60bb      	str	r3, [r7, #8]
 80047e8:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80047ea:	183b      	adds	r3, r7, r0
 80047ec:	2201      	movs	r2, #1
 80047ee:	701a      	strb	r2, [r3, #0]
    }
    
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80047f0:	4b5c      	ldr	r3, [pc, #368]	; (8004964 <HAL_RCCEx_PeriphCLKConfig+0x1c8>)
 80047f2:	681a      	ldr	r2, [r3, #0]
 80047f4:	2380      	movs	r3, #128	; 0x80
 80047f6:	005b      	lsls	r3, r3, #1
 80047f8:	4013      	ands	r3, r2
 80047fa:	d11a      	bne.n	8004832 <HAL_RCCEx_PeriphCLKConfig+0x96>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80047fc:	4b59      	ldr	r3, [pc, #356]	; (8004964 <HAL_RCCEx_PeriphCLKConfig+0x1c8>)
 80047fe:	681a      	ldr	r2, [r3, #0]
 8004800:	4b58      	ldr	r3, [pc, #352]	; (8004964 <HAL_RCCEx_PeriphCLKConfig+0x1c8>)
 8004802:	2180      	movs	r1, #128	; 0x80
 8004804:	0049      	lsls	r1, r1, #1
 8004806:	430a      	orrs	r2, r1
 8004808:	601a      	str	r2, [r3, #0]
      
      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800480a:	f7fd fe0d 	bl	8002428 <HAL_GetTick>
 800480e:	0003      	movs	r3, r0
 8004810:	613b      	str	r3, [r7, #16]
      
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004812:	e008      	b.n	8004826 <HAL_RCCEx_PeriphCLKConfig+0x8a>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8004814:	f7fd fe08 	bl	8002428 <HAL_GetTick>
 8004818:	0002      	movs	r2, r0
 800481a:	693b      	ldr	r3, [r7, #16]
 800481c:	1ad3      	subs	r3, r2, r3
 800481e:	2b64      	cmp	r3, #100	; 0x64
 8004820:	d901      	bls.n	8004826 <HAL_RCCEx_PeriphCLKConfig+0x8a>
        {
          return HAL_TIMEOUT;
 8004822:	2303      	movs	r3, #3
 8004824:	e097      	b.n	8004956 <HAL_RCCEx_PeriphCLKConfig+0x1ba>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004826:	4b4f      	ldr	r3, [pc, #316]	; (8004964 <HAL_RCCEx_PeriphCLKConfig+0x1c8>)
 8004828:	681a      	ldr	r2, [r3, #0]
 800482a:	2380      	movs	r3, #128	; 0x80
 800482c:	005b      	lsls	r3, r3, #1
 800482e:	4013      	ands	r3, r2
 8004830:	d0f0      	beq.n	8004814 <HAL_RCCEx_PeriphCLKConfig+0x78>
        }
      }
    }
    
    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */ 
    temp_reg = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8004832:	4b4b      	ldr	r3, [pc, #300]	; (8004960 <HAL_RCCEx_PeriphCLKConfig+0x1c4>)
 8004834:	6a1a      	ldr	r2, [r3, #32]
 8004836:	23c0      	movs	r3, #192	; 0xc0
 8004838:	009b      	lsls	r3, r3, #2
 800483a:	4013      	ands	r3, r2
 800483c:	60fb      	str	r3, [r7, #12]
    if((temp_reg != 0x00000000U) && (temp_reg != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 800483e:	68fb      	ldr	r3, [r7, #12]
 8004840:	2b00      	cmp	r3, #0
 8004842:	d034      	beq.n	80048ae <HAL_RCCEx_PeriphCLKConfig+0x112>
 8004844:	687b      	ldr	r3, [r7, #4]
 8004846:	685a      	ldr	r2, [r3, #4]
 8004848:	23c0      	movs	r3, #192	; 0xc0
 800484a:	009b      	lsls	r3, r3, #2
 800484c:	4013      	ands	r3, r2
 800484e:	68fa      	ldr	r2, [r7, #12]
 8004850:	429a      	cmp	r2, r3
 8004852:	d02c      	beq.n	80048ae <HAL_RCCEx_PeriphCLKConfig+0x112>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      temp_reg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8004854:	4b42      	ldr	r3, [pc, #264]	; (8004960 <HAL_RCCEx_PeriphCLKConfig+0x1c4>)
 8004856:	6a1b      	ldr	r3, [r3, #32]
 8004858:	4a43      	ldr	r2, [pc, #268]	; (8004968 <HAL_RCCEx_PeriphCLKConfig+0x1cc>)
 800485a:	4013      	ands	r3, r2
 800485c:	60fb      	str	r3, [r7, #12]
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 800485e:	4b40      	ldr	r3, [pc, #256]	; (8004960 <HAL_RCCEx_PeriphCLKConfig+0x1c4>)
 8004860:	6a1a      	ldr	r2, [r3, #32]
 8004862:	4b3f      	ldr	r3, [pc, #252]	; (8004960 <HAL_RCCEx_PeriphCLKConfig+0x1c4>)
 8004864:	2180      	movs	r1, #128	; 0x80
 8004866:	0249      	lsls	r1, r1, #9
 8004868:	430a      	orrs	r2, r1
 800486a:	621a      	str	r2, [r3, #32]
      __HAL_RCC_BACKUPRESET_RELEASE();
 800486c:	4b3c      	ldr	r3, [pc, #240]	; (8004960 <HAL_RCCEx_PeriphCLKConfig+0x1c4>)
 800486e:	6a1a      	ldr	r2, [r3, #32]
 8004870:	4b3b      	ldr	r3, [pc, #236]	; (8004960 <HAL_RCCEx_PeriphCLKConfig+0x1c4>)
 8004872:	493e      	ldr	r1, [pc, #248]	; (800496c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8004874:	400a      	ands	r2, r1
 8004876:	621a      	str	r2, [r3, #32]
      /* Restore the Content of BDCR register */
      RCC->BDCR = temp_reg;
 8004878:	4b39      	ldr	r3, [pc, #228]	; (8004960 <HAL_RCCEx_PeriphCLKConfig+0x1c4>)
 800487a:	68fa      	ldr	r2, [r7, #12]
 800487c:	621a      	str	r2, [r3, #32]
      
      /* Wait for LSERDY if LSE was enabled */
      if (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSEON))
 800487e:	68fb      	ldr	r3, [r7, #12]
 8004880:	2201      	movs	r2, #1
 8004882:	4013      	ands	r3, r2
 8004884:	d013      	beq.n	80048ae <HAL_RCCEx_PeriphCLKConfig+0x112>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004886:	f7fd fdcf 	bl	8002428 <HAL_GetTick>
 800488a:	0003      	movs	r3, r0
 800488c:	613b      	str	r3, [r7, #16]
        
        /* Wait till LSE is ready */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800488e:	e009      	b.n	80048a4 <HAL_RCCEx_PeriphCLKConfig+0x108>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8004890:	f7fd fdca 	bl	8002428 <HAL_GetTick>
 8004894:	0002      	movs	r2, r0
 8004896:	693b      	ldr	r3, [r7, #16]
 8004898:	1ad3      	subs	r3, r2, r3
 800489a:	4a35      	ldr	r2, [pc, #212]	; (8004970 <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 800489c:	4293      	cmp	r3, r2
 800489e:	d901      	bls.n	80048a4 <HAL_RCCEx_PeriphCLKConfig+0x108>
          {
            return HAL_TIMEOUT;
 80048a0:	2303      	movs	r3, #3
 80048a2:	e058      	b.n	8004956 <HAL_RCCEx_PeriphCLKConfig+0x1ba>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80048a4:	4b2e      	ldr	r3, [pc, #184]	; (8004960 <HAL_RCCEx_PeriphCLKConfig+0x1c4>)
 80048a6:	6a1b      	ldr	r3, [r3, #32]
 80048a8:	2202      	movs	r2, #2
 80048aa:	4013      	ands	r3, r2
 80048ac:	d0f0      	beq.n	8004890 <HAL_RCCEx_PeriphCLKConfig+0xf4>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 80048ae:	4b2c      	ldr	r3, [pc, #176]	; (8004960 <HAL_RCCEx_PeriphCLKConfig+0x1c4>)
 80048b0:	6a1b      	ldr	r3, [r3, #32]
 80048b2:	4a2d      	ldr	r2, [pc, #180]	; (8004968 <HAL_RCCEx_PeriphCLKConfig+0x1cc>)
 80048b4:	4013      	ands	r3, r2
 80048b6:	0019      	movs	r1, r3
 80048b8:	687b      	ldr	r3, [r7, #4]
 80048ba:	685a      	ldr	r2, [r3, #4]
 80048bc:	4b28      	ldr	r3, [pc, #160]	; (8004960 <HAL_RCCEx_PeriphCLKConfig+0x1c4>)
 80048be:	430a      	orrs	r2, r1
 80048c0:	621a      	str	r2, [r3, #32]

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 80048c2:	2317      	movs	r3, #23
 80048c4:	18fb      	adds	r3, r7, r3
 80048c6:	781b      	ldrb	r3, [r3, #0]
 80048c8:	2b01      	cmp	r3, #1
 80048ca:	d105      	bne.n	80048d8 <HAL_RCCEx_PeriphCLKConfig+0x13c>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80048cc:	4b24      	ldr	r3, [pc, #144]	; (8004960 <HAL_RCCEx_PeriphCLKConfig+0x1c4>)
 80048ce:	69da      	ldr	r2, [r3, #28]
 80048d0:	4b23      	ldr	r3, [pc, #140]	; (8004960 <HAL_RCCEx_PeriphCLKConfig+0x1c4>)
 80048d2:	4928      	ldr	r1, [pc, #160]	; (8004974 <HAL_RCCEx_PeriphCLKConfig+0x1d8>)
 80048d4:	400a      	ands	r2, r1
 80048d6:	61da      	str	r2, [r3, #28]
    }
  }

  /*------------------------------- USART1 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 80048d8:	687b      	ldr	r3, [r7, #4]
 80048da:	681b      	ldr	r3, [r3, #0]
 80048dc:	2201      	movs	r2, #1
 80048de:	4013      	ands	r3, r2
 80048e0:	d009      	beq.n	80048f6 <HAL_RCCEx_PeriphCLKConfig+0x15a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));
    
    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 80048e2:	4b1f      	ldr	r3, [pc, #124]	; (8004960 <HAL_RCCEx_PeriphCLKConfig+0x1c4>)
 80048e4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80048e6:	2203      	movs	r2, #3
 80048e8:	4393      	bics	r3, r2
 80048ea:	0019      	movs	r1, r3
 80048ec:	687b      	ldr	r3, [r7, #4]
 80048ee:	689a      	ldr	r2, [r3, #8]
 80048f0:	4b1b      	ldr	r3, [pc, #108]	; (8004960 <HAL_RCCEx_PeriphCLKConfig+0x1c4>)
 80048f2:	430a      	orrs	r2, r1
 80048f4:	631a      	str	r2, [r3, #48]	; 0x30
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
  }
#endif /* STM32F091xC || STM32F098xx */  

  /*------------------------------ I2C1 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 80048f6:	687b      	ldr	r3, [r7, #4]
 80048f8:	681b      	ldr	r3, [r3, #0]
 80048fa:	2220      	movs	r2, #32
 80048fc:	4013      	ands	r3, r2
 80048fe:	d009      	beq.n	8004914 <HAL_RCCEx_PeriphCLKConfig+0x178>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));
    
    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8004900:	4b17      	ldr	r3, [pc, #92]	; (8004960 <HAL_RCCEx_PeriphCLKConfig+0x1c4>)
 8004902:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004904:	2210      	movs	r2, #16
 8004906:	4393      	bics	r3, r2
 8004908:	0019      	movs	r1, r3
 800490a:	687b      	ldr	r3, [r7, #4]
 800490c:	68da      	ldr	r2, [r3, #12]
 800490e:	4b14      	ldr	r3, [pc, #80]	; (8004960 <HAL_RCCEx_PeriphCLKConfig+0x1c4>)
 8004910:	430a      	orrs	r2, r1
 8004912:	631a      	str	r2, [r3, #48]	; 0x30
  }

#if defined(STM32F042x6) || defined(STM32F048xx) || defined(STM32F072xB) || defined(STM32F078xx) || defined(STM32F070xB) || defined(STM32F070x6)
  /*------------------------------ USB Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 8004914:	687b      	ldr	r3, [r7, #4]
 8004916:	681a      	ldr	r2, [r3, #0]
 8004918:	2380      	movs	r3, #128	; 0x80
 800491a:	029b      	lsls	r3, r3, #10
 800491c:	4013      	ands	r3, r2
 800491e:	d009      	beq.n	8004934 <HAL_RCCEx_PeriphCLKConfig+0x198>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    
    /* Configure the USB clock source */
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8004920:	4b0f      	ldr	r3, [pc, #60]	; (8004960 <HAL_RCCEx_PeriphCLKConfig+0x1c4>)
 8004922:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004924:	2280      	movs	r2, #128	; 0x80
 8004926:	4393      	bics	r3, r2
 8004928:	0019      	movs	r1, r3
 800492a:	687b      	ldr	r3, [r7, #4]
 800492c:	695a      	ldr	r2, [r3, #20]
 800492e:	4b0c      	ldr	r3, [pc, #48]	; (8004960 <HAL_RCCEx_PeriphCLKConfig+0x1c4>)
 8004930:	430a      	orrs	r2, r1
 8004932:	631a      	str	r2, [r3, #48]	; 0x30
#if defined(STM32F042x6) || defined(STM32F048xx)\
 || defined(STM32F051x8) || defined(STM32F058xx)\
 || defined(STM32F071xB) || defined(STM32F072xB) || defined(STM32F078xx)\
 || defined(STM32F091xC) || defined(STM32F098xx)
  /*------------------------------ CEC clock Configuration -------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 8004934:	687b      	ldr	r3, [r7, #4]
 8004936:	681a      	ldr	r2, [r3, #0]
 8004938:	2380      	movs	r3, #128	; 0x80
 800493a:	00db      	lsls	r3, r3, #3
 800493c:	4013      	ands	r3, r2
 800493e:	d009      	beq.n	8004954 <HAL_RCCEx_PeriphCLKConfig+0x1b8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));
    
    /* Configure the CEC clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 8004940:	4b07      	ldr	r3, [pc, #28]	; (8004960 <HAL_RCCEx_PeriphCLKConfig+0x1c4>)
 8004942:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004944:	2240      	movs	r2, #64	; 0x40
 8004946:	4393      	bics	r3, r2
 8004948:	0019      	movs	r1, r3
 800494a:	687b      	ldr	r3, [r7, #4]
 800494c:	691a      	ldr	r2, [r3, #16]
 800494e:	4b04      	ldr	r3, [pc, #16]	; (8004960 <HAL_RCCEx_PeriphCLKConfig+0x1c4>)
 8004950:	430a      	orrs	r2, r1
 8004952:	631a      	str	r2, [r3, #48]	; 0x30
#endif /* STM32F042x6 || STM32F048xx ||                */
       /* STM32F051x8 || STM32F058xx ||                */
       /* STM32F071xB || STM32F072xB || STM32F078xx || */
       /* STM32F091xC || STM32F098xx */
  
  return HAL_OK;
 8004954:	2300      	movs	r3, #0
}
 8004956:	0018      	movs	r0, r3
 8004958:	46bd      	mov	sp, r7
 800495a:	b006      	add	sp, #24
 800495c:	bd80      	pop	{r7, pc}
 800495e:	46c0      	nop			; (mov r8, r8)
 8004960:	40021000 	.word	0x40021000
 8004964:	40007000 	.word	0x40007000
 8004968:	fffffcff 	.word	0xfffffcff
 800496c:	fffeffff 	.word	0xfffeffff
 8004970:	00001388 	.word	0x00001388
 8004974:	efffffff 	.word	0xefffffff

08004978 <HAL_TIM_IC_Init>:
  *         Ex: call @ref HAL_TIM_IC_DeInit() before HAL_TIM_IC_Init()
  * @param  htim TIM Input Capture handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_IC_Init(TIM_HandleTypeDef *htim)
{
 8004978:	b580      	push	{r7, lr}
 800497a:	b082      	sub	sp, #8
 800497c:	af00      	add	r7, sp, #0
 800497e:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8004980:	687b      	ldr	r3, [r7, #4]
 8004982:	2b00      	cmp	r3, #0
 8004984:	d101      	bne.n	800498a <HAL_TIM_IC_Init+0x12>
  {
    return HAL_ERROR;
 8004986:	2301      	movs	r3, #1
 8004988:	e042      	b.n	8004a10 <HAL_TIM_IC_Init+0x98>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800498a:	687b      	ldr	r3, [r7, #4]
 800498c:	223d      	movs	r2, #61	; 0x3d
 800498e:	5c9b      	ldrb	r3, [r3, r2]
 8004990:	b2db      	uxtb	r3, r3
 8004992:	2b00      	cmp	r3, #0
 8004994:	d107      	bne.n	80049a6 <HAL_TIM_IC_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8004996:	687b      	ldr	r3, [r7, #4]
 8004998:	223c      	movs	r2, #60	; 0x3c
 800499a:	2100      	movs	r1, #0
 800499c:	5499      	strb	r1, [r3, r2]
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->IC_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_IC_MspInit(htim);
 800499e:	687b      	ldr	r3, [r7, #4]
 80049a0:	0018      	movs	r0, r3
 80049a2:	f7fd fbdd 	bl	8002160 <HAL_TIM_IC_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80049a6:	687b      	ldr	r3, [r7, #4]
 80049a8:	223d      	movs	r2, #61	; 0x3d
 80049aa:	2102      	movs	r1, #2
 80049ac:	5499      	strb	r1, [r3, r2]

  /* Init the base time for the input capture */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80049ae:	687b      	ldr	r3, [r7, #4]
 80049b0:	681a      	ldr	r2, [r3, #0]
 80049b2:	687b      	ldr	r3, [r7, #4]
 80049b4:	3304      	adds	r3, #4
 80049b6:	0019      	movs	r1, r3
 80049b8:	0010      	movs	r0, r2
 80049ba:	f000 fadf 	bl	8004f7c <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80049be:	687b      	ldr	r3, [r7, #4]
 80049c0:	2246      	movs	r2, #70	; 0x46
 80049c2:	2101      	movs	r1, #1
 80049c4:	5499      	strb	r1, [r3, r2]

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80049c6:	687b      	ldr	r3, [r7, #4]
 80049c8:	223e      	movs	r2, #62	; 0x3e
 80049ca:	2101      	movs	r1, #1
 80049cc:	5499      	strb	r1, [r3, r2]
 80049ce:	687b      	ldr	r3, [r7, #4]
 80049d0:	223f      	movs	r2, #63	; 0x3f
 80049d2:	2101      	movs	r1, #1
 80049d4:	5499      	strb	r1, [r3, r2]
 80049d6:	687b      	ldr	r3, [r7, #4]
 80049d8:	2240      	movs	r2, #64	; 0x40
 80049da:	2101      	movs	r1, #1
 80049dc:	5499      	strb	r1, [r3, r2]
 80049de:	687b      	ldr	r3, [r7, #4]
 80049e0:	2241      	movs	r2, #65	; 0x41
 80049e2:	2101      	movs	r1, #1
 80049e4:	5499      	strb	r1, [r3, r2]
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80049e6:	687b      	ldr	r3, [r7, #4]
 80049e8:	2242      	movs	r2, #66	; 0x42
 80049ea:	2101      	movs	r1, #1
 80049ec:	5499      	strb	r1, [r3, r2]
 80049ee:	687b      	ldr	r3, [r7, #4]
 80049f0:	2243      	movs	r2, #67	; 0x43
 80049f2:	2101      	movs	r1, #1
 80049f4:	5499      	strb	r1, [r3, r2]
 80049f6:	687b      	ldr	r3, [r7, #4]
 80049f8:	2244      	movs	r2, #68	; 0x44
 80049fa:	2101      	movs	r1, #1
 80049fc:	5499      	strb	r1, [r3, r2]
 80049fe:	687b      	ldr	r3, [r7, #4]
 8004a00:	2245      	movs	r2, #69	; 0x45
 8004a02:	2101      	movs	r1, #1
 8004a04:	5499      	strb	r1, [r3, r2]

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8004a06:	687b      	ldr	r3, [r7, #4]
 8004a08:	223d      	movs	r2, #61	; 0x3d
 8004a0a:	2101      	movs	r1, #1
 8004a0c:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8004a0e:	2300      	movs	r3, #0
}
 8004a10:	0018      	movs	r0, r3
 8004a12:	46bd      	mov	sp, r7
 8004a14:	b002      	add	sp, #8
 8004a16:	bd80      	pop	{r7, pc}

08004a18 <HAL_TIM_IC_Start>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_IC_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8004a18:	b580      	push	{r7, lr}
 8004a1a:	b084      	sub	sp, #16
 8004a1c:	af00      	add	r7, sp, #0
 8004a1e:	6078      	str	r0, [r7, #4]
 8004a20:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;
  HAL_TIM_ChannelStateTypeDef channel_state = TIM_CHANNEL_STATE_GET(htim, Channel);
 8004a22:	683b      	ldr	r3, [r7, #0]
 8004a24:	2b00      	cmp	r3, #0
 8004a26:	d104      	bne.n	8004a32 <HAL_TIM_IC_Start+0x1a>
 8004a28:	687b      	ldr	r3, [r7, #4]
 8004a2a:	223e      	movs	r2, #62	; 0x3e
 8004a2c:	5c9b      	ldrb	r3, [r3, r2]
 8004a2e:	b2db      	uxtb	r3, r3
 8004a30:	e013      	b.n	8004a5a <HAL_TIM_IC_Start+0x42>
 8004a32:	683b      	ldr	r3, [r7, #0]
 8004a34:	2b04      	cmp	r3, #4
 8004a36:	d104      	bne.n	8004a42 <HAL_TIM_IC_Start+0x2a>
 8004a38:	687b      	ldr	r3, [r7, #4]
 8004a3a:	223f      	movs	r2, #63	; 0x3f
 8004a3c:	5c9b      	ldrb	r3, [r3, r2]
 8004a3e:	b2db      	uxtb	r3, r3
 8004a40:	e00b      	b.n	8004a5a <HAL_TIM_IC_Start+0x42>
 8004a42:	683b      	ldr	r3, [r7, #0]
 8004a44:	2b08      	cmp	r3, #8
 8004a46:	d104      	bne.n	8004a52 <HAL_TIM_IC_Start+0x3a>
 8004a48:	687b      	ldr	r3, [r7, #4]
 8004a4a:	2240      	movs	r2, #64	; 0x40
 8004a4c:	5c9b      	ldrb	r3, [r3, r2]
 8004a4e:	b2db      	uxtb	r3, r3
 8004a50:	e003      	b.n	8004a5a <HAL_TIM_IC_Start+0x42>
 8004a52:	687b      	ldr	r3, [r7, #4]
 8004a54:	2241      	movs	r2, #65	; 0x41
 8004a56:	5c9b      	ldrb	r3, [r3, r2]
 8004a58:	b2db      	uxtb	r3, r3
 8004a5a:	220f      	movs	r2, #15
 8004a5c:	18ba      	adds	r2, r7, r2
 8004a5e:	7013      	strb	r3, [r2, #0]
  HAL_TIM_ChannelStateTypeDef complementary_channel_state = TIM_CHANNEL_N_STATE_GET(htim, Channel);
 8004a60:	683b      	ldr	r3, [r7, #0]
 8004a62:	2b00      	cmp	r3, #0
 8004a64:	d104      	bne.n	8004a70 <HAL_TIM_IC_Start+0x58>
 8004a66:	687b      	ldr	r3, [r7, #4]
 8004a68:	2242      	movs	r2, #66	; 0x42
 8004a6a:	5c9b      	ldrb	r3, [r3, r2]
 8004a6c:	b2db      	uxtb	r3, r3
 8004a6e:	e013      	b.n	8004a98 <HAL_TIM_IC_Start+0x80>
 8004a70:	683b      	ldr	r3, [r7, #0]
 8004a72:	2b04      	cmp	r3, #4
 8004a74:	d104      	bne.n	8004a80 <HAL_TIM_IC_Start+0x68>
 8004a76:	687b      	ldr	r3, [r7, #4]
 8004a78:	2243      	movs	r2, #67	; 0x43
 8004a7a:	5c9b      	ldrb	r3, [r3, r2]
 8004a7c:	b2db      	uxtb	r3, r3
 8004a7e:	e00b      	b.n	8004a98 <HAL_TIM_IC_Start+0x80>
 8004a80:	683b      	ldr	r3, [r7, #0]
 8004a82:	2b08      	cmp	r3, #8
 8004a84:	d104      	bne.n	8004a90 <HAL_TIM_IC_Start+0x78>
 8004a86:	687b      	ldr	r3, [r7, #4]
 8004a88:	2244      	movs	r2, #68	; 0x44
 8004a8a:	5c9b      	ldrb	r3, [r3, r2]
 8004a8c:	b2db      	uxtb	r3, r3
 8004a8e:	e003      	b.n	8004a98 <HAL_TIM_IC_Start+0x80>
 8004a90:	687b      	ldr	r3, [r7, #4]
 8004a92:	2245      	movs	r2, #69	; 0x45
 8004a94:	5c9b      	ldrb	r3, [r3, r2]
 8004a96:	b2db      	uxtb	r3, r3
 8004a98:	210e      	movs	r1, #14
 8004a9a:	187a      	adds	r2, r7, r1
 8004a9c:	7013      	strb	r3, [r2, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if ((channel_state != HAL_TIM_CHANNEL_STATE_READY)
 8004a9e:	230f      	movs	r3, #15
 8004aa0:	18fb      	adds	r3, r7, r3
 8004aa2:	781b      	ldrb	r3, [r3, #0]
 8004aa4:	2b01      	cmp	r3, #1
 8004aa6:	d103      	bne.n	8004ab0 <HAL_TIM_IC_Start+0x98>
      || (complementary_channel_state != HAL_TIM_CHANNEL_STATE_READY))
 8004aa8:	187b      	adds	r3, r7, r1
 8004aaa:	781b      	ldrb	r3, [r3, #0]
 8004aac:	2b01      	cmp	r3, #1
 8004aae:	d001      	beq.n	8004ab4 <HAL_TIM_IC_Start+0x9c>
  {
    return HAL_ERROR;
 8004ab0:	2301      	movs	r3, #1
 8004ab2:	e069      	b.n	8004b88 <HAL_TIM_IC_Start+0x170>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8004ab4:	683b      	ldr	r3, [r7, #0]
 8004ab6:	2b00      	cmp	r3, #0
 8004ab8:	d104      	bne.n	8004ac4 <HAL_TIM_IC_Start+0xac>
 8004aba:	687b      	ldr	r3, [r7, #4]
 8004abc:	223e      	movs	r2, #62	; 0x3e
 8004abe:	2102      	movs	r1, #2
 8004ac0:	5499      	strb	r1, [r3, r2]
 8004ac2:	e013      	b.n	8004aec <HAL_TIM_IC_Start+0xd4>
 8004ac4:	683b      	ldr	r3, [r7, #0]
 8004ac6:	2b04      	cmp	r3, #4
 8004ac8:	d104      	bne.n	8004ad4 <HAL_TIM_IC_Start+0xbc>
 8004aca:	687b      	ldr	r3, [r7, #4]
 8004acc:	223f      	movs	r2, #63	; 0x3f
 8004ace:	2102      	movs	r1, #2
 8004ad0:	5499      	strb	r1, [r3, r2]
 8004ad2:	e00b      	b.n	8004aec <HAL_TIM_IC_Start+0xd4>
 8004ad4:	683b      	ldr	r3, [r7, #0]
 8004ad6:	2b08      	cmp	r3, #8
 8004ad8:	d104      	bne.n	8004ae4 <HAL_TIM_IC_Start+0xcc>
 8004ada:	687b      	ldr	r3, [r7, #4]
 8004adc:	2240      	movs	r2, #64	; 0x40
 8004ade:	2102      	movs	r1, #2
 8004ae0:	5499      	strb	r1, [r3, r2]
 8004ae2:	e003      	b.n	8004aec <HAL_TIM_IC_Start+0xd4>
 8004ae4:	687b      	ldr	r3, [r7, #4]
 8004ae6:	2241      	movs	r2, #65	; 0x41
 8004ae8:	2102      	movs	r1, #2
 8004aea:	5499      	strb	r1, [r3, r2]
  TIM_CHANNEL_N_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8004aec:	683b      	ldr	r3, [r7, #0]
 8004aee:	2b00      	cmp	r3, #0
 8004af0:	d104      	bne.n	8004afc <HAL_TIM_IC_Start+0xe4>
 8004af2:	687b      	ldr	r3, [r7, #4]
 8004af4:	2242      	movs	r2, #66	; 0x42
 8004af6:	2102      	movs	r1, #2
 8004af8:	5499      	strb	r1, [r3, r2]
 8004afa:	e013      	b.n	8004b24 <HAL_TIM_IC_Start+0x10c>
 8004afc:	683b      	ldr	r3, [r7, #0]
 8004afe:	2b04      	cmp	r3, #4
 8004b00:	d104      	bne.n	8004b0c <HAL_TIM_IC_Start+0xf4>
 8004b02:	687b      	ldr	r3, [r7, #4]
 8004b04:	2243      	movs	r2, #67	; 0x43
 8004b06:	2102      	movs	r1, #2
 8004b08:	5499      	strb	r1, [r3, r2]
 8004b0a:	e00b      	b.n	8004b24 <HAL_TIM_IC_Start+0x10c>
 8004b0c:	683b      	ldr	r3, [r7, #0]
 8004b0e:	2b08      	cmp	r3, #8
 8004b10:	d104      	bne.n	8004b1c <HAL_TIM_IC_Start+0x104>
 8004b12:	687b      	ldr	r3, [r7, #4]
 8004b14:	2244      	movs	r2, #68	; 0x44
 8004b16:	2102      	movs	r1, #2
 8004b18:	5499      	strb	r1, [r3, r2]
 8004b1a:	e003      	b.n	8004b24 <HAL_TIM_IC_Start+0x10c>
 8004b1c:	687b      	ldr	r3, [r7, #4]
 8004b1e:	2245      	movs	r2, #69	; 0x45
 8004b20:	2102      	movs	r1, #2
 8004b22:	5499      	strb	r1, [r3, r2]

  /* Enable the Input Capture channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8004b24:	687b      	ldr	r3, [r7, #4]
 8004b26:	681b      	ldr	r3, [r3, #0]
 8004b28:	6839      	ldr	r1, [r7, #0]
 8004b2a:	2201      	movs	r2, #1
 8004b2c:	0018      	movs	r0, r3
 8004b2e:	f000 fccb 	bl	80054c8 <TIM_CCxChannelCmd>

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8004b32:	687b      	ldr	r3, [r7, #4]
 8004b34:	681b      	ldr	r3, [r3, #0]
 8004b36:	4a16      	ldr	r2, [pc, #88]	; (8004b90 <HAL_TIM_IC_Start+0x178>)
 8004b38:	4293      	cmp	r3, r2
 8004b3a:	d00a      	beq.n	8004b52 <HAL_TIM_IC_Start+0x13a>
 8004b3c:	687b      	ldr	r3, [r7, #4]
 8004b3e:	681a      	ldr	r2, [r3, #0]
 8004b40:	2380      	movs	r3, #128	; 0x80
 8004b42:	05db      	lsls	r3, r3, #23
 8004b44:	429a      	cmp	r2, r3
 8004b46:	d004      	beq.n	8004b52 <HAL_TIM_IC_Start+0x13a>
 8004b48:	687b      	ldr	r3, [r7, #4]
 8004b4a:	681b      	ldr	r3, [r3, #0]
 8004b4c:	4a11      	ldr	r2, [pc, #68]	; (8004b94 <HAL_TIM_IC_Start+0x17c>)
 8004b4e:	4293      	cmp	r3, r2
 8004b50:	d111      	bne.n	8004b76 <HAL_TIM_IC_Start+0x15e>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8004b52:	687b      	ldr	r3, [r7, #4]
 8004b54:	681b      	ldr	r3, [r3, #0]
 8004b56:	689b      	ldr	r3, [r3, #8]
 8004b58:	2207      	movs	r2, #7
 8004b5a:	4013      	ands	r3, r2
 8004b5c:	60bb      	str	r3, [r7, #8]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004b5e:	68bb      	ldr	r3, [r7, #8]
 8004b60:	2b06      	cmp	r3, #6
 8004b62:	d010      	beq.n	8004b86 <HAL_TIM_IC_Start+0x16e>
    {
      __HAL_TIM_ENABLE(htim);
 8004b64:	687b      	ldr	r3, [r7, #4]
 8004b66:	681b      	ldr	r3, [r3, #0]
 8004b68:	681a      	ldr	r2, [r3, #0]
 8004b6a:	687b      	ldr	r3, [r7, #4]
 8004b6c:	681b      	ldr	r3, [r3, #0]
 8004b6e:	2101      	movs	r1, #1
 8004b70:	430a      	orrs	r2, r1
 8004b72:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004b74:	e007      	b.n	8004b86 <HAL_TIM_IC_Start+0x16e>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8004b76:	687b      	ldr	r3, [r7, #4]
 8004b78:	681b      	ldr	r3, [r3, #0]
 8004b7a:	681a      	ldr	r2, [r3, #0]
 8004b7c:	687b      	ldr	r3, [r7, #4]
 8004b7e:	681b      	ldr	r3, [r3, #0]
 8004b80:	2101      	movs	r1, #1
 8004b82:	430a      	orrs	r2, r1
 8004b84:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8004b86:	2300      	movs	r3, #0
}
 8004b88:	0018      	movs	r0, r3
 8004b8a:	46bd      	mov	sp, r7
 8004b8c:	b004      	add	sp, #16
 8004b8e:	bd80      	pop	{r7, pc}
 8004b90:	40012c00 	.word	0x40012c00
 8004b94:	40000400 	.word	0x40000400

08004b98 <HAL_TIM_IC_Start_IT>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_IC_Start_IT(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8004b98:	b580      	push	{r7, lr}
 8004b9a:	b084      	sub	sp, #16
 8004b9c:	af00      	add	r7, sp, #0
 8004b9e:	6078      	str	r0, [r7, #4]
 8004ba0:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8004ba2:	230f      	movs	r3, #15
 8004ba4:	18fb      	adds	r3, r7, r3
 8004ba6:	2200      	movs	r2, #0
 8004ba8:	701a      	strb	r2, [r3, #0]
  uint32_t tmpsmcr;

  HAL_TIM_ChannelStateTypeDef channel_state = TIM_CHANNEL_STATE_GET(htim, Channel);
 8004baa:	683b      	ldr	r3, [r7, #0]
 8004bac:	2b00      	cmp	r3, #0
 8004bae:	d104      	bne.n	8004bba <HAL_TIM_IC_Start_IT+0x22>
 8004bb0:	687b      	ldr	r3, [r7, #4]
 8004bb2:	223e      	movs	r2, #62	; 0x3e
 8004bb4:	5c9b      	ldrb	r3, [r3, r2]
 8004bb6:	b2db      	uxtb	r3, r3
 8004bb8:	e013      	b.n	8004be2 <HAL_TIM_IC_Start_IT+0x4a>
 8004bba:	683b      	ldr	r3, [r7, #0]
 8004bbc:	2b04      	cmp	r3, #4
 8004bbe:	d104      	bne.n	8004bca <HAL_TIM_IC_Start_IT+0x32>
 8004bc0:	687b      	ldr	r3, [r7, #4]
 8004bc2:	223f      	movs	r2, #63	; 0x3f
 8004bc4:	5c9b      	ldrb	r3, [r3, r2]
 8004bc6:	b2db      	uxtb	r3, r3
 8004bc8:	e00b      	b.n	8004be2 <HAL_TIM_IC_Start_IT+0x4a>
 8004bca:	683b      	ldr	r3, [r7, #0]
 8004bcc:	2b08      	cmp	r3, #8
 8004bce:	d104      	bne.n	8004bda <HAL_TIM_IC_Start_IT+0x42>
 8004bd0:	687b      	ldr	r3, [r7, #4]
 8004bd2:	2240      	movs	r2, #64	; 0x40
 8004bd4:	5c9b      	ldrb	r3, [r3, r2]
 8004bd6:	b2db      	uxtb	r3, r3
 8004bd8:	e003      	b.n	8004be2 <HAL_TIM_IC_Start_IT+0x4a>
 8004bda:	687b      	ldr	r3, [r7, #4]
 8004bdc:	2241      	movs	r2, #65	; 0x41
 8004bde:	5c9b      	ldrb	r3, [r3, r2]
 8004be0:	b2db      	uxtb	r3, r3
 8004be2:	220e      	movs	r2, #14
 8004be4:	18ba      	adds	r2, r7, r2
 8004be6:	7013      	strb	r3, [r2, #0]
  HAL_TIM_ChannelStateTypeDef complementary_channel_state = TIM_CHANNEL_N_STATE_GET(htim, Channel);
 8004be8:	683b      	ldr	r3, [r7, #0]
 8004bea:	2b00      	cmp	r3, #0
 8004bec:	d104      	bne.n	8004bf8 <HAL_TIM_IC_Start_IT+0x60>
 8004bee:	687b      	ldr	r3, [r7, #4]
 8004bf0:	2242      	movs	r2, #66	; 0x42
 8004bf2:	5c9b      	ldrb	r3, [r3, r2]
 8004bf4:	b2db      	uxtb	r3, r3
 8004bf6:	e013      	b.n	8004c20 <HAL_TIM_IC_Start_IT+0x88>
 8004bf8:	683b      	ldr	r3, [r7, #0]
 8004bfa:	2b04      	cmp	r3, #4
 8004bfc:	d104      	bne.n	8004c08 <HAL_TIM_IC_Start_IT+0x70>
 8004bfe:	687b      	ldr	r3, [r7, #4]
 8004c00:	2243      	movs	r2, #67	; 0x43
 8004c02:	5c9b      	ldrb	r3, [r3, r2]
 8004c04:	b2db      	uxtb	r3, r3
 8004c06:	e00b      	b.n	8004c20 <HAL_TIM_IC_Start_IT+0x88>
 8004c08:	683b      	ldr	r3, [r7, #0]
 8004c0a:	2b08      	cmp	r3, #8
 8004c0c:	d104      	bne.n	8004c18 <HAL_TIM_IC_Start_IT+0x80>
 8004c0e:	687b      	ldr	r3, [r7, #4]
 8004c10:	2244      	movs	r2, #68	; 0x44
 8004c12:	5c9b      	ldrb	r3, [r3, r2]
 8004c14:	b2db      	uxtb	r3, r3
 8004c16:	e003      	b.n	8004c20 <HAL_TIM_IC_Start_IT+0x88>
 8004c18:	687b      	ldr	r3, [r7, #4]
 8004c1a:	2245      	movs	r2, #69	; 0x45
 8004c1c:	5c9b      	ldrb	r3, [r3, r2]
 8004c1e:	b2db      	uxtb	r3, r3
 8004c20:	210d      	movs	r1, #13
 8004c22:	187a      	adds	r2, r7, r1
 8004c24:	7013      	strb	r3, [r2, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if ((channel_state != HAL_TIM_CHANNEL_STATE_READY)
 8004c26:	230e      	movs	r3, #14
 8004c28:	18fb      	adds	r3, r7, r3
 8004c2a:	781b      	ldrb	r3, [r3, #0]
 8004c2c:	2b01      	cmp	r3, #1
 8004c2e:	d103      	bne.n	8004c38 <HAL_TIM_IC_Start_IT+0xa0>
      || (complementary_channel_state != HAL_TIM_CHANNEL_STATE_READY))
 8004c30:	187b      	adds	r3, r7, r1
 8004c32:	781b      	ldrb	r3, [r3, #0]
 8004c34:	2b01      	cmp	r3, #1
 8004c36:	d001      	beq.n	8004c3c <HAL_TIM_IC_Start_IT+0xa4>
  {
    return HAL_ERROR;
 8004c38:	2301      	movs	r3, #1
 8004c3a:	e0ac      	b.n	8004d96 <HAL_TIM_IC_Start_IT+0x1fe>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8004c3c:	683b      	ldr	r3, [r7, #0]
 8004c3e:	2b00      	cmp	r3, #0
 8004c40:	d104      	bne.n	8004c4c <HAL_TIM_IC_Start_IT+0xb4>
 8004c42:	687b      	ldr	r3, [r7, #4]
 8004c44:	223e      	movs	r2, #62	; 0x3e
 8004c46:	2102      	movs	r1, #2
 8004c48:	5499      	strb	r1, [r3, r2]
 8004c4a:	e013      	b.n	8004c74 <HAL_TIM_IC_Start_IT+0xdc>
 8004c4c:	683b      	ldr	r3, [r7, #0]
 8004c4e:	2b04      	cmp	r3, #4
 8004c50:	d104      	bne.n	8004c5c <HAL_TIM_IC_Start_IT+0xc4>
 8004c52:	687b      	ldr	r3, [r7, #4]
 8004c54:	223f      	movs	r2, #63	; 0x3f
 8004c56:	2102      	movs	r1, #2
 8004c58:	5499      	strb	r1, [r3, r2]
 8004c5a:	e00b      	b.n	8004c74 <HAL_TIM_IC_Start_IT+0xdc>
 8004c5c:	683b      	ldr	r3, [r7, #0]
 8004c5e:	2b08      	cmp	r3, #8
 8004c60:	d104      	bne.n	8004c6c <HAL_TIM_IC_Start_IT+0xd4>
 8004c62:	687b      	ldr	r3, [r7, #4]
 8004c64:	2240      	movs	r2, #64	; 0x40
 8004c66:	2102      	movs	r1, #2
 8004c68:	5499      	strb	r1, [r3, r2]
 8004c6a:	e003      	b.n	8004c74 <HAL_TIM_IC_Start_IT+0xdc>
 8004c6c:	687b      	ldr	r3, [r7, #4]
 8004c6e:	2241      	movs	r2, #65	; 0x41
 8004c70:	2102      	movs	r1, #2
 8004c72:	5499      	strb	r1, [r3, r2]
  TIM_CHANNEL_N_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8004c74:	683b      	ldr	r3, [r7, #0]
 8004c76:	2b00      	cmp	r3, #0
 8004c78:	d104      	bne.n	8004c84 <HAL_TIM_IC_Start_IT+0xec>
 8004c7a:	687b      	ldr	r3, [r7, #4]
 8004c7c:	2242      	movs	r2, #66	; 0x42
 8004c7e:	2102      	movs	r1, #2
 8004c80:	5499      	strb	r1, [r3, r2]
 8004c82:	e013      	b.n	8004cac <HAL_TIM_IC_Start_IT+0x114>
 8004c84:	683b      	ldr	r3, [r7, #0]
 8004c86:	2b04      	cmp	r3, #4
 8004c88:	d104      	bne.n	8004c94 <HAL_TIM_IC_Start_IT+0xfc>
 8004c8a:	687b      	ldr	r3, [r7, #4]
 8004c8c:	2243      	movs	r2, #67	; 0x43
 8004c8e:	2102      	movs	r1, #2
 8004c90:	5499      	strb	r1, [r3, r2]
 8004c92:	e00b      	b.n	8004cac <HAL_TIM_IC_Start_IT+0x114>
 8004c94:	683b      	ldr	r3, [r7, #0]
 8004c96:	2b08      	cmp	r3, #8
 8004c98:	d104      	bne.n	8004ca4 <HAL_TIM_IC_Start_IT+0x10c>
 8004c9a:	687b      	ldr	r3, [r7, #4]
 8004c9c:	2244      	movs	r2, #68	; 0x44
 8004c9e:	2102      	movs	r1, #2
 8004ca0:	5499      	strb	r1, [r3, r2]
 8004ca2:	e003      	b.n	8004cac <HAL_TIM_IC_Start_IT+0x114>
 8004ca4:	687b      	ldr	r3, [r7, #4]
 8004ca6:	2245      	movs	r2, #69	; 0x45
 8004ca8:	2102      	movs	r1, #2
 8004caa:	5499      	strb	r1, [r3, r2]

  switch (Channel)
 8004cac:	683b      	ldr	r3, [r7, #0]
 8004cae:	2b0c      	cmp	r3, #12
 8004cb0:	d02a      	beq.n	8004d08 <HAL_TIM_IC_Start_IT+0x170>
 8004cb2:	683b      	ldr	r3, [r7, #0]
 8004cb4:	2b0c      	cmp	r3, #12
 8004cb6:	d830      	bhi.n	8004d1a <HAL_TIM_IC_Start_IT+0x182>
 8004cb8:	683b      	ldr	r3, [r7, #0]
 8004cba:	2b08      	cmp	r3, #8
 8004cbc:	d01b      	beq.n	8004cf6 <HAL_TIM_IC_Start_IT+0x15e>
 8004cbe:	683b      	ldr	r3, [r7, #0]
 8004cc0:	2b08      	cmp	r3, #8
 8004cc2:	d82a      	bhi.n	8004d1a <HAL_TIM_IC_Start_IT+0x182>
 8004cc4:	683b      	ldr	r3, [r7, #0]
 8004cc6:	2b00      	cmp	r3, #0
 8004cc8:	d003      	beq.n	8004cd2 <HAL_TIM_IC_Start_IT+0x13a>
 8004cca:	683b      	ldr	r3, [r7, #0]
 8004ccc:	2b04      	cmp	r3, #4
 8004cce:	d009      	beq.n	8004ce4 <HAL_TIM_IC_Start_IT+0x14c>
 8004cd0:	e023      	b.n	8004d1a <HAL_TIM_IC_Start_IT+0x182>
  {
    case TIM_CHANNEL_1:
    {
      /* Enable the TIM Capture/Compare 1 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC1);
 8004cd2:	687b      	ldr	r3, [r7, #4]
 8004cd4:	681b      	ldr	r3, [r3, #0]
 8004cd6:	68da      	ldr	r2, [r3, #12]
 8004cd8:	687b      	ldr	r3, [r7, #4]
 8004cda:	681b      	ldr	r3, [r3, #0]
 8004cdc:	2102      	movs	r1, #2
 8004cde:	430a      	orrs	r2, r1
 8004ce0:	60da      	str	r2, [r3, #12]
      break;
 8004ce2:	e01f      	b.n	8004d24 <HAL_TIM_IC_Start_IT+0x18c>
    }

    case TIM_CHANNEL_2:
    {
      /* Enable the TIM Capture/Compare 2 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC2);
 8004ce4:	687b      	ldr	r3, [r7, #4]
 8004ce6:	681b      	ldr	r3, [r3, #0]
 8004ce8:	68da      	ldr	r2, [r3, #12]
 8004cea:	687b      	ldr	r3, [r7, #4]
 8004cec:	681b      	ldr	r3, [r3, #0]
 8004cee:	2104      	movs	r1, #4
 8004cf0:	430a      	orrs	r2, r1
 8004cf2:	60da      	str	r2, [r3, #12]
      break;
 8004cf4:	e016      	b.n	8004d24 <HAL_TIM_IC_Start_IT+0x18c>
    }

    case TIM_CHANNEL_3:
    {
      /* Enable the TIM Capture/Compare 3 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC3);
 8004cf6:	687b      	ldr	r3, [r7, #4]
 8004cf8:	681b      	ldr	r3, [r3, #0]
 8004cfa:	68da      	ldr	r2, [r3, #12]
 8004cfc:	687b      	ldr	r3, [r7, #4]
 8004cfe:	681b      	ldr	r3, [r3, #0]
 8004d00:	2108      	movs	r1, #8
 8004d02:	430a      	orrs	r2, r1
 8004d04:	60da      	str	r2, [r3, #12]
      break;
 8004d06:	e00d      	b.n	8004d24 <HAL_TIM_IC_Start_IT+0x18c>
    }

    case TIM_CHANNEL_4:
    {
      /* Enable the TIM Capture/Compare 4 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC4);
 8004d08:	687b      	ldr	r3, [r7, #4]
 8004d0a:	681b      	ldr	r3, [r3, #0]
 8004d0c:	68da      	ldr	r2, [r3, #12]
 8004d0e:	687b      	ldr	r3, [r7, #4]
 8004d10:	681b      	ldr	r3, [r3, #0]
 8004d12:	2110      	movs	r1, #16
 8004d14:	430a      	orrs	r2, r1
 8004d16:	60da      	str	r2, [r3, #12]
      break;
 8004d18:	e004      	b.n	8004d24 <HAL_TIM_IC_Start_IT+0x18c>
    }

    default:
      status = HAL_ERROR;
 8004d1a:	230f      	movs	r3, #15
 8004d1c:	18fb      	adds	r3, r7, r3
 8004d1e:	2201      	movs	r2, #1
 8004d20:	701a      	strb	r2, [r3, #0]
      break;
 8004d22:	46c0      	nop			; (mov r8, r8)
  }

  if (status == HAL_OK)
 8004d24:	230f      	movs	r3, #15
 8004d26:	18fb      	adds	r3, r7, r3
 8004d28:	781b      	ldrb	r3, [r3, #0]
 8004d2a:	2b00      	cmp	r3, #0
 8004d2c:	d130      	bne.n	8004d90 <HAL_TIM_IC_Start_IT+0x1f8>
  {
    /* Enable the Input Capture channel */
    TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8004d2e:	687b      	ldr	r3, [r7, #4]
 8004d30:	681b      	ldr	r3, [r3, #0]
 8004d32:	6839      	ldr	r1, [r7, #0]
 8004d34:	2201      	movs	r2, #1
 8004d36:	0018      	movs	r0, r3
 8004d38:	f000 fbc6 	bl	80054c8 <TIM_CCxChannelCmd>

    /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
    if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8004d3c:	687b      	ldr	r3, [r7, #4]
 8004d3e:	681b      	ldr	r3, [r3, #0]
 8004d40:	4a17      	ldr	r2, [pc, #92]	; (8004da0 <HAL_TIM_IC_Start_IT+0x208>)
 8004d42:	4293      	cmp	r3, r2
 8004d44:	d00a      	beq.n	8004d5c <HAL_TIM_IC_Start_IT+0x1c4>
 8004d46:	687b      	ldr	r3, [r7, #4]
 8004d48:	681a      	ldr	r2, [r3, #0]
 8004d4a:	2380      	movs	r3, #128	; 0x80
 8004d4c:	05db      	lsls	r3, r3, #23
 8004d4e:	429a      	cmp	r2, r3
 8004d50:	d004      	beq.n	8004d5c <HAL_TIM_IC_Start_IT+0x1c4>
 8004d52:	687b      	ldr	r3, [r7, #4]
 8004d54:	681b      	ldr	r3, [r3, #0]
 8004d56:	4a13      	ldr	r2, [pc, #76]	; (8004da4 <HAL_TIM_IC_Start_IT+0x20c>)
 8004d58:	4293      	cmp	r3, r2
 8004d5a:	d111      	bne.n	8004d80 <HAL_TIM_IC_Start_IT+0x1e8>
    {
      tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8004d5c:	687b      	ldr	r3, [r7, #4]
 8004d5e:	681b      	ldr	r3, [r3, #0]
 8004d60:	689b      	ldr	r3, [r3, #8]
 8004d62:	2207      	movs	r2, #7
 8004d64:	4013      	ands	r3, r2
 8004d66:	60bb      	str	r3, [r7, #8]
      if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004d68:	68bb      	ldr	r3, [r7, #8]
 8004d6a:	2b06      	cmp	r3, #6
 8004d6c:	d010      	beq.n	8004d90 <HAL_TIM_IC_Start_IT+0x1f8>
      {
        __HAL_TIM_ENABLE(htim);
 8004d6e:	687b      	ldr	r3, [r7, #4]
 8004d70:	681b      	ldr	r3, [r3, #0]
 8004d72:	681a      	ldr	r2, [r3, #0]
 8004d74:	687b      	ldr	r3, [r7, #4]
 8004d76:	681b      	ldr	r3, [r3, #0]
 8004d78:	2101      	movs	r1, #1
 8004d7a:	430a      	orrs	r2, r1
 8004d7c:	601a      	str	r2, [r3, #0]
      if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004d7e:	e007      	b.n	8004d90 <HAL_TIM_IC_Start_IT+0x1f8>
      }
    }
    else
    {
      __HAL_TIM_ENABLE(htim);
 8004d80:	687b      	ldr	r3, [r7, #4]
 8004d82:	681b      	ldr	r3, [r3, #0]
 8004d84:	681a      	ldr	r2, [r3, #0]
 8004d86:	687b      	ldr	r3, [r7, #4]
 8004d88:	681b      	ldr	r3, [r3, #0]
 8004d8a:	2101      	movs	r1, #1
 8004d8c:	430a      	orrs	r2, r1
 8004d8e:	601a      	str	r2, [r3, #0]
    }
  }

  /* Return function status */
  return status;
 8004d90:	230f      	movs	r3, #15
 8004d92:	18fb      	adds	r3, r7, r3
 8004d94:	781b      	ldrb	r3, [r3, #0]
}
 8004d96:	0018      	movs	r0, r3
 8004d98:	46bd      	mov	sp, r7
 8004d9a:	b004      	add	sp, #16
 8004d9c:	bd80      	pop	{r7, pc}
 8004d9e:	46c0      	nop			; (mov r8, r8)
 8004da0:	40012c00 	.word	0x40012c00
 8004da4:	40000400 	.word	0x40000400

08004da8 <HAL_TIM_IC_ConfigChannel>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_IC_ConfigChannel(TIM_HandleTypeDef *htim, const TIM_IC_InitTypeDef *sConfig, uint32_t Channel)
{
 8004da8:	b580      	push	{r7, lr}
 8004daa:	b086      	sub	sp, #24
 8004dac:	af00      	add	r7, sp, #0
 8004dae:	60f8      	str	r0, [r7, #12]
 8004db0:	60b9      	str	r1, [r7, #8]
 8004db2:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8004db4:	2317      	movs	r3, #23
 8004db6:	18fb      	adds	r3, r7, r3
 8004db8:	2200      	movs	r2, #0
 8004dba:	701a      	strb	r2, [r3, #0]
  assert_param(IS_TIM_IC_SELECTION(sConfig->ICSelection));
  assert_param(IS_TIM_IC_PRESCALER(sConfig->ICPrescaler));
  assert_param(IS_TIM_IC_FILTER(sConfig->ICFilter));

  /* Process Locked */
  __HAL_LOCK(htim);
 8004dbc:	68fb      	ldr	r3, [r7, #12]
 8004dbe:	223c      	movs	r2, #60	; 0x3c
 8004dc0:	5c9b      	ldrb	r3, [r3, r2]
 8004dc2:	2b01      	cmp	r3, #1
 8004dc4:	d101      	bne.n	8004dca <HAL_TIM_IC_ConfigChannel+0x22>
 8004dc6:	2302      	movs	r3, #2
 8004dc8:	e08c      	b.n	8004ee4 <HAL_TIM_IC_ConfigChannel+0x13c>
 8004dca:	68fb      	ldr	r3, [r7, #12]
 8004dcc:	223c      	movs	r2, #60	; 0x3c
 8004dce:	2101      	movs	r1, #1
 8004dd0:	5499      	strb	r1, [r3, r2]

  if (Channel == TIM_CHANNEL_1)
 8004dd2:	687b      	ldr	r3, [r7, #4]
 8004dd4:	2b00      	cmp	r3, #0
 8004dd6:	d11b      	bne.n	8004e10 <HAL_TIM_IC_ConfigChannel+0x68>
  {
    /* TI1 Configuration */
    TIM_TI1_SetConfig(htim->Instance,
 8004dd8:	68fb      	ldr	r3, [r7, #12]
 8004dda:	6818      	ldr	r0, [r3, #0]
 8004ddc:	68bb      	ldr	r3, [r7, #8]
 8004dde:	6819      	ldr	r1, [r3, #0]
 8004de0:	68bb      	ldr	r3, [r7, #8]
 8004de2:	685a      	ldr	r2, [r3, #4]
 8004de4:	68bb      	ldr	r3, [r7, #8]
 8004de6:	68db      	ldr	r3, [r3, #12]
 8004de8:	f000 f9d0 	bl	800518c <TIM_TI1_SetConfig>
                      sConfig->ICPolarity,
                      sConfig->ICSelection,
                      sConfig->ICFilter);

    /* Reset the IC1PSC Bits */
    htim->Instance->CCMR1 &= ~TIM_CCMR1_IC1PSC;
 8004dec:	68fb      	ldr	r3, [r7, #12]
 8004dee:	681b      	ldr	r3, [r3, #0]
 8004df0:	699a      	ldr	r2, [r3, #24]
 8004df2:	68fb      	ldr	r3, [r7, #12]
 8004df4:	681b      	ldr	r3, [r3, #0]
 8004df6:	210c      	movs	r1, #12
 8004df8:	438a      	bics	r2, r1
 8004dfa:	619a      	str	r2, [r3, #24]

    /* Set the IC1PSC value */
    htim->Instance->CCMR1 |= sConfig->ICPrescaler;
 8004dfc:	68fb      	ldr	r3, [r7, #12]
 8004dfe:	681b      	ldr	r3, [r3, #0]
 8004e00:	6999      	ldr	r1, [r3, #24]
 8004e02:	68bb      	ldr	r3, [r7, #8]
 8004e04:	689a      	ldr	r2, [r3, #8]
 8004e06:	68fb      	ldr	r3, [r7, #12]
 8004e08:	681b      	ldr	r3, [r3, #0]
 8004e0a:	430a      	orrs	r2, r1
 8004e0c:	619a      	str	r2, [r3, #24]
 8004e0e:	e062      	b.n	8004ed6 <HAL_TIM_IC_ConfigChannel+0x12e>
  }
  else if (Channel == TIM_CHANNEL_2)
 8004e10:	687b      	ldr	r3, [r7, #4]
 8004e12:	2b04      	cmp	r3, #4
 8004e14:	d11c      	bne.n	8004e50 <HAL_TIM_IC_ConfigChannel+0xa8>
  {
    /* TI2 Configuration */
    assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

    TIM_TI2_SetConfig(htim->Instance,
 8004e16:	68fb      	ldr	r3, [r7, #12]
 8004e18:	6818      	ldr	r0, [r3, #0]
 8004e1a:	68bb      	ldr	r3, [r7, #8]
 8004e1c:	6819      	ldr	r1, [r3, #0]
 8004e1e:	68bb      	ldr	r3, [r7, #8]
 8004e20:	685a      	ldr	r2, [r3, #4]
 8004e22:	68bb      	ldr	r3, [r7, #8]
 8004e24:	68db      	ldr	r3, [r3, #12]
 8004e26:	f000 fa35 	bl	8005294 <TIM_TI2_SetConfig>
                      sConfig->ICPolarity,
                      sConfig->ICSelection,
                      sConfig->ICFilter);

    /* Reset the IC2PSC Bits */
    htim->Instance->CCMR1 &= ~TIM_CCMR1_IC2PSC;
 8004e2a:	68fb      	ldr	r3, [r7, #12]
 8004e2c:	681b      	ldr	r3, [r3, #0]
 8004e2e:	699a      	ldr	r2, [r3, #24]
 8004e30:	68fb      	ldr	r3, [r7, #12]
 8004e32:	681b      	ldr	r3, [r3, #0]
 8004e34:	492d      	ldr	r1, [pc, #180]	; (8004eec <HAL_TIM_IC_ConfigChannel+0x144>)
 8004e36:	400a      	ands	r2, r1
 8004e38:	619a      	str	r2, [r3, #24]

    /* Set the IC2PSC value */
    htim->Instance->CCMR1 |= (sConfig->ICPrescaler << 8U);
 8004e3a:	68fb      	ldr	r3, [r7, #12]
 8004e3c:	681b      	ldr	r3, [r3, #0]
 8004e3e:	6999      	ldr	r1, [r3, #24]
 8004e40:	68bb      	ldr	r3, [r7, #8]
 8004e42:	689b      	ldr	r3, [r3, #8]
 8004e44:	021a      	lsls	r2, r3, #8
 8004e46:	68fb      	ldr	r3, [r7, #12]
 8004e48:	681b      	ldr	r3, [r3, #0]
 8004e4a:	430a      	orrs	r2, r1
 8004e4c:	619a      	str	r2, [r3, #24]
 8004e4e:	e042      	b.n	8004ed6 <HAL_TIM_IC_ConfigChannel+0x12e>
  }
  else if (Channel == TIM_CHANNEL_3)
 8004e50:	687b      	ldr	r3, [r7, #4]
 8004e52:	2b08      	cmp	r3, #8
 8004e54:	d11b      	bne.n	8004e8e <HAL_TIM_IC_ConfigChannel+0xe6>
  {
    /* TI3 Configuration */
    assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

    TIM_TI3_SetConfig(htim->Instance,
 8004e56:	68fb      	ldr	r3, [r7, #12]
 8004e58:	6818      	ldr	r0, [r3, #0]
 8004e5a:	68bb      	ldr	r3, [r7, #8]
 8004e5c:	6819      	ldr	r1, [r3, #0]
 8004e5e:	68bb      	ldr	r3, [r7, #8]
 8004e60:	685a      	ldr	r2, [r3, #4]
 8004e62:	68bb      	ldr	r3, [r7, #8]
 8004e64:	68db      	ldr	r3, [r3, #12]
 8004e66:	f000 fa89 	bl	800537c <TIM_TI3_SetConfig>
                      sConfig->ICPolarity,
                      sConfig->ICSelection,
                      sConfig->ICFilter);

    /* Reset the IC3PSC Bits */
    htim->Instance->CCMR2 &= ~TIM_CCMR2_IC3PSC;
 8004e6a:	68fb      	ldr	r3, [r7, #12]
 8004e6c:	681b      	ldr	r3, [r3, #0]
 8004e6e:	69da      	ldr	r2, [r3, #28]
 8004e70:	68fb      	ldr	r3, [r7, #12]
 8004e72:	681b      	ldr	r3, [r3, #0]
 8004e74:	210c      	movs	r1, #12
 8004e76:	438a      	bics	r2, r1
 8004e78:	61da      	str	r2, [r3, #28]

    /* Set the IC3PSC value */
    htim->Instance->CCMR2 |= sConfig->ICPrescaler;
 8004e7a:	68fb      	ldr	r3, [r7, #12]
 8004e7c:	681b      	ldr	r3, [r3, #0]
 8004e7e:	69d9      	ldr	r1, [r3, #28]
 8004e80:	68bb      	ldr	r3, [r7, #8]
 8004e82:	689a      	ldr	r2, [r3, #8]
 8004e84:	68fb      	ldr	r3, [r7, #12]
 8004e86:	681b      	ldr	r3, [r3, #0]
 8004e88:	430a      	orrs	r2, r1
 8004e8a:	61da      	str	r2, [r3, #28]
 8004e8c:	e023      	b.n	8004ed6 <HAL_TIM_IC_ConfigChannel+0x12e>
  }
  else if (Channel == TIM_CHANNEL_4)
 8004e8e:	687b      	ldr	r3, [r7, #4]
 8004e90:	2b0c      	cmp	r3, #12
 8004e92:	d11c      	bne.n	8004ece <HAL_TIM_IC_ConfigChannel+0x126>
  {
    /* TI4 Configuration */
    assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

    TIM_TI4_SetConfig(htim->Instance,
 8004e94:	68fb      	ldr	r3, [r7, #12]
 8004e96:	6818      	ldr	r0, [r3, #0]
 8004e98:	68bb      	ldr	r3, [r7, #8]
 8004e9a:	6819      	ldr	r1, [r3, #0]
 8004e9c:	68bb      	ldr	r3, [r7, #8]
 8004e9e:	685a      	ldr	r2, [r3, #4]
 8004ea0:	68bb      	ldr	r3, [r7, #8]
 8004ea2:	68db      	ldr	r3, [r3, #12]
 8004ea4:	f000 faaa 	bl	80053fc <TIM_TI4_SetConfig>
                      sConfig->ICPolarity,
                      sConfig->ICSelection,
                      sConfig->ICFilter);

    /* Reset the IC4PSC Bits */
    htim->Instance->CCMR2 &= ~TIM_CCMR2_IC4PSC;
 8004ea8:	68fb      	ldr	r3, [r7, #12]
 8004eaa:	681b      	ldr	r3, [r3, #0]
 8004eac:	69da      	ldr	r2, [r3, #28]
 8004eae:	68fb      	ldr	r3, [r7, #12]
 8004eb0:	681b      	ldr	r3, [r3, #0]
 8004eb2:	490e      	ldr	r1, [pc, #56]	; (8004eec <HAL_TIM_IC_ConfigChannel+0x144>)
 8004eb4:	400a      	ands	r2, r1
 8004eb6:	61da      	str	r2, [r3, #28]

    /* Set the IC4PSC value */
    htim->Instance->CCMR2 |= (sConfig->ICPrescaler << 8U);
 8004eb8:	68fb      	ldr	r3, [r7, #12]
 8004eba:	681b      	ldr	r3, [r3, #0]
 8004ebc:	69d9      	ldr	r1, [r3, #28]
 8004ebe:	68bb      	ldr	r3, [r7, #8]
 8004ec0:	689b      	ldr	r3, [r3, #8]
 8004ec2:	021a      	lsls	r2, r3, #8
 8004ec4:	68fb      	ldr	r3, [r7, #12]
 8004ec6:	681b      	ldr	r3, [r3, #0]
 8004ec8:	430a      	orrs	r2, r1
 8004eca:	61da      	str	r2, [r3, #28]
 8004ecc:	e003      	b.n	8004ed6 <HAL_TIM_IC_ConfigChannel+0x12e>
  }
  else
  {
    status = HAL_ERROR;
 8004ece:	2317      	movs	r3, #23
 8004ed0:	18fb      	adds	r3, r7, r3
 8004ed2:	2201      	movs	r2, #1
 8004ed4:	701a      	strb	r2, [r3, #0]
  }

  __HAL_UNLOCK(htim);
 8004ed6:	68fb      	ldr	r3, [r7, #12]
 8004ed8:	223c      	movs	r2, #60	; 0x3c
 8004eda:	2100      	movs	r1, #0
 8004edc:	5499      	strb	r1, [r3, r2]

  return status;
 8004ede:	2317      	movs	r3, #23
 8004ee0:	18fb      	adds	r3, r7, r3
 8004ee2:	781b      	ldrb	r3, [r3, #0]
}
 8004ee4:	0018      	movs	r0, r3
 8004ee6:	46bd      	mov	sp, r7
 8004ee8:	b006      	add	sp, #24
 8004eea:	bd80      	pop	{r7, pc}
 8004eec:	fffff3ff 	.word	0xfffff3ff

08004ef0 <HAL_TIM_SlaveConfigSynchro>:
  *         timer input or external trigger input) and the Slave mode
  *         (Disable, Reset, Gated, Trigger, External clock mode 1).
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_SlaveConfigSynchro(TIM_HandleTypeDef *htim, const TIM_SlaveConfigTypeDef *sSlaveConfig)
{
 8004ef0:	b580      	push	{r7, lr}
 8004ef2:	b082      	sub	sp, #8
 8004ef4:	af00      	add	r7, sp, #0
 8004ef6:	6078      	str	r0, [r7, #4]
 8004ef8:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_TIM_SLAVE_INSTANCE(htim->Instance));
  assert_param(IS_TIM_SLAVE_MODE(sSlaveConfig->SlaveMode));
  assert_param(IS_TIM_TRIGGER_SELECTION(sSlaveConfig->InputTrigger));

  __HAL_LOCK(htim);
 8004efa:	687b      	ldr	r3, [r7, #4]
 8004efc:	223c      	movs	r2, #60	; 0x3c
 8004efe:	5c9b      	ldrb	r3, [r3, r2]
 8004f00:	2b01      	cmp	r3, #1
 8004f02:	d101      	bne.n	8004f08 <HAL_TIM_SlaveConfigSynchro+0x18>
 8004f04:	2302      	movs	r3, #2
 8004f06:	e032      	b.n	8004f6e <HAL_TIM_SlaveConfigSynchro+0x7e>
 8004f08:	687b      	ldr	r3, [r7, #4]
 8004f0a:	223c      	movs	r2, #60	; 0x3c
 8004f0c:	2101      	movs	r1, #1
 8004f0e:	5499      	strb	r1, [r3, r2]

  htim->State = HAL_TIM_STATE_BUSY;
 8004f10:	687b      	ldr	r3, [r7, #4]
 8004f12:	223d      	movs	r2, #61	; 0x3d
 8004f14:	2102      	movs	r1, #2
 8004f16:	5499      	strb	r1, [r3, r2]

  if (TIM_SlaveTimer_SetConfig(htim, sSlaveConfig) != HAL_OK)
 8004f18:	683a      	ldr	r2, [r7, #0]
 8004f1a:	687b      	ldr	r3, [r7, #4]
 8004f1c:	0011      	movs	r1, r2
 8004f1e:	0018      	movs	r0, r3
 8004f20:	f000 f8a2 	bl	8005068 <TIM_SlaveTimer_SetConfig>
 8004f24:	1e03      	subs	r3, r0, #0
 8004f26:	d009      	beq.n	8004f3c <HAL_TIM_SlaveConfigSynchro+0x4c>
  {
    htim->State = HAL_TIM_STATE_READY;
 8004f28:	687b      	ldr	r3, [r7, #4]
 8004f2a:	223d      	movs	r2, #61	; 0x3d
 8004f2c:	2101      	movs	r1, #1
 8004f2e:	5499      	strb	r1, [r3, r2]
    __HAL_UNLOCK(htim);
 8004f30:	687b      	ldr	r3, [r7, #4]
 8004f32:	223c      	movs	r2, #60	; 0x3c
 8004f34:	2100      	movs	r1, #0
 8004f36:	5499      	strb	r1, [r3, r2]
    return HAL_ERROR;
 8004f38:	2301      	movs	r3, #1
 8004f3a:	e018      	b.n	8004f6e <HAL_TIM_SlaveConfigSynchro+0x7e>
  }

  /* Disable Trigger Interrupt */
  __HAL_TIM_DISABLE_IT(htim, TIM_IT_TRIGGER);
 8004f3c:	687b      	ldr	r3, [r7, #4]
 8004f3e:	681b      	ldr	r3, [r3, #0]
 8004f40:	68da      	ldr	r2, [r3, #12]
 8004f42:	687b      	ldr	r3, [r7, #4]
 8004f44:	681b      	ldr	r3, [r3, #0]
 8004f46:	2140      	movs	r1, #64	; 0x40
 8004f48:	438a      	bics	r2, r1
 8004f4a:	60da      	str	r2, [r3, #12]

  /* Disable Trigger DMA request */
  __HAL_TIM_DISABLE_DMA(htim, TIM_DMA_TRIGGER);
 8004f4c:	687b      	ldr	r3, [r7, #4]
 8004f4e:	681b      	ldr	r3, [r3, #0]
 8004f50:	68da      	ldr	r2, [r3, #12]
 8004f52:	687b      	ldr	r3, [r7, #4]
 8004f54:	681b      	ldr	r3, [r3, #0]
 8004f56:	4908      	ldr	r1, [pc, #32]	; (8004f78 <HAL_TIM_SlaveConfigSynchro+0x88>)
 8004f58:	400a      	ands	r2, r1
 8004f5a:	60da      	str	r2, [r3, #12]

  htim->State = HAL_TIM_STATE_READY;
 8004f5c:	687b      	ldr	r3, [r7, #4]
 8004f5e:	223d      	movs	r2, #61	; 0x3d
 8004f60:	2101      	movs	r1, #1
 8004f62:	5499      	strb	r1, [r3, r2]

  __HAL_UNLOCK(htim);
 8004f64:	687b      	ldr	r3, [r7, #4]
 8004f66:	223c      	movs	r2, #60	; 0x3c
 8004f68:	2100      	movs	r1, #0
 8004f6a:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8004f6c:	2300      	movs	r3, #0
}
 8004f6e:	0018      	movs	r0, r3
 8004f70:	46bd      	mov	sp, r7
 8004f72:	b002      	add	sp, #8
 8004f74:	bd80      	pop	{r7, pc}
 8004f76:	46c0      	nop			; (mov r8, r8)
 8004f78:	ffffbfff 	.word	0xffffbfff

08004f7c <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8004f7c:	b580      	push	{r7, lr}
 8004f7e:	b084      	sub	sp, #16
 8004f80:	af00      	add	r7, sp, #0
 8004f82:	6078      	str	r0, [r7, #4]
 8004f84:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8004f86:	687b      	ldr	r3, [r7, #4]
 8004f88:	681b      	ldr	r3, [r3, #0]
 8004f8a:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8004f8c:	687b      	ldr	r3, [r7, #4]
 8004f8e:	4a30      	ldr	r2, [pc, #192]	; (8005050 <TIM_Base_SetConfig+0xd4>)
 8004f90:	4293      	cmp	r3, r2
 8004f92:	d008      	beq.n	8004fa6 <TIM_Base_SetConfig+0x2a>
 8004f94:	687a      	ldr	r2, [r7, #4]
 8004f96:	2380      	movs	r3, #128	; 0x80
 8004f98:	05db      	lsls	r3, r3, #23
 8004f9a:	429a      	cmp	r2, r3
 8004f9c:	d003      	beq.n	8004fa6 <TIM_Base_SetConfig+0x2a>
 8004f9e:	687b      	ldr	r3, [r7, #4]
 8004fa0:	4a2c      	ldr	r2, [pc, #176]	; (8005054 <TIM_Base_SetConfig+0xd8>)
 8004fa2:	4293      	cmp	r3, r2
 8004fa4:	d108      	bne.n	8004fb8 <TIM_Base_SetConfig+0x3c>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8004fa6:	68fb      	ldr	r3, [r7, #12]
 8004fa8:	2270      	movs	r2, #112	; 0x70
 8004faa:	4393      	bics	r3, r2
 8004fac:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8004fae:	683b      	ldr	r3, [r7, #0]
 8004fb0:	685b      	ldr	r3, [r3, #4]
 8004fb2:	68fa      	ldr	r2, [r7, #12]
 8004fb4:	4313      	orrs	r3, r2
 8004fb6:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8004fb8:	687b      	ldr	r3, [r7, #4]
 8004fba:	4a25      	ldr	r2, [pc, #148]	; (8005050 <TIM_Base_SetConfig+0xd4>)
 8004fbc:	4293      	cmp	r3, r2
 8004fbe:	d014      	beq.n	8004fea <TIM_Base_SetConfig+0x6e>
 8004fc0:	687a      	ldr	r2, [r7, #4]
 8004fc2:	2380      	movs	r3, #128	; 0x80
 8004fc4:	05db      	lsls	r3, r3, #23
 8004fc6:	429a      	cmp	r2, r3
 8004fc8:	d00f      	beq.n	8004fea <TIM_Base_SetConfig+0x6e>
 8004fca:	687b      	ldr	r3, [r7, #4]
 8004fcc:	4a21      	ldr	r2, [pc, #132]	; (8005054 <TIM_Base_SetConfig+0xd8>)
 8004fce:	4293      	cmp	r3, r2
 8004fd0:	d00b      	beq.n	8004fea <TIM_Base_SetConfig+0x6e>
 8004fd2:	687b      	ldr	r3, [r7, #4]
 8004fd4:	4a20      	ldr	r2, [pc, #128]	; (8005058 <TIM_Base_SetConfig+0xdc>)
 8004fd6:	4293      	cmp	r3, r2
 8004fd8:	d007      	beq.n	8004fea <TIM_Base_SetConfig+0x6e>
 8004fda:	687b      	ldr	r3, [r7, #4]
 8004fdc:	4a1f      	ldr	r2, [pc, #124]	; (800505c <TIM_Base_SetConfig+0xe0>)
 8004fde:	4293      	cmp	r3, r2
 8004fe0:	d003      	beq.n	8004fea <TIM_Base_SetConfig+0x6e>
 8004fe2:	687b      	ldr	r3, [r7, #4]
 8004fe4:	4a1e      	ldr	r2, [pc, #120]	; (8005060 <TIM_Base_SetConfig+0xe4>)
 8004fe6:	4293      	cmp	r3, r2
 8004fe8:	d108      	bne.n	8004ffc <TIM_Base_SetConfig+0x80>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8004fea:	68fb      	ldr	r3, [r7, #12]
 8004fec:	4a1d      	ldr	r2, [pc, #116]	; (8005064 <TIM_Base_SetConfig+0xe8>)
 8004fee:	4013      	ands	r3, r2
 8004ff0:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8004ff2:	683b      	ldr	r3, [r7, #0]
 8004ff4:	68db      	ldr	r3, [r3, #12]
 8004ff6:	68fa      	ldr	r2, [r7, #12]
 8004ff8:	4313      	orrs	r3, r2
 8004ffa:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8004ffc:	68fb      	ldr	r3, [r7, #12]
 8004ffe:	2280      	movs	r2, #128	; 0x80
 8005000:	4393      	bics	r3, r2
 8005002:	001a      	movs	r2, r3
 8005004:	683b      	ldr	r3, [r7, #0]
 8005006:	695b      	ldr	r3, [r3, #20]
 8005008:	4313      	orrs	r3, r2
 800500a:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 800500c:	687b      	ldr	r3, [r7, #4]
 800500e:	68fa      	ldr	r2, [r7, #12]
 8005010:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8005012:	683b      	ldr	r3, [r7, #0]
 8005014:	689a      	ldr	r2, [r3, #8]
 8005016:	687b      	ldr	r3, [r7, #4]
 8005018:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 800501a:	683b      	ldr	r3, [r7, #0]
 800501c:	681a      	ldr	r2, [r3, #0]
 800501e:	687b      	ldr	r3, [r7, #4]
 8005020:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8005022:	687b      	ldr	r3, [r7, #4]
 8005024:	4a0a      	ldr	r2, [pc, #40]	; (8005050 <TIM_Base_SetConfig+0xd4>)
 8005026:	4293      	cmp	r3, r2
 8005028:	d007      	beq.n	800503a <TIM_Base_SetConfig+0xbe>
 800502a:	687b      	ldr	r3, [r7, #4]
 800502c:	4a0b      	ldr	r2, [pc, #44]	; (800505c <TIM_Base_SetConfig+0xe0>)
 800502e:	4293      	cmp	r3, r2
 8005030:	d003      	beq.n	800503a <TIM_Base_SetConfig+0xbe>
 8005032:	687b      	ldr	r3, [r7, #4]
 8005034:	4a0a      	ldr	r2, [pc, #40]	; (8005060 <TIM_Base_SetConfig+0xe4>)
 8005036:	4293      	cmp	r3, r2
 8005038:	d103      	bne.n	8005042 <TIM_Base_SetConfig+0xc6>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 800503a:	683b      	ldr	r3, [r7, #0]
 800503c:	691a      	ldr	r2, [r3, #16]
 800503e:	687b      	ldr	r3, [r7, #4]
 8005040:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8005042:	687b      	ldr	r3, [r7, #4]
 8005044:	2201      	movs	r2, #1
 8005046:	615a      	str	r2, [r3, #20]
}
 8005048:	46c0      	nop			; (mov r8, r8)
 800504a:	46bd      	mov	sp, r7
 800504c:	b004      	add	sp, #16
 800504e:	bd80      	pop	{r7, pc}
 8005050:	40012c00 	.word	0x40012c00
 8005054:	40000400 	.word	0x40000400
 8005058:	40002000 	.word	0x40002000
 800505c:	40014400 	.word	0x40014400
 8005060:	40014800 	.word	0x40014800
 8005064:	fffffcff 	.word	0xfffffcff

08005068 <TIM_SlaveTimer_SetConfig>:
  * @param  sSlaveConfig Slave timer configuration
  * @retval None
  */
static HAL_StatusTypeDef TIM_SlaveTimer_SetConfig(TIM_HandleTypeDef *htim,
                                                  const TIM_SlaveConfigTypeDef *sSlaveConfig)
{
 8005068:	b580      	push	{r7, lr}
 800506a:	b086      	sub	sp, #24
 800506c:	af00      	add	r7, sp, #0
 800506e:	6078      	str	r0, [r7, #4]
 8005070:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8005072:	2317      	movs	r3, #23
 8005074:	18fb      	adds	r3, r7, r3
 8005076:	2200      	movs	r2, #0
 8005078:	701a      	strb	r2, [r3, #0]
  uint32_t tmpsmcr;
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 800507a:	687b      	ldr	r3, [r7, #4]
 800507c:	681b      	ldr	r3, [r3, #0]
 800507e:	689b      	ldr	r3, [r3, #8]
 8005080:	613b      	str	r3, [r7, #16]

  /* Reset the Trigger Selection Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8005082:	693b      	ldr	r3, [r7, #16]
 8005084:	2270      	movs	r2, #112	; 0x70
 8005086:	4393      	bics	r3, r2
 8005088:	613b      	str	r3, [r7, #16]
  /* Set the Input Trigger source */
  tmpsmcr |= sSlaveConfig->InputTrigger;
 800508a:	683b      	ldr	r3, [r7, #0]
 800508c:	685b      	ldr	r3, [r3, #4]
 800508e:	693a      	ldr	r2, [r7, #16]
 8005090:	4313      	orrs	r3, r2
 8005092:	613b      	str	r3, [r7, #16]

  /* Reset the slave mode Bits */
  tmpsmcr &= ~TIM_SMCR_SMS;
 8005094:	693b      	ldr	r3, [r7, #16]
 8005096:	2207      	movs	r2, #7
 8005098:	4393      	bics	r3, r2
 800509a:	613b      	str	r3, [r7, #16]
  /* Set the slave mode */
  tmpsmcr |= sSlaveConfig->SlaveMode;
 800509c:	683b      	ldr	r3, [r7, #0]
 800509e:	681b      	ldr	r3, [r3, #0]
 80050a0:	693a      	ldr	r2, [r7, #16]
 80050a2:	4313      	orrs	r3, r2
 80050a4:	613b      	str	r3, [r7, #16]

  /* Write to TIMx SMCR */
  htim->Instance->SMCR = tmpsmcr;
 80050a6:	687b      	ldr	r3, [r7, #4]
 80050a8:	681b      	ldr	r3, [r3, #0]
 80050aa:	693a      	ldr	r2, [r7, #16]
 80050ac:	609a      	str	r2, [r3, #8]

  /* Configure the trigger prescaler, filter, and polarity */
  switch (sSlaveConfig->InputTrigger)
 80050ae:	683b      	ldr	r3, [r7, #0]
 80050b0:	685b      	ldr	r3, [r3, #4]
 80050b2:	2b70      	cmp	r3, #112	; 0x70
 80050b4:	d015      	beq.n	80050e2 <TIM_SlaveTimer_SetConfig+0x7a>
 80050b6:	d900      	bls.n	80050ba <TIM_SlaveTimer_SetConfig+0x52>
 80050b8:	e05b      	b.n	8005172 <TIM_SlaveTimer_SetConfig+0x10a>
 80050ba:	2b60      	cmp	r3, #96	; 0x60
 80050bc:	d04f      	beq.n	800515e <TIM_SlaveTimer_SetConfig+0xf6>
 80050be:	d858      	bhi.n	8005172 <TIM_SlaveTimer_SetConfig+0x10a>
 80050c0:	2b50      	cmp	r3, #80	; 0x50
 80050c2:	d042      	beq.n	800514a <TIM_SlaveTimer_SetConfig+0xe2>
 80050c4:	d855      	bhi.n	8005172 <TIM_SlaveTimer_SetConfig+0x10a>
 80050c6:	2b40      	cmp	r3, #64	; 0x40
 80050c8:	d016      	beq.n	80050f8 <TIM_SlaveTimer_SetConfig+0x90>
 80050ca:	d852      	bhi.n	8005172 <TIM_SlaveTimer_SetConfig+0x10a>
 80050cc:	2b30      	cmp	r3, #48	; 0x30
 80050ce:	d055      	beq.n	800517c <TIM_SlaveTimer_SetConfig+0x114>
 80050d0:	d84f      	bhi.n	8005172 <TIM_SlaveTimer_SetConfig+0x10a>
 80050d2:	2b20      	cmp	r3, #32
 80050d4:	d052      	beq.n	800517c <TIM_SlaveTimer_SetConfig+0x114>
 80050d6:	d84c      	bhi.n	8005172 <TIM_SlaveTimer_SetConfig+0x10a>
 80050d8:	2b00      	cmp	r3, #0
 80050da:	d04f      	beq.n	800517c <TIM_SlaveTimer_SetConfig+0x114>
 80050dc:	2b10      	cmp	r3, #16
 80050de:	d04d      	beq.n	800517c <TIM_SlaveTimer_SetConfig+0x114>
 80050e0:	e047      	b.n	8005172 <TIM_SlaveTimer_SetConfig+0x10a>
      assert_param(IS_TIM_CLOCKSOURCE_ETRMODE1_INSTANCE(htim->Instance));
      assert_param(IS_TIM_TRIGGERPRESCALER(sSlaveConfig->TriggerPrescaler));
      assert_param(IS_TIM_TRIGGERPOLARITY(sSlaveConfig->TriggerPolarity));
      assert_param(IS_TIM_TRIGGERFILTER(sSlaveConfig->TriggerFilter));
      /* Configure the ETR Trigger source */
      TIM_ETR_SetConfig(htim->Instance,
 80050e2:	687b      	ldr	r3, [r7, #4]
 80050e4:	6818      	ldr	r0, [r3, #0]
 80050e6:	683b      	ldr	r3, [r7, #0]
 80050e8:	68d9      	ldr	r1, [r3, #12]
 80050ea:	683b      	ldr	r3, [r7, #0]
 80050ec:	689a      	ldr	r2, [r3, #8]
 80050ee:	683b      	ldr	r3, [r7, #0]
 80050f0:	691b      	ldr	r3, [r3, #16]
 80050f2:	f000 f9c9 	bl	8005488 <TIM_ETR_SetConfig>
                        sSlaveConfig->TriggerPrescaler,
                        sSlaveConfig->TriggerPolarity,
                        sSlaveConfig->TriggerFilter);
      break;
 80050f6:	e042      	b.n	800517e <TIM_SlaveTimer_SetConfig+0x116>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));
      assert_param(IS_TIM_TRIGGERFILTER(sSlaveConfig->TriggerFilter));

      if (sSlaveConfig->SlaveMode == TIM_SLAVEMODE_GATED)
 80050f8:	683b      	ldr	r3, [r7, #0]
 80050fa:	681b      	ldr	r3, [r3, #0]
 80050fc:	2b05      	cmp	r3, #5
 80050fe:	d101      	bne.n	8005104 <TIM_SlaveTimer_SetConfig+0x9c>
      {
        return HAL_ERROR;
 8005100:	2301      	movs	r3, #1
 8005102:	e03f      	b.n	8005184 <TIM_SlaveTimer_SetConfig+0x11c>
      }

      /* Disable the Channel 1: Reset the CC1E Bit */
      tmpccer = htim->Instance->CCER;
 8005104:	687b      	ldr	r3, [r7, #4]
 8005106:	681b      	ldr	r3, [r3, #0]
 8005108:	6a1b      	ldr	r3, [r3, #32]
 800510a:	60fb      	str	r3, [r7, #12]
      htim->Instance->CCER &= ~TIM_CCER_CC1E;
 800510c:	687b      	ldr	r3, [r7, #4]
 800510e:	681b      	ldr	r3, [r3, #0]
 8005110:	6a1a      	ldr	r2, [r3, #32]
 8005112:	687b      	ldr	r3, [r7, #4]
 8005114:	681b      	ldr	r3, [r3, #0]
 8005116:	2101      	movs	r1, #1
 8005118:	438a      	bics	r2, r1
 800511a:	621a      	str	r2, [r3, #32]
      tmpccmr1 = htim->Instance->CCMR1;
 800511c:	687b      	ldr	r3, [r7, #4]
 800511e:	681b      	ldr	r3, [r3, #0]
 8005120:	699b      	ldr	r3, [r3, #24]
 8005122:	60bb      	str	r3, [r7, #8]

      /* Set the filter */
      tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8005124:	68bb      	ldr	r3, [r7, #8]
 8005126:	22f0      	movs	r2, #240	; 0xf0
 8005128:	4393      	bics	r3, r2
 800512a:	60bb      	str	r3, [r7, #8]
      tmpccmr1 |= ((sSlaveConfig->TriggerFilter) << 4U);
 800512c:	683b      	ldr	r3, [r7, #0]
 800512e:	691b      	ldr	r3, [r3, #16]
 8005130:	011b      	lsls	r3, r3, #4
 8005132:	68ba      	ldr	r2, [r7, #8]
 8005134:	4313      	orrs	r3, r2
 8005136:	60bb      	str	r3, [r7, #8]

      /* Write to TIMx CCMR1 and CCER registers */
      htim->Instance->CCMR1 = tmpccmr1;
 8005138:	687b      	ldr	r3, [r7, #4]
 800513a:	681b      	ldr	r3, [r3, #0]
 800513c:	68ba      	ldr	r2, [r7, #8]
 800513e:	619a      	str	r2, [r3, #24]
      htim->Instance->CCER = tmpccer;
 8005140:	687b      	ldr	r3, [r7, #4]
 8005142:	681b      	ldr	r3, [r3, #0]
 8005144:	68fa      	ldr	r2, [r7, #12]
 8005146:	621a      	str	r2, [r3, #32]
      break;
 8005148:	e019      	b.n	800517e <TIM_SlaveTimer_SetConfig+0x116>
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));
      assert_param(IS_TIM_TRIGGERPOLARITY(sSlaveConfig->TriggerPolarity));
      assert_param(IS_TIM_TRIGGERFILTER(sSlaveConfig->TriggerFilter));

      /* Configure TI1 Filter and Polarity */
      TIM_TI1_ConfigInputStage(htim->Instance,
 800514a:	687b      	ldr	r3, [r7, #4]
 800514c:	6818      	ldr	r0, [r3, #0]
 800514e:	683b      	ldr	r3, [r7, #0]
 8005150:	6899      	ldr	r1, [r3, #8]
 8005152:	683b      	ldr	r3, [r7, #0]
 8005154:	691b      	ldr	r3, [r3, #16]
 8005156:	001a      	movs	r2, r3
 8005158:	f000 f86e 	bl	8005238 <TIM_TI1_ConfigInputStage>
                               sSlaveConfig->TriggerPolarity,
                               sSlaveConfig->TriggerFilter);
      break;
 800515c:	e00f      	b.n	800517e <TIM_SlaveTimer_SetConfig+0x116>
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));
      assert_param(IS_TIM_TRIGGERPOLARITY(sSlaveConfig->TriggerPolarity));
      assert_param(IS_TIM_TRIGGERFILTER(sSlaveConfig->TriggerFilter));

      /* Configure TI2 Filter and Polarity */
      TIM_TI2_ConfigInputStage(htim->Instance,
 800515e:	687b      	ldr	r3, [r7, #4]
 8005160:	6818      	ldr	r0, [r3, #0]
 8005162:	683b      	ldr	r3, [r7, #0]
 8005164:	6899      	ldr	r1, [r3, #8]
 8005166:	683b      	ldr	r3, [r7, #0]
 8005168:	691b      	ldr	r3, [r3, #16]
 800516a:	001a      	movs	r2, r3
 800516c:	f000 f8d4 	bl	8005318 <TIM_TI2_ConfigInputStage>
                               sSlaveConfig->TriggerPolarity,
                               sSlaveConfig->TriggerFilter);
      break;
 8005170:	e005      	b.n	800517e <TIM_SlaveTimer_SetConfig+0x116>
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));
      break;
    }

    default:
      status = HAL_ERROR;
 8005172:	2317      	movs	r3, #23
 8005174:	18fb      	adds	r3, r7, r3
 8005176:	2201      	movs	r2, #1
 8005178:	701a      	strb	r2, [r3, #0]
      break;
 800517a:	e000      	b.n	800517e <TIM_SlaveTimer_SetConfig+0x116>
      break;
 800517c:	46c0      	nop			; (mov r8, r8)
  }

  return status;
 800517e:	2317      	movs	r3, #23
 8005180:	18fb      	adds	r3, r7, r3
 8005182:	781b      	ldrb	r3, [r3, #0]
}
 8005184:	0018      	movs	r0, r3
 8005186:	46bd      	mov	sp, r7
 8005188:	b006      	add	sp, #24
 800518a:	bd80      	pop	{r7, pc}

0800518c <TIM_TI1_SetConfig>:
  *       (on channel2 path) is used as the input signal. Therefore CCMR1 must be
  *        protected against un-initialized filter and polarity values.
  */
void TIM_TI1_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                       uint32_t TIM_ICFilter)
{
 800518c:	b580      	push	{r7, lr}
 800518e:	b086      	sub	sp, #24
 8005190:	af00      	add	r7, sp, #0
 8005192:	60f8      	str	r0, [r7, #12]
 8005194:	60b9      	str	r1, [r7, #8]
 8005196:	607a      	str	r2, [r7, #4]
 8005198:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800519a:	68fb      	ldr	r3, [r7, #12]
 800519c:	6a1b      	ldr	r3, [r3, #32]
 800519e:	2201      	movs	r2, #1
 80051a0:	4393      	bics	r3, r2
 80051a2:	001a      	movs	r2, r3
 80051a4:	68fb      	ldr	r3, [r7, #12]
 80051a6:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80051a8:	68fb      	ldr	r3, [r7, #12]
 80051aa:	699b      	ldr	r3, [r3, #24]
 80051ac:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 80051ae:	68fb      	ldr	r3, [r7, #12]
 80051b0:	6a1b      	ldr	r3, [r3, #32]
 80051b2:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  if (IS_TIM_CC2_INSTANCE(TIMx) != RESET)
 80051b4:	68fb      	ldr	r3, [r7, #12]
 80051b6:	4a1e      	ldr	r2, [pc, #120]	; (8005230 <TIM_TI1_SetConfig+0xa4>)
 80051b8:	4293      	cmp	r3, r2
 80051ba:	d008      	beq.n	80051ce <TIM_TI1_SetConfig+0x42>
 80051bc:	68fa      	ldr	r2, [r7, #12]
 80051be:	2380      	movs	r3, #128	; 0x80
 80051c0:	05db      	lsls	r3, r3, #23
 80051c2:	429a      	cmp	r2, r3
 80051c4:	d003      	beq.n	80051ce <TIM_TI1_SetConfig+0x42>
 80051c6:	68fb      	ldr	r3, [r7, #12]
 80051c8:	4a1a      	ldr	r2, [pc, #104]	; (8005234 <TIM_TI1_SetConfig+0xa8>)
 80051ca:	4293      	cmp	r3, r2
 80051cc:	d101      	bne.n	80051d2 <TIM_TI1_SetConfig+0x46>
 80051ce:	2301      	movs	r3, #1
 80051d0:	e000      	b.n	80051d4 <TIM_TI1_SetConfig+0x48>
 80051d2:	2300      	movs	r3, #0
 80051d4:	2b00      	cmp	r3, #0
 80051d6:	d008      	beq.n	80051ea <TIM_TI1_SetConfig+0x5e>
  {
    tmpccmr1 &= ~TIM_CCMR1_CC1S;
 80051d8:	697b      	ldr	r3, [r7, #20]
 80051da:	2203      	movs	r2, #3
 80051dc:	4393      	bics	r3, r2
 80051de:	617b      	str	r3, [r7, #20]
    tmpccmr1 |= TIM_ICSelection;
 80051e0:	697a      	ldr	r2, [r7, #20]
 80051e2:	687b      	ldr	r3, [r7, #4]
 80051e4:	4313      	orrs	r3, r2
 80051e6:	617b      	str	r3, [r7, #20]
 80051e8:	e003      	b.n	80051f2 <TIM_TI1_SetConfig+0x66>
  }
  else
  {
    tmpccmr1 |= TIM_CCMR1_CC1S_0;
 80051ea:	697b      	ldr	r3, [r7, #20]
 80051ec:	2201      	movs	r2, #1
 80051ee:	4313      	orrs	r3, r2
 80051f0:	617b      	str	r3, [r7, #20]
  }

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 80051f2:	697b      	ldr	r3, [r7, #20]
 80051f4:	22f0      	movs	r2, #240	; 0xf0
 80051f6:	4393      	bics	r3, r2
 80051f8:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= ((TIM_ICFilter << 4U) & TIM_CCMR1_IC1F);
 80051fa:	683b      	ldr	r3, [r7, #0]
 80051fc:	011b      	lsls	r3, r3, #4
 80051fe:	22ff      	movs	r2, #255	; 0xff
 8005200:	4013      	ands	r3, r2
 8005202:	697a      	ldr	r2, [r7, #20]
 8005204:	4313      	orrs	r3, r2
 8005206:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8005208:	693b      	ldr	r3, [r7, #16]
 800520a:	220a      	movs	r2, #10
 800520c:	4393      	bics	r3, r2
 800520e:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity & (TIM_CCER_CC1P | TIM_CCER_CC1NP));
 8005210:	68bb      	ldr	r3, [r7, #8]
 8005212:	220a      	movs	r2, #10
 8005214:	4013      	ands	r3, r2
 8005216:	693a      	ldr	r2, [r7, #16]
 8005218:	4313      	orrs	r3, r2
 800521a:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 800521c:	68fb      	ldr	r3, [r7, #12]
 800521e:	697a      	ldr	r2, [r7, #20]
 8005220:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8005222:	68fb      	ldr	r3, [r7, #12]
 8005224:	693a      	ldr	r2, [r7, #16]
 8005226:	621a      	str	r2, [r3, #32]
}
 8005228:	46c0      	nop			; (mov r8, r8)
 800522a:	46bd      	mov	sp, r7
 800522c:	b006      	add	sp, #24
 800522e:	bd80      	pop	{r7, pc}
 8005230:	40012c00 	.word	0x40012c00
 8005234:	40000400 	.word	0x40000400

08005238 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8005238:	b580      	push	{r7, lr}
 800523a:	b086      	sub	sp, #24
 800523c:	af00      	add	r7, sp, #0
 800523e:	60f8      	str	r0, [r7, #12]
 8005240:	60b9      	str	r1, [r7, #8]
 8005242:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8005244:	68fb      	ldr	r3, [r7, #12]
 8005246:	6a1b      	ldr	r3, [r3, #32]
 8005248:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800524a:	68fb      	ldr	r3, [r7, #12]
 800524c:	6a1b      	ldr	r3, [r3, #32]
 800524e:	2201      	movs	r2, #1
 8005250:	4393      	bics	r3, r2
 8005252:	001a      	movs	r2, r3
 8005254:	68fb      	ldr	r3, [r7, #12]
 8005256:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8005258:	68fb      	ldr	r3, [r7, #12]
 800525a:	699b      	ldr	r3, [r3, #24]
 800525c:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 800525e:	693b      	ldr	r3, [r7, #16]
 8005260:	22f0      	movs	r2, #240	; 0xf0
 8005262:	4393      	bics	r3, r2
 8005264:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8005266:	687b      	ldr	r3, [r7, #4]
 8005268:	011b      	lsls	r3, r3, #4
 800526a:	693a      	ldr	r2, [r7, #16]
 800526c:	4313      	orrs	r3, r2
 800526e:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8005270:	697b      	ldr	r3, [r7, #20]
 8005272:	220a      	movs	r2, #10
 8005274:	4393      	bics	r3, r2
 8005276:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8005278:	697a      	ldr	r2, [r7, #20]
 800527a:	68bb      	ldr	r3, [r7, #8]
 800527c:	4313      	orrs	r3, r2
 800527e:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8005280:	68fb      	ldr	r3, [r7, #12]
 8005282:	693a      	ldr	r2, [r7, #16]
 8005284:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8005286:	68fb      	ldr	r3, [r7, #12]
 8005288:	697a      	ldr	r2, [r7, #20]
 800528a:	621a      	str	r2, [r3, #32]
}
 800528c:	46c0      	nop			; (mov r8, r8)
 800528e:	46bd      	mov	sp, r7
 8005290:	b006      	add	sp, #24
 8005292:	bd80      	pop	{r7, pc}

08005294 <TIM_TI2_SetConfig>:
  *       (on channel1 path) is used as the input signal. Therefore CCMR1 must be
  *        protected against un-initialized filter and polarity values.
  */
static void TIM_TI2_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                              uint32_t TIM_ICFilter)
{
 8005294:	b580      	push	{r7, lr}
 8005296:	b086      	sub	sp, #24
 8005298:	af00      	add	r7, sp, #0
 800529a:	60f8      	str	r0, [r7, #12]
 800529c:	60b9      	str	r1, [r7, #8]
 800529e:	607a      	str	r2, [r7, #4]
 80052a0:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80052a2:	68fb      	ldr	r3, [r7, #12]
 80052a4:	6a1b      	ldr	r3, [r3, #32]
 80052a6:	2210      	movs	r2, #16
 80052a8:	4393      	bics	r3, r2
 80052aa:	001a      	movs	r2, r3
 80052ac:	68fb      	ldr	r3, [r7, #12]
 80052ae:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80052b0:	68fb      	ldr	r3, [r7, #12]
 80052b2:	699b      	ldr	r3, [r3, #24]
 80052b4:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 80052b6:	68fb      	ldr	r3, [r7, #12]
 80052b8:	6a1b      	ldr	r3, [r3, #32]
 80052ba:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  tmpccmr1 &= ~TIM_CCMR1_CC2S;
 80052bc:	697b      	ldr	r3, [r7, #20]
 80052be:	4a14      	ldr	r2, [pc, #80]	; (8005310 <TIM_TI2_SetConfig+0x7c>)
 80052c0:	4013      	ands	r3, r2
 80052c2:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICSelection << 8U);
 80052c4:	687b      	ldr	r3, [r7, #4]
 80052c6:	021b      	lsls	r3, r3, #8
 80052c8:	697a      	ldr	r2, [r7, #20]
 80052ca:	4313      	orrs	r3, r2
 80052cc:	617b      	str	r3, [r7, #20]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 80052ce:	697b      	ldr	r3, [r7, #20]
 80052d0:	4a10      	ldr	r2, [pc, #64]	; (8005314 <TIM_TI2_SetConfig+0x80>)
 80052d2:	4013      	ands	r3, r2
 80052d4:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= ((TIM_ICFilter << 12U) & TIM_CCMR1_IC2F);
 80052d6:	683b      	ldr	r3, [r7, #0]
 80052d8:	031b      	lsls	r3, r3, #12
 80052da:	041b      	lsls	r3, r3, #16
 80052dc:	0c1b      	lsrs	r3, r3, #16
 80052de:	697a      	ldr	r2, [r7, #20]
 80052e0:	4313      	orrs	r3, r2
 80052e2:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 80052e4:	693b      	ldr	r3, [r7, #16]
 80052e6:	22a0      	movs	r2, #160	; 0xa0
 80052e8:	4393      	bics	r3, r2
 80052ea:	613b      	str	r3, [r7, #16]
  tmpccer |= ((TIM_ICPolarity << 4U) & (TIM_CCER_CC2P | TIM_CCER_CC2NP));
 80052ec:	68bb      	ldr	r3, [r7, #8]
 80052ee:	011b      	lsls	r3, r3, #4
 80052f0:	22a0      	movs	r2, #160	; 0xa0
 80052f2:	4013      	ands	r3, r2
 80052f4:	693a      	ldr	r2, [r7, #16]
 80052f6:	4313      	orrs	r3, r2
 80052f8:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 80052fa:	68fb      	ldr	r3, [r7, #12]
 80052fc:	697a      	ldr	r2, [r7, #20]
 80052fe:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8005300:	68fb      	ldr	r3, [r7, #12]
 8005302:	693a      	ldr	r2, [r7, #16]
 8005304:	621a      	str	r2, [r3, #32]
}
 8005306:	46c0      	nop			; (mov r8, r8)
 8005308:	46bd      	mov	sp, r7
 800530a:	b006      	add	sp, #24
 800530c:	bd80      	pop	{r7, pc}
 800530e:	46c0      	nop			; (mov r8, r8)
 8005310:	fffffcff 	.word	0xfffffcff
 8005314:	ffff0fff 	.word	0xffff0fff

08005318 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8005318:	b580      	push	{r7, lr}
 800531a:	b086      	sub	sp, #24
 800531c:	af00      	add	r7, sp, #0
 800531e:	60f8      	str	r0, [r7, #12]
 8005320:	60b9      	str	r1, [r7, #8]
 8005322:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8005324:	68fb      	ldr	r3, [r7, #12]
 8005326:	6a1b      	ldr	r3, [r3, #32]
 8005328:	2210      	movs	r2, #16
 800532a:	4393      	bics	r3, r2
 800532c:	001a      	movs	r2, r3
 800532e:	68fb      	ldr	r3, [r7, #12]
 8005330:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8005332:	68fb      	ldr	r3, [r7, #12]
 8005334:	699b      	ldr	r3, [r3, #24]
 8005336:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8005338:	68fb      	ldr	r3, [r7, #12]
 800533a:	6a1b      	ldr	r3, [r3, #32]
 800533c:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 800533e:	697b      	ldr	r3, [r7, #20]
 8005340:	4a0d      	ldr	r2, [pc, #52]	; (8005378 <TIM_TI2_ConfigInputStage+0x60>)
 8005342:	4013      	ands	r3, r2
 8005344:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8005346:	687b      	ldr	r3, [r7, #4]
 8005348:	031b      	lsls	r3, r3, #12
 800534a:	697a      	ldr	r2, [r7, #20]
 800534c:	4313      	orrs	r3, r2
 800534e:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8005350:	693b      	ldr	r3, [r7, #16]
 8005352:	22a0      	movs	r2, #160	; 0xa0
 8005354:	4393      	bics	r3, r2
 8005356:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 8005358:	68bb      	ldr	r3, [r7, #8]
 800535a:	011b      	lsls	r3, r3, #4
 800535c:	693a      	ldr	r2, [r7, #16]
 800535e:	4313      	orrs	r3, r2
 8005360:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8005362:	68fb      	ldr	r3, [r7, #12]
 8005364:	697a      	ldr	r2, [r7, #20]
 8005366:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8005368:	68fb      	ldr	r3, [r7, #12]
 800536a:	693a      	ldr	r2, [r7, #16]
 800536c:	621a      	str	r2, [r3, #32]
}
 800536e:	46c0      	nop			; (mov r8, r8)
 8005370:	46bd      	mov	sp, r7
 8005372:	b006      	add	sp, #24
 8005374:	bd80      	pop	{r7, pc}
 8005376:	46c0      	nop			; (mov r8, r8)
 8005378:	ffff0fff 	.word	0xffff0fff

0800537c <TIM_TI3_SetConfig>:
  *       (on channel1 path) is used as the input signal. Therefore CCMR2 must be
  *        protected against un-initialized filter and polarity values.
  */
static void TIM_TI3_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                              uint32_t TIM_ICFilter)
{
 800537c:	b580      	push	{r7, lr}
 800537e:	b086      	sub	sp, #24
 8005380:	af00      	add	r7, sp, #0
 8005382:	60f8      	str	r0, [r7, #12]
 8005384:	60b9      	str	r1, [r7, #8]
 8005386:	607a      	str	r2, [r7, #4]
 8005388:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr2;
  uint32_t tmpccer;

  /* Disable the Channel 3: Reset the CC3E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 800538a:	68fb      	ldr	r3, [r7, #12]
 800538c:	6a1b      	ldr	r3, [r3, #32]
 800538e:	4a19      	ldr	r2, [pc, #100]	; (80053f4 <TIM_TI3_SetConfig+0x78>)
 8005390:	401a      	ands	r2, r3
 8005392:	68fb      	ldr	r3, [r7, #12]
 8005394:	621a      	str	r2, [r3, #32]
  tmpccmr2 = TIMx->CCMR2;
 8005396:	68fb      	ldr	r3, [r7, #12]
 8005398:	69db      	ldr	r3, [r3, #28]
 800539a:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 800539c:	68fb      	ldr	r3, [r7, #12]
 800539e:	6a1b      	ldr	r3, [r3, #32]
 80053a0:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  tmpccmr2 &= ~TIM_CCMR2_CC3S;
 80053a2:	697b      	ldr	r3, [r7, #20]
 80053a4:	2203      	movs	r2, #3
 80053a6:	4393      	bics	r3, r2
 80053a8:	617b      	str	r3, [r7, #20]
  tmpccmr2 |= TIM_ICSelection;
 80053aa:	697a      	ldr	r2, [r7, #20]
 80053ac:	687b      	ldr	r3, [r7, #4]
 80053ae:	4313      	orrs	r3, r2
 80053b0:	617b      	str	r3, [r7, #20]

  /* Set the filter */
  tmpccmr2 &= ~TIM_CCMR2_IC3F;
 80053b2:	697b      	ldr	r3, [r7, #20]
 80053b4:	22f0      	movs	r2, #240	; 0xf0
 80053b6:	4393      	bics	r3, r2
 80053b8:	617b      	str	r3, [r7, #20]
  tmpccmr2 |= ((TIM_ICFilter << 4U) & TIM_CCMR2_IC3F);
 80053ba:	683b      	ldr	r3, [r7, #0]
 80053bc:	011b      	lsls	r3, r3, #4
 80053be:	22ff      	movs	r2, #255	; 0xff
 80053c0:	4013      	ands	r3, r2
 80053c2:	697a      	ldr	r2, [r7, #20]
 80053c4:	4313      	orrs	r3, r2
 80053c6:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC3E Bit */
  tmpccer &= ~(TIM_CCER_CC3P | TIM_CCER_CC3NP);
 80053c8:	693b      	ldr	r3, [r7, #16]
 80053ca:	4a0b      	ldr	r2, [pc, #44]	; (80053f8 <TIM_TI3_SetConfig+0x7c>)
 80053cc:	4013      	ands	r3, r2
 80053ce:	613b      	str	r3, [r7, #16]
  tmpccer |= ((TIM_ICPolarity << 8U) & (TIM_CCER_CC3P | TIM_CCER_CC3NP));
 80053d0:	68bb      	ldr	r3, [r7, #8]
 80053d2:	021a      	lsls	r2, r3, #8
 80053d4:	23a0      	movs	r3, #160	; 0xa0
 80053d6:	011b      	lsls	r3, r3, #4
 80053d8:	4013      	ands	r3, r2
 80053da:	693a      	ldr	r2, [r7, #16]
 80053dc:	4313      	orrs	r3, r2
 80053de:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR2 and CCER registers */
  TIMx->CCMR2 = tmpccmr2;
 80053e0:	68fb      	ldr	r3, [r7, #12]
 80053e2:	697a      	ldr	r2, [r7, #20]
 80053e4:	61da      	str	r2, [r3, #28]
  TIMx->CCER = tmpccer;
 80053e6:	68fb      	ldr	r3, [r7, #12]
 80053e8:	693a      	ldr	r2, [r7, #16]
 80053ea:	621a      	str	r2, [r3, #32]
}
 80053ec:	46c0      	nop			; (mov r8, r8)
 80053ee:	46bd      	mov	sp, r7
 80053f0:	b006      	add	sp, #24
 80053f2:	bd80      	pop	{r7, pc}
 80053f4:	fffffeff 	.word	0xfffffeff
 80053f8:	fffff5ff 	.word	0xfffff5ff

080053fc <TIM_TI4_SetConfig>:
  *        protected against un-initialized filter and polarity values.
  * @retval None
  */
static void TIM_TI4_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                              uint32_t TIM_ICFilter)
{
 80053fc:	b580      	push	{r7, lr}
 80053fe:	b086      	sub	sp, #24
 8005400:	af00      	add	r7, sp, #0
 8005402:	60f8      	str	r0, [r7, #12]
 8005404:	60b9      	str	r1, [r7, #8]
 8005406:	607a      	str	r2, [r7, #4]
 8005408:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr2;
  uint32_t tmpccer;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 800540a:	68fb      	ldr	r3, [r7, #12]
 800540c:	6a1b      	ldr	r3, [r3, #32]
 800540e:	4a1a      	ldr	r2, [pc, #104]	; (8005478 <TIM_TI4_SetConfig+0x7c>)
 8005410:	401a      	ands	r2, r3
 8005412:	68fb      	ldr	r3, [r7, #12]
 8005414:	621a      	str	r2, [r3, #32]
  tmpccmr2 = TIMx->CCMR2;
 8005416:	68fb      	ldr	r3, [r7, #12]
 8005418:	69db      	ldr	r3, [r3, #28]
 800541a:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 800541c:	68fb      	ldr	r3, [r7, #12]
 800541e:	6a1b      	ldr	r3, [r3, #32]
 8005420:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  tmpccmr2 &= ~TIM_CCMR2_CC4S;
 8005422:	697b      	ldr	r3, [r7, #20]
 8005424:	4a15      	ldr	r2, [pc, #84]	; (800547c <TIM_TI4_SetConfig+0x80>)
 8005426:	4013      	ands	r3, r2
 8005428:	617b      	str	r3, [r7, #20]
  tmpccmr2 |= (TIM_ICSelection << 8U);
 800542a:	687b      	ldr	r3, [r7, #4]
 800542c:	021b      	lsls	r3, r3, #8
 800542e:	697a      	ldr	r2, [r7, #20]
 8005430:	4313      	orrs	r3, r2
 8005432:	617b      	str	r3, [r7, #20]

  /* Set the filter */
  tmpccmr2 &= ~TIM_CCMR2_IC4F;
 8005434:	697b      	ldr	r3, [r7, #20]
 8005436:	4a12      	ldr	r2, [pc, #72]	; (8005480 <TIM_TI4_SetConfig+0x84>)
 8005438:	4013      	ands	r3, r2
 800543a:	617b      	str	r3, [r7, #20]
  tmpccmr2 |= ((TIM_ICFilter << 12U) & TIM_CCMR2_IC4F);
 800543c:	683b      	ldr	r3, [r7, #0]
 800543e:	031b      	lsls	r3, r3, #12
 8005440:	041b      	lsls	r3, r3, #16
 8005442:	0c1b      	lsrs	r3, r3, #16
 8005444:	697a      	ldr	r2, [r7, #20]
 8005446:	4313      	orrs	r3, r2
 8005448:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC4E Bit */
  tmpccer &= ~(TIM_CCER_CC4P | TIM_CCER_CC4NP);
 800544a:	693b      	ldr	r3, [r7, #16]
 800544c:	4a0d      	ldr	r2, [pc, #52]	; (8005484 <TIM_TI4_SetConfig+0x88>)
 800544e:	4013      	ands	r3, r2
 8005450:	613b      	str	r3, [r7, #16]
  tmpccer |= ((TIM_ICPolarity << 12U) & (TIM_CCER_CC4P | TIM_CCER_CC4NP));
 8005452:	68bb      	ldr	r3, [r7, #8]
 8005454:	031a      	lsls	r2, r3, #12
 8005456:	23a0      	movs	r3, #160	; 0xa0
 8005458:	021b      	lsls	r3, r3, #8
 800545a:	4013      	ands	r3, r2
 800545c:	693a      	ldr	r2, [r7, #16]
 800545e:	4313      	orrs	r3, r2
 8005460:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR2 and CCER registers */
  TIMx->CCMR2 = tmpccmr2;
 8005462:	68fb      	ldr	r3, [r7, #12]
 8005464:	697a      	ldr	r2, [r7, #20]
 8005466:	61da      	str	r2, [r3, #28]
  TIMx->CCER = tmpccer ;
 8005468:	68fb      	ldr	r3, [r7, #12]
 800546a:	693a      	ldr	r2, [r7, #16]
 800546c:	621a      	str	r2, [r3, #32]
}
 800546e:	46c0      	nop			; (mov r8, r8)
 8005470:	46bd      	mov	sp, r7
 8005472:	b006      	add	sp, #24
 8005474:	bd80      	pop	{r7, pc}
 8005476:	46c0      	nop			; (mov r8, r8)
 8005478:	ffffefff 	.word	0xffffefff
 800547c:	fffffcff 	.word	0xfffffcff
 8005480:	ffff0fff 	.word	0xffff0fff
 8005484:	ffff5fff 	.word	0xffff5fff

08005488 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8005488:	b580      	push	{r7, lr}
 800548a:	b086      	sub	sp, #24
 800548c:	af00      	add	r7, sp, #0
 800548e:	60f8      	str	r0, [r7, #12]
 8005490:	60b9      	str	r1, [r7, #8]
 8005492:	607a      	str	r2, [r7, #4]
 8005494:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8005496:	68fb      	ldr	r3, [r7, #12]
 8005498:	689b      	ldr	r3, [r3, #8]
 800549a:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800549c:	697b      	ldr	r3, [r7, #20]
 800549e:	4a09      	ldr	r2, [pc, #36]	; (80054c4 <TIM_ETR_SetConfig+0x3c>)
 80054a0:	4013      	ands	r3, r2
 80054a2:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 80054a4:	683b      	ldr	r3, [r7, #0]
 80054a6:	021a      	lsls	r2, r3, #8
 80054a8:	687b      	ldr	r3, [r7, #4]
 80054aa:	431a      	orrs	r2, r3
 80054ac:	68bb      	ldr	r3, [r7, #8]
 80054ae:	4313      	orrs	r3, r2
 80054b0:	697a      	ldr	r2, [r7, #20]
 80054b2:	4313      	orrs	r3, r2
 80054b4:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80054b6:	68fb      	ldr	r3, [r7, #12]
 80054b8:	697a      	ldr	r2, [r7, #20]
 80054ba:	609a      	str	r2, [r3, #8]
}
 80054bc:	46c0      	nop			; (mov r8, r8)
 80054be:	46bd      	mov	sp, r7
 80054c0:	b006      	add	sp, #24
 80054c2:	bd80      	pop	{r7, pc}
 80054c4:	ffff00ff 	.word	0xffff00ff

080054c8 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 80054c8:	b580      	push	{r7, lr}
 80054ca:	b086      	sub	sp, #24
 80054cc:	af00      	add	r7, sp, #0
 80054ce:	60f8      	str	r0, [r7, #12]
 80054d0:	60b9      	str	r1, [r7, #8]
 80054d2:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 80054d4:	68bb      	ldr	r3, [r7, #8]
 80054d6:	221f      	movs	r2, #31
 80054d8:	4013      	ands	r3, r2
 80054da:	2201      	movs	r2, #1
 80054dc:	409a      	lsls	r2, r3
 80054de:	0013      	movs	r3, r2
 80054e0:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 80054e2:	68fb      	ldr	r3, [r7, #12]
 80054e4:	6a1b      	ldr	r3, [r3, #32]
 80054e6:	697a      	ldr	r2, [r7, #20]
 80054e8:	43d2      	mvns	r2, r2
 80054ea:	401a      	ands	r2, r3
 80054ec:	68fb      	ldr	r3, [r7, #12]
 80054ee:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 80054f0:	68fb      	ldr	r3, [r7, #12]
 80054f2:	6a1a      	ldr	r2, [r3, #32]
 80054f4:	68bb      	ldr	r3, [r7, #8]
 80054f6:	211f      	movs	r1, #31
 80054f8:	400b      	ands	r3, r1
 80054fa:	6879      	ldr	r1, [r7, #4]
 80054fc:	4099      	lsls	r1, r3
 80054fe:	000b      	movs	r3, r1
 8005500:	431a      	orrs	r2, r3
 8005502:	68fb      	ldr	r3, [r7, #12]
 8005504:	621a      	str	r2, [r3, #32]
}
 8005506:	46c0      	nop			; (mov r8, r8)
 8005508:	46bd      	mov	sp, r7
 800550a:	b006      	add	sp, #24
 800550c:	bd80      	pop	{r7, pc}
	...

08005510 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 8005510:	b580      	push	{r7, lr}
 8005512:	b084      	sub	sp, #16
 8005514:	af00      	add	r7, sp, #0
 8005516:	6078      	str	r0, [r7, #4]
 8005518:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 800551a:	687b      	ldr	r3, [r7, #4]
 800551c:	223c      	movs	r2, #60	; 0x3c
 800551e:	5c9b      	ldrb	r3, [r3, r2]
 8005520:	2b01      	cmp	r3, #1
 8005522:	d101      	bne.n	8005528 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8005524:	2302      	movs	r3, #2
 8005526:	e042      	b.n	80055ae <HAL_TIMEx_MasterConfigSynchronization+0x9e>
 8005528:	687b      	ldr	r3, [r7, #4]
 800552a:	223c      	movs	r2, #60	; 0x3c
 800552c:	2101      	movs	r1, #1
 800552e:	5499      	strb	r1, [r3, r2]

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005530:	687b      	ldr	r3, [r7, #4]
 8005532:	223d      	movs	r2, #61	; 0x3d
 8005534:	2102      	movs	r1, #2
 8005536:	5499      	strb	r1, [r3, r2]

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8005538:	687b      	ldr	r3, [r7, #4]
 800553a:	681b      	ldr	r3, [r3, #0]
 800553c:	685b      	ldr	r3, [r3, #4]
 800553e:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8005540:	687b      	ldr	r3, [r7, #4]
 8005542:	681b      	ldr	r3, [r3, #0]
 8005544:	689b      	ldr	r3, [r3, #8]
 8005546:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8005548:	68fb      	ldr	r3, [r7, #12]
 800554a:	2270      	movs	r2, #112	; 0x70
 800554c:	4393      	bics	r3, r2
 800554e:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8005550:	683b      	ldr	r3, [r7, #0]
 8005552:	681b      	ldr	r3, [r3, #0]
 8005554:	68fa      	ldr	r2, [r7, #12]
 8005556:	4313      	orrs	r3, r2
 8005558:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 800555a:	687b      	ldr	r3, [r7, #4]
 800555c:	681b      	ldr	r3, [r3, #0]
 800555e:	68fa      	ldr	r2, [r7, #12]
 8005560:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8005562:	687b      	ldr	r3, [r7, #4]
 8005564:	681b      	ldr	r3, [r3, #0]
 8005566:	4a14      	ldr	r2, [pc, #80]	; (80055b8 <HAL_TIMEx_MasterConfigSynchronization+0xa8>)
 8005568:	4293      	cmp	r3, r2
 800556a:	d00a      	beq.n	8005582 <HAL_TIMEx_MasterConfigSynchronization+0x72>
 800556c:	687b      	ldr	r3, [r7, #4]
 800556e:	681a      	ldr	r2, [r3, #0]
 8005570:	2380      	movs	r3, #128	; 0x80
 8005572:	05db      	lsls	r3, r3, #23
 8005574:	429a      	cmp	r2, r3
 8005576:	d004      	beq.n	8005582 <HAL_TIMEx_MasterConfigSynchronization+0x72>
 8005578:	687b      	ldr	r3, [r7, #4]
 800557a:	681b      	ldr	r3, [r3, #0]
 800557c:	4a0f      	ldr	r2, [pc, #60]	; (80055bc <HAL_TIMEx_MasterConfigSynchronization+0xac>)
 800557e:	4293      	cmp	r3, r2
 8005580:	d10c      	bne.n	800559c <HAL_TIMEx_MasterConfigSynchronization+0x8c>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8005582:	68bb      	ldr	r3, [r7, #8]
 8005584:	2280      	movs	r2, #128	; 0x80
 8005586:	4393      	bics	r3, r2
 8005588:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 800558a:	683b      	ldr	r3, [r7, #0]
 800558c:	685b      	ldr	r3, [r3, #4]
 800558e:	68ba      	ldr	r2, [r7, #8]
 8005590:	4313      	orrs	r3, r2
 8005592:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8005594:	687b      	ldr	r3, [r7, #4]
 8005596:	681b      	ldr	r3, [r3, #0]
 8005598:	68ba      	ldr	r2, [r7, #8]
 800559a:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 800559c:	687b      	ldr	r3, [r7, #4]
 800559e:	223d      	movs	r2, #61	; 0x3d
 80055a0:	2101      	movs	r1, #1
 80055a2:	5499      	strb	r1, [r3, r2]

  __HAL_UNLOCK(htim);
 80055a4:	687b      	ldr	r3, [r7, #4]
 80055a6:	223c      	movs	r2, #60	; 0x3c
 80055a8:	2100      	movs	r1, #0
 80055aa:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 80055ac:	2300      	movs	r3, #0
}
 80055ae:	0018      	movs	r0, r3
 80055b0:	46bd      	mov	sp, r7
 80055b2:	b004      	add	sp, #16
 80055b4:	bd80      	pop	{r7, pc}
 80055b6:	46c0      	nop			; (mov r8, r8)
 80055b8:	40012c00 	.word	0x40012c00
 80055bc:	40000400 	.word	0x40000400

080055c0 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 80055c0:	b580      	push	{r7, lr}
 80055c2:	b082      	sub	sp, #8
 80055c4:	af00      	add	r7, sp, #0
 80055c6:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 80055c8:	687b      	ldr	r3, [r7, #4]
 80055ca:	2b00      	cmp	r3, #0
 80055cc:	d101      	bne.n	80055d2 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 80055ce:	2301      	movs	r3, #1
 80055d0:	e044      	b.n	800565c <HAL_UART_Init+0x9c>
  {
    /* Check the parameters */
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 80055d2:	687b      	ldr	r3, [r7, #4]
 80055d4:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80055d6:	2b00      	cmp	r3, #0
 80055d8:	d107      	bne.n	80055ea <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 80055da:	687b      	ldr	r3, [r7, #4]
 80055dc:	2278      	movs	r2, #120	; 0x78
 80055de:	2100      	movs	r1, #0
 80055e0:	5499      	strb	r1, [r3, r2]

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 80055e2:	687b      	ldr	r3, [r7, #4]
 80055e4:	0018      	movs	r0, r3
 80055e6:	f7fc fe35 	bl	8002254 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 80055ea:	687b      	ldr	r3, [r7, #4]
 80055ec:	2224      	movs	r2, #36	; 0x24
 80055ee:	67da      	str	r2, [r3, #124]	; 0x7c

  __HAL_UART_DISABLE(huart);
 80055f0:	687b      	ldr	r3, [r7, #4]
 80055f2:	681b      	ldr	r3, [r3, #0]
 80055f4:	681a      	ldr	r2, [r3, #0]
 80055f6:	687b      	ldr	r3, [r7, #4]
 80055f8:	681b      	ldr	r3, [r3, #0]
 80055fa:	2101      	movs	r1, #1
 80055fc:	438a      	bics	r2, r1
 80055fe:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8005600:	687b      	ldr	r3, [r7, #4]
 8005602:	0018      	movs	r0, r3
 8005604:	f000 f830 	bl	8005668 <UART_SetConfig>
 8005608:	0003      	movs	r3, r0
 800560a:	2b01      	cmp	r3, #1
 800560c:	d101      	bne.n	8005612 <HAL_UART_Init+0x52>
  {
    return HAL_ERROR;
 800560e:	2301      	movs	r3, #1
 8005610:	e024      	b.n	800565c <HAL_UART_Init+0x9c>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8005612:	687b      	ldr	r3, [r7, #4]
 8005614:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005616:	2b00      	cmp	r3, #0
 8005618:	d003      	beq.n	8005622 <HAL_UART_Init+0x62>
  {
    UART_AdvFeatureConfig(huart);
 800561a:	687b      	ldr	r3, [r7, #4]
 800561c:	0018      	movs	r0, r3
 800561e:	f000 f963 	bl	80058e8 <UART_AdvFeatureConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN (if LIN is supported) and CLKEN bits in the USART_CR2 register,
  - SCEN (if Smartcard is supported), HDSEL and IREN (if IrDA is supported)  bits in the USART_CR3 register.*/
#if defined (USART_CR2_LINEN)
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8005622:	687b      	ldr	r3, [r7, #4]
 8005624:	681b      	ldr	r3, [r3, #0]
 8005626:	685a      	ldr	r2, [r3, #4]
 8005628:	687b      	ldr	r3, [r7, #4]
 800562a:	681b      	ldr	r3, [r3, #0]
 800562c:	490d      	ldr	r1, [pc, #52]	; (8005664 <HAL_UART_Init+0xa4>)
 800562e:	400a      	ands	r2, r1
 8005630:	605a      	str	r2, [r3, #4]
#else
  CLEAR_BIT(huart->Instance->CR2, USART_CR2_CLKEN);
#endif /* USART_CR2_LINEN */
#if defined (USART_CR3_SCEN)
#if defined (USART_CR3_IREN)
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8005632:	687b      	ldr	r3, [r7, #4]
 8005634:	681b      	ldr	r3, [r3, #0]
 8005636:	689a      	ldr	r2, [r3, #8]
 8005638:	687b      	ldr	r3, [r7, #4]
 800563a:	681b      	ldr	r3, [r3, #0]
 800563c:	212a      	movs	r1, #42	; 0x2a
 800563e:	438a      	bics	r2, r1
 8005640:	609a      	str	r2, [r3, #8]
#else
  CLEAR_BIT(huart->Instance->CR3, USART_CR3_HDSEL);
#endif /* USART_CR3_IREN*/
#endif /* USART_CR3_SCEN */

  __HAL_UART_ENABLE(huart);
 8005642:	687b      	ldr	r3, [r7, #4]
 8005644:	681b      	ldr	r3, [r3, #0]
 8005646:	681a      	ldr	r2, [r3, #0]
 8005648:	687b      	ldr	r3, [r7, #4]
 800564a:	681b      	ldr	r3, [r3, #0]
 800564c:	2101      	movs	r1, #1
 800564e:	430a      	orrs	r2, r1
 8005650:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8005652:	687b      	ldr	r3, [r7, #4]
 8005654:	0018      	movs	r0, r3
 8005656:	f000 f9fb 	bl	8005a50 <UART_CheckIdleState>
 800565a:	0003      	movs	r3, r0
}
 800565c:	0018      	movs	r0, r3
 800565e:	46bd      	mov	sp, r7
 8005660:	b002      	add	sp, #8
 8005662:	bd80      	pop	{r7, pc}
 8005664:	ffffb7ff 	.word	0xffffb7ff

08005668 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8005668:	b580      	push	{r7, lr}
 800566a:	b088      	sub	sp, #32
 800566c:	af00      	add	r7, sp, #0
 800566e:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8005670:	231e      	movs	r3, #30
 8005672:	18fb      	adds	r3, r7, r3
 8005674:	2200      	movs	r2, #0
 8005676:	701a      	strb	r2, [r3, #0]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8005678:	687b      	ldr	r3, [r7, #4]
 800567a:	689a      	ldr	r2, [r3, #8]
 800567c:	687b      	ldr	r3, [r7, #4]
 800567e:	691b      	ldr	r3, [r3, #16]
 8005680:	431a      	orrs	r2, r3
 8005682:	687b      	ldr	r3, [r7, #4]
 8005684:	695b      	ldr	r3, [r3, #20]
 8005686:	431a      	orrs	r2, r3
 8005688:	687b      	ldr	r3, [r7, #4]
 800568a:	69db      	ldr	r3, [r3, #28]
 800568c:	4313      	orrs	r3, r2
 800568e:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8005690:	687b      	ldr	r3, [r7, #4]
 8005692:	681b      	ldr	r3, [r3, #0]
 8005694:	681b      	ldr	r3, [r3, #0]
 8005696:	4a8d      	ldr	r2, [pc, #564]	; (80058cc <UART_SetConfig+0x264>)
 8005698:	4013      	ands	r3, r2
 800569a:	0019      	movs	r1, r3
 800569c:	687b      	ldr	r3, [r7, #4]
 800569e:	681b      	ldr	r3, [r3, #0]
 80056a0:	697a      	ldr	r2, [r7, #20]
 80056a2:	430a      	orrs	r2, r1
 80056a4:	601a      	str	r2, [r3, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80056a6:	687b      	ldr	r3, [r7, #4]
 80056a8:	681b      	ldr	r3, [r3, #0]
 80056aa:	685b      	ldr	r3, [r3, #4]
 80056ac:	4a88      	ldr	r2, [pc, #544]	; (80058d0 <UART_SetConfig+0x268>)
 80056ae:	4013      	ands	r3, r2
 80056b0:	0019      	movs	r1, r3
 80056b2:	687b      	ldr	r3, [r7, #4]
 80056b4:	68da      	ldr	r2, [r3, #12]
 80056b6:	687b      	ldr	r3, [r7, #4]
 80056b8:	681b      	ldr	r3, [r3, #0]
 80056ba:	430a      	orrs	r2, r1
 80056bc:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 80056be:	687b      	ldr	r3, [r7, #4]
 80056c0:	699b      	ldr	r3, [r3, #24]
 80056c2:	617b      	str	r3, [r7, #20]

  tmpreg |= huart->Init.OneBitSampling;
 80056c4:	687b      	ldr	r3, [r7, #4]
 80056c6:	6a1b      	ldr	r3, [r3, #32]
 80056c8:	697a      	ldr	r2, [r7, #20]
 80056ca:	4313      	orrs	r3, r2
 80056cc:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 80056ce:	687b      	ldr	r3, [r7, #4]
 80056d0:	681b      	ldr	r3, [r3, #0]
 80056d2:	689b      	ldr	r3, [r3, #8]
 80056d4:	4a7f      	ldr	r2, [pc, #508]	; (80058d4 <UART_SetConfig+0x26c>)
 80056d6:	4013      	ands	r3, r2
 80056d8:	0019      	movs	r1, r3
 80056da:	687b      	ldr	r3, [r7, #4]
 80056dc:	681b      	ldr	r3, [r3, #0]
 80056de:	697a      	ldr	r2, [r7, #20]
 80056e0:	430a      	orrs	r2, r1
 80056e2:	609a      	str	r2, [r3, #8]


  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 80056e4:	687b      	ldr	r3, [r7, #4]
 80056e6:	681b      	ldr	r3, [r3, #0]
 80056e8:	4a7b      	ldr	r2, [pc, #492]	; (80058d8 <UART_SetConfig+0x270>)
 80056ea:	4293      	cmp	r3, r2
 80056ec:	d127      	bne.n	800573e <UART_SetConfig+0xd6>
 80056ee:	4b7b      	ldr	r3, [pc, #492]	; (80058dc <UART_SetConfig+0x274>)
 80056f0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80056f2:	2203      	movs	r2, #3
 80056f4:	4013      	ands	r3, r2
 80056f6:	2b03      	cmp	r3, #3
 80056f8:	d00d      	beq.n	8005716 <UART_SetConfig+0xae>
 80056fa:	d81b      	bhi.n	8005734 <UART_SetConfig+0xcc>
 80056fc:	2b02      	cmp	r3, #2
 80056fe:	d014      	beq.n	800572a <UART_SetConfig+0xc2>
 8005700:	d818      	bhi.n	8005734 <UART_SetConfig+0xcc>
 8005702:	2b00      	cmp	r3, #0
 8005704:	d002      	beq.n	800570c <UART_SetConfig+0xa4>
 8005706:	2b01      	cmp	r3, #1
 8005708:	d00a      	beq.n	8005720 <UART_SetConfig+0xb8>
 800570a:	e013      	b.n	8005734 <UART_SetConfig+0xcc>
 800570c:	231f      	movs	r3, #31
 800570e:	18fb      	adds	r3, r7, r3
 8005710:	2200      	movs	r2, #0
 8005712:	701a      	strb	r2, [r3, #0]
 8005714:	e021      	b.n	800575a <UART_SetConfig+0xf2>
 8005716:	231f      	movs	r3, #31
 8005718:	18fb      	adds	r3, r7, r3
 800571a:	2202      	movs	r2, #2
 800571c:	701a      	strb	r2, [r3, #0]
 800571e:	e01c      	b.n	800575a <UART_SetConfig+0xf2>
 8005720:	231f      	movs	r3, #31
 8005722:	18fb      	adds	r3, r7, r3
 8005724:	2204      	movs	r2, #4
 8005726:	701a      	strb	r2, [r3, #0]
 8005728:	e017      	b.n	800575a <UART_SetConfig+0xf2>
 800572a:	231f      	movs	r3, #31
 800572c:	18fb      	adds	r3, r7, r3
 800572e:	2208      	movs	r2, #8
 8005730:	701a      	strb	r2, [r3, #0]
 8005732:	e012      	b.n	800575a <UART_SetConfig+0xf2>
 8005734:	231f      	movs	r3, #31
 8005736:	18fb      	adds	r3, r7, r3
 8005738:	2210      	movs	r2, #16
 800573a:	701a      	strb	r2, [r3, #0]
 800573c:	e00d      	b.n	800575a <UART_SetConfig+0xf2>
 800573e:	687b      	ldr	r3, [r7, #4]
 8005740:	681b      	ldr	r3, [r3, #0]
 8005742:	4a67      	ldr	r2, [pc, #412]	; (80058e0 <UART_SetConfig+0x278>)
 8005744:	4293      	cmp	r3, r2
 8005746:	d104      	bne.n	8005752 <UART_SetConfig+0xea>
 8005748:	231f      	movs	r3, #31
 800574a:	18fb      	adds	r3, r7, r3
 800574c:	2200      	movs	r2, #0
 800574e:	701a      	strb	r2, [r3, #0]
 8005750:	e003      	b.n	800575a <UART_SetConfig+0xf2>
 8005752:	231f      	movs	r3, #31
 8005754:	18fb      	adds	r3, r7, r3
 8005756:	2210      	movs	r2, #16
 8005758:	701a      	strb	r2, [r3, #0]

  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800575a:	687b      	ldr	r3, [r7, #4]
 800575c:	69da      	ldr	r2, [r3, #28]
 800575e:	2380      	movs	r3, #128	; 0x80
 8005760:	021b      	lsls	r3, r3, #8
 8005762:	429a      	cmp	r2, r3
 8005764:	d15c      	bne.n	8005820 <UART_SetConfig+0x1b8>
  {
    switch (clocksource)
 8005766:	231f      	movs	r3, #31
 8005768:	18fb      	adds	r3, r7, r3
 800576a:	781b      	ldrb	r3, [r3, #0]
 800576c:	2b08      	cmp	r3, #8
 800576e:	d015      	beq.n	800579c <UART_SetConfig+0x134>
 8005770:	dc18      	bgt.n	80057a4 <UART_SetConfig+0x13c>
 8005772:	2b04      	cmp	r3, #4
 8005774:	d00d      	beq.n	8005792 <UART_SetConfig+0x12a>
 8005776:	dc15      	bgt.n	80057a4 <UART_SetConfig+0x13c>
 8005778:	2b00      	cmp	r3, #0
 800577a:	d002      	beq.n	8005782 <UART_SetConfig+0x11a>
 800577c:	2b02      	cmp	r3, #2
 800577e:	d005      	beq.n	800578c <UART_SetConfig+0x124>
 8005780:	e010      	b.n	80057a4 <UART_SetConfig+0x13c>
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8005782:	f7fe fff5 	bl	8004770 <HAL_RCC_GetPCLK1Freq>
 8005786:	0003      	movs	r3, r0
 8005788:	61bb      	str	r3, [r7, #24]
        break;
 800578a:	e012      	b.n	80057b2 <UART_SetConfig+0x14a>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 800578c:	4b55      	ldr	r3, [pc, #340]	; (80058e4 <UART_SetConfig+0x27c>)
 800578e:	61bb      	str	r3, [r7, #24]
        break;
 8005790:	e00f      	b.n	80057b2 <UART_SetConfig+0x14a>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8005792:	f7fe ff6f 	bl	8004674 <HAL_RCC_GetSysClockFreq>
 8005796:	0003      	movs	r3, r0
 8005798:	61bb      	str	r3, [r7, #24]
        break;
 800579a:	e00a      	b.n	80057b2 <UART_SetConfig+0x14a>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800579c:	2380      	movs	r3, #128	; 0x80
 800579e:	021b      	lsls	r3, r3, #8
 80057a0:	61bb      	str	r3, [r7, #24]
        break;
 80057a2:	e006      	b.n	80057b2 <UART_SetConfig+0x14a>
      default:
        pclk = 0U;
 80057a4:	2300      	movs	r3, #0
 80057a6:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 80057a8:	231e      	movs	r3, #30
 80057aa:	18fb      	adds	r3, r7, r3
 80057ac:	2201      	movs	r2, #1
 80057ae:	701a      	strb	r2, [r3, #0]
        break;
 80057b0:	46c0      	nop			; (mov r8, r8)
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 80057b2:	69bb      	ldr	r3, [r7, #24]
 80057b4:	2b00      	cmp	r3, #0
 80057b6:	d100      	bne.n	80057ba <UART_SetConfig+0x152>
 80057b8:	e07a      	b.n	80058b0 <UART_SetConfig+0x248>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 80057ba:	69bb      	ldr	r3, [r7, #24]
 80057bc:	005a      	lsls	r2, r3, #1
 80057be:	687b      	ldr	r3, [r7, #4]
 80057c0:	685b      	ldr	r3, [r3, #4]
 80057c2:	085b      	lsrs	r3, r3, #1
 80057c4:	18d2      	adds	r2, r2, r3
 80057c6:	687b      	ldr	r3, [r7, #4]
 80057c8:	685b      	ldr	r3, [r3, #4]
 80057ca:	0019      	movs	r1, r3
 80057cc:	0010      	movs	r0, r2
 80057ce:	f7fa fc9b 	bl	8000108 <__udivsi3>
 80057d2:	0003      	movs	r3, r0
 80057d4:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 80057d6:	693b      	ldr	r3, [r7, #16]
 80057d8:	2b0f      	cmp	r3, #15
 80057da:	d91c      	bls.n	8005816 <UART_SetConfig+0x1ae>
 80057dc:	693a      	ldr	r2, [r7, #16]
 80057de:	2380      	movs	r3, #128	; 0x80
 80057e0:	025b      	lsls	r3, r3, #9
 80057e2:	429a      	cmp	r2, r3
 80057e4:	d217      	bcs.n	8005816 <UART_SetConfig+0x1ae>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 80057e6:	693b      	ldr	r3, [r7, #16]
 80057e8:	b29a      	uxth	r2, r3
 80057ea:	200e      	movs	r0, #14
 80057ec:	183b      	adds	r3, r7, r0
 80057ee:	210f      	movs	r1, #15
 80057f0:	438a      	bics	r2, r1
 80057f2:	801a      	strh	r2, [r3, #0]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 80057f4:	693b      	ldr	r3, [r7, #16]
 80057f6:	085b      	lsrs	r3, r3, #1
 80057f8:	b29b      	uxth	r3, r3
 80057fa:	2207      	movs	r2, #7
 80057fc:	4013      	ands	r3, r2
 80057fe:	b299      	uxth	r1, r3
 8005800:	183b      	adds	r3, r7, r0
 8005802:	183a      	adds	r2, r7, r0
 8005804:	8812      	ldrh	r2, [r2, #0]
 8005806:	430a      	orrs	r2, r1
 8005808:	801a      	strh	r2, [r3, #0]
        huart->Instance->BRR = brrtemp;
 800580a:	687b      	ldr	r3, [r7, #4]
 800580c:	681b      	ldr	r3, [r3, #0]
 800580e:	183a      	adds	r2, r7, r0
 8005810:	8812      	ldrh	r2, [r2, #0]
 8005812:	60da      	str	r2, [r3, #12]
 8005814:	e04c      	b.n	80058b0 <UART_SetConfig+0x248>
      }
      else
      {
        ret = HAL_ERROR;
 8005816:	231e      	movs	r3, #30
 8005818:	18fb      	adds	r3, r7, r3
 800581a:	2201      	movs	r2, #1
 800581c:	701a      	strb	r2, [r3, #0]
 800581e:	e047      	b.n	80058b0 <UART_SetConfig+0x248>
      }
    }
  }
  else
  {
    switch (clocksource)
 8005820:	231f      	movs	r3, #31
 8005822:	18fb      	adds	r3, r7, r3
 8005824:	781b      	ldrb	r3, [r3, #0]
 8005826:	2b08      	cmp	r3, #8
 8005828:	d015      	beq.n	8005856 <UART_SetConfig+0x1ee>
 800582a:	dc18      	bgt.n	800585e <UART_SetConfig+0x1f6>
 800582c:	2b04      	cmp	r3, #4
 800582e:	d00d      	beq.n	800584c <UART_SetConfig+0x1e4>
 8005830:	dc15      	bgt.n	800585e <UART_SetConfig+0x1f6>
 8005832:	2b00      	cmp	r3, #0
 8005834:	d002      	beq.n	800583c <UART_SetConfig+0x1d4>
 8005836:	2b02      	cmp	r3, #2
 8005838:	d005      	beq.n	8005846 <UART_SetConfig+0x1de>
 800583a:	e010      	b.n	800585e <UART_SetConfig+0x1f6>
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800583c:	f7fe ff98 	bl	8004770 <HAL_RCC_GetPCLK1Freq>
 8005840:	0003      	movs	r3, r0
 8005842:	61bb      	str	r3, [r7, #24]
        break;
 8005844:	e012      	b.n	800586c <UART_SetConfig+0x204>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8005846:	4b27      	ldr	r3, [pc, #156]	; (80058e4 <UART_SetConfig+0x27c>)
 8005848:	61bb      	str	r3, [r7, #24]
        break;
 800584a:	e00f      	b.n	800586c <UART_SetConfig+0x204>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800584c:	f7fe ff12 	bl	8004674 <HAL_RCC_GetSysClockFreq>
 8005850:	0003      	movs	r3, r0
 8005852:	61bb      	str	r3, [r7, #24]
        break;
 8005854:	e00a      	b.n	800586c <UART_SetConfig+0x204>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8005856:	2380      	movs	r3, #128	; 0x80
 8005858:	021b      	lsls	r3, r3, #8
 800585a:	61bb      	str	r3, [r7, #24]
        break;
 800585c:	e006      	b.n	800586c <UART_SetConfig+0x204>
      default:
        pclk = 0U;
 800585e:	2300      	movs	r3, #0
 8005860:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 8005862:	231e      	movs	r3, #30
 8005864:	18fb      	adds	r3, r7, r3
 8005866:	2201      	movs	r2, #1
 8005868:	701a      	strb	r2, [r3, #0]
        break;
 800586a:	46c0      	nop			; (mov r8, r8)
    }

    if (pclk != 0U)
 800586c:	69bb      	ldr	r3, [r7, #24]
 800586e:	2b00      	cmp	r3, #0
 8005870:	d01e      	beq.n	80058b0 <UART_SetConfig+0x248>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 8005872:	687b      	ldr	r3, [r7, #4]
 8005874:	685b      	ldr	r3, [r3, #4]
 8005876:	085a      	lsrs	r2, r3, #1
 8005878:	69bb      	ldr	r3, [r7, #24]
 800587a:	18d2      	adds	r2, r2, r3
 800587c:	687b      	ldr	r3, [r7, #4]
 800587e:	685b      	ldr	r3, [r3, #4]
 8005880:	0019      	movs	r1, r3
 8005882:	0010      	movs	r0, r2
 8005884:	f7fa fc40 	bl	8000108 <__udivsi3>
 8005888:	0003      	movs	r3, r0
 800588a:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800588c:	693b      	ldr	r3, [r7, #16]
 800588e:	2b0f      	cmp	r3, #15
 8005890:	d90a      	bls.n	80058a8 <UART_SetConfig+0x240>
 8005892:	693a      	ldr	r2, [r7, #16]
 8005894:	2380      	movs	r3, #128	; 0x80
 8005896:	025b      	lsls	r3, r3, #9
 8005898:	429a      	cmp	r2, r3
 800589a:	d205      	bcs.n	80058a8 <UART_SetConfig+0x240>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 800589c:	693b      	ldr	r3, [r7, #16]
 800589e:	b29a      	uxth	r2, r3
 80058a0:	687b      	ldr	r3, [r7, #4]
 80058a2:	681b      	ldr	r3, [r3, #0]
 80058a4:	60da      	str	r2, [r3, #12]
 80058a6:	e003      	b.n	80058b0 <UART_SetConfig+0x248>
      }
      else
      {
        ret = HAL_ERROR;
 80058a8:	231e      	movs	r3, #30
 80058aa:	18fb      	adds	r3, r7, r3
 80058ac:	2201      	movs	r2, #1
 80058ae:	701a      	strb	r2, [r3, #0]
    }
  }


  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 80058b0:	687b      	ldr	r3, [r7, #4]
 80058b2:	2200      	movs	r2, #0
 80058b4:	669a      	str	r2, [r3, #104]	; 0x68
  huart->TxISR = NULL;
 80058b6:	687b      	ldr	r3, [r7, #4]
 80058b8:	2200      	movs	r2, #0
 80058ba:	66da      	str	r2, [r3, #108]	; 0x6c

  return ret;
 80058bc:	231e      	movs	r3, #30
 80058be:	18fb      	adds	r3, r7, r3
 80058c0:	781b      	ldrb	r3, [r3, #0]
}
 80058c2:	0018      	movs	r0, r3
 80058c4:	46bd      	mov	sp, r7
 80058c6:	b008      	add	sp, #32
 80058c8:	bd80      	pop	{r7, pc}
 80058ca:	46c0      	nop			; (mov r8, r8)
 80058cc:	efff69f3 	.word	0xefff69f3
 80058d0:	ffffcfff 	.word	0xffffcfff
 80058d4:	fffff4ff 	.word	0xfffff4ff
 80058d8:	40013800 	.word	0x40013800
 80058dc:	40021000 	.word	0x40021000
 80058e0:	40004400 	.word	0x40004400
 80058e4:	007a1200 	.word	0x007a1200

080058e8 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 80058e8:	b580      	push	{r7, lr}
 80058ea:	b082      	sub	sp, #8
 80058ec:	af00      	add	r7, sp, #0
 80058ee:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 80058f0:	687b      	ldr	r3, [r7, #4]
 80058f2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80058f4:	2201      	movs	r2, #1
 80058f6:	4013      	ands	r3, r2
 80058f8:	d00b      	beq.n	8005912 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 80058fa:	687b      	ldr	r3, [r7, #4]
 80058fc:	681b      	ldr	r3, [r3, #0]
 80058fe:	685b      	ldr	r3, [r3, #4]
 8005900:	4a4a      	ldr	r2, [pc, #296]	; (8005a2c <UART_AdvFeatureConfig+0x144>)
 8005902:	4013      	ands	r3, r2
 8005904:	0019      	movs	r1, r3
 8005906:	687b      	ldr	r3, [r7, #4]
 8005908:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800590a:	687b      	ldr	r3, [r7, #4]
 800590c:	681b      	ldr	r3, [r3, #0]
 800590e:	430a      	orrs	r2, r1
 8005910:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8005912:	687b      	ldr	r3, [r7, #4]
 8005914:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005916:	2202      	movs	r2, #2
 8005918:	4013      	ands	r3, r2
 800591a:	d00b      	beq.n	8005934 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 800591c:	687b      	ldr	r3, [r7, #4]
 800591e:	681b      	ldr	r3, [r3, #0]
 8005920:	685b      	ldr	r3, [r3, #4]
 8005922:	4a43      	ldr	r2, [pc, #268]	; (8005a30 <UART_AdvFeatureConfig+0x148>)
 8005924:	4013      	ands	r3, r2
 8005926:	0019      	movs	r1, r3
 8005928:	687b      	ldr	r3, [r7, #4]
 800592a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800592c:	687b      	ldr	r3, [r7, #4]
 800592e:	681b      	ldr	r3, [r3, #0]
 8005930:	430a      	orrs	r2, r1
 8005932:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8005934:	687b      	ldr	r3, [r7, #4]
 8005936:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005938:	2204      	movs	r2, #4
 800593a:	4013      	ands	r3, r2
 800593c:	d00b      	beq.n	8005956 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 800593e:	687b      	ldr	r3, [r7, #4]
 8005940:	681b      	ldr	r3, [r3, #0]
 8005942:	685b      	ldr	r3, [r3, #4]
 8005944:	4a3b      	ldr	r2, [pc, #236]	; (8005a34 <UART_AdvFeatureConfig+0x14c>)
 8005946:	4013      	ands	r3, r2
 8005948:	0019      	movs	r1, r3
 800594a:	687b      	ldr	r3, [r7, #4]
 800594c:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800594e:	687b      	ldr	r3, [r7, #4]
 8005950:	681b      	ldr	r3, [r3, #0]
 8005952:	430a      	orrs	r2, r1
 8005954:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8005956:	687b      	ldr	r3, [r7, #4]
 8005958:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800595a:	2208      	movs	r2, #8
 800595c:	4013      	ands	r3, r2
 800595e:	d00b      	beq.n	8005978 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8005960:	687b      	ldr	r3, [r7, #4]
 8005962:	681b      	ldr	r3, [r3, #0]
 8005964:	685b      	ldr	r3, [r3, #4]
 8005966:	4a34      	ldr	r2, [pc, #208]	; (8005a38 <UART_AdvFeatureConfig+0x150>)
 8005968:	4013      	ands	r3, r2
 800596a:	0019      	movs	r1, r3
 800596c:	687b      	ldr	r3, [r7, #4]
 800596e:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8005970:	687b      	ldr	r3, [r7, #4]
 8005972:	681b      	ldr	r3, [r3, #0]
 8005974:	430a      	orrs	r2, r1
 8005976:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8005978:	687b      	ldr	r3, [r7, #4]
 800597a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800597c:	2210      	movs	r2, #16
 800597e:	4013      	ands	r3, r2
 8005980:	d00b      	beq.n	800599a <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8005982:	687b      	ldr	r3, [r7, #4]
 8005984:	681b      	ldr	r3, [r3, #0]
 8005986:	689b      	ldr	r3, [r3, #8]
 8005988:	4a2c      	ldr	r2, [pc, #176]	; (8005a3c <UART_AdvFeatureConfig+0x154>)
 800598a:	4013      	ands	r3, r2
 800598c:	0019      	movs	r1, r3
 800598e:	687b      	ldr	r3, [r7, #4]
 8005990:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8005992:	687b      	ldr	r3, [r7, #4]
 8005994:	681b      	ldr	r3, [r3, #0]
 8005996:	430a      	orrs	r2, r1
 8005998:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 800599a:	687b      	ldr	r3, [r7, #4]
 800599c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800599e:	2220      	movs	r2, #32
 80059a0:	4013      	ands	r3, r2
 80059a2:	d00b      	beq.n	80059bc <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 80059a4:	687b      	ldr	r3, [r7, #4]
 80059a6:	681b      	ldr	r3, [r3, #0]
 80059a8:	689b      	ldr	r3, [r3, #8]
 80059aa:	4a25      	ldr	r2, [pc, #148]	; (8005a40 <UART_AdvFeatureConfig+0x158>)
 80059ac:	4013      	ands	r3, r2
 80059ae:	0019      	movs	r1, r3
 80059b0:	687b      	ldr	r3, [r7, #4]
 80059b2:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 80059b4:	687b      	ldr	r3, [r7, #4]
 80059b6:	681b      	ldr	r3, [r3, #0]
 80059b8:	430a      	orrs	r2, r1
 80059ba:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 80059bc:	687b      	ldr	r3, [r7, #4]
 80059be:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80059c0:	2240      	movs	r2, #64	; 0x40
 80059c2:	4013      	ands	r3, r2
 80059c4:	d01d      	beq.n	8005a02 <UART_AdvFeatureConfig+0x11a>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 80059c6:	687b      	ldr	r3, [r7, #4]
 80059c8:	681b      	ldr	r3, [r3, #0]
 80059ca:	685b      	ldr	r3, [r3, #4]
 80059cc:	4a1d      	ldr	r2, [pc, #116]	; (8005a44 <UART_AdvFeatureConfig+0x15c>)
 80059ce:	4013      	ands	r3, r2
 80059d0:	0019      	movs	r1, r3
 80059d2:	687b      	ldr	r3, [r7, #4]
 80059d4:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80059d6:	687b      	ldr	r3, [r7, #4]
 80059d8:	681b      	ldr	r3, [r3, #0]
 80059da:	430a      	orrs	r2, r1
 80059dc:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 80059de:	687b      	ldr	r3, [r7, #4]
 80059e0:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80059e2:	2380      	movs	r3, #128	; 0x80
 80059e4:	035b      	lsls	r3, r3, #13
 80059e6:	429a      	cmp	r2, r3
 80059e8:	d10b      	bne.n	8005a02 <UART_AdvFeatureConfig+0x11a>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 80059ea:	687b      	ldr	r3, [r7, #4]
 80059ec:	681b      	ldr	r3, [r3, #0]
 80059ee:	685b      	ldr	r3, [r3, #4]
 80059f0:	4a15      	ldr	r2, [pc, #84]	; (8005a48 <UART_AdvFeatureConfig+0x160>)
 80059f2:	4013      	ands	r3, r2
 80059f4:	0019      	movs	r1, r3
 80059f6:	687b      	ldr	r3, [r7, #4]
 80059f8:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80059fa:	687b      	ldr	r3, [r7, #4]
 80059fc:	681b      	ldr	r3, [r3, #0]
 80059fe:	430a      	orrs	r2, r1
 8005a00:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8005a02:	687b      	ldr	r3, [r7, #4]
 8005a04:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005a06:	2280      	movs	r2, #128	; 0x80
 8005a08:	4013      	ands	r3, r2
 8005a0a:	d00b      	beq.n	8005a24 <UART_AdvFeatureConfig+0x13c>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8005a0c:	687b      	ldr	r3, [r7, #4]
 8005a0e:	681b      	ldr	r3, [r3, #0]
 8005a10:	685b      	ldr	r3, [r3, #4]
 8005a12:	4a0e      	ldr	r2, [pc, #56]	; (8005a4c <UART_AdvFeatureConfig+0x164>)
 8005a14:	4013      	ands	r3, r2
 8005a16:	0019      	movs	r1, r3
 8005a18:	687b      	ldr	r3, [r7, #4]
 8005a1a:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8005a1c:	687b      	ldr	r3, [r7, #4]
 8005a1e:	681b      	ldr	r3, [r3, #0]
 8005a20:	430a      	orrs	r2, r1
 8005a22:	605a      	str	r2, [r3, #4]
  }
}
 8005a24:	46c0      	nop			; (mov r8, r8)
 8005a26:	46bd      	mov	sp, r7
 8005a28:	b002      	add	sp, #8
 8005a2a:	bd80      	pop	{r7, pc}
 8005a2c:	fffdffff 	.word	0xfffdffff
 8005a30:	fffeffff 	.word	0xfffeffff
 8005a34:	fffbffff 	.word	0xfffbffff
 8005a38:	ffff7fff 	.word	0xffff7fff
 8005a3c:	ffffefff 	.word	0xffffefff
 8005a40:	ffffdfff 	.word	0xffffdfff
 8005a44:	ffefffff 	.word	0xffefffff
 8005a48:	ff9fffff 	.word	0xff9fffff
 8005a4c:	fff7ffff 	.word	0xfff7ffff

08005a50 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8005a50:	b580      	push	{r7, lr}
 8005a52:	b092      	sub	sp, #72	; 0x48
 8005a54:	af02      	add	r7, sp, #8
 8005a56:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005a58:	687b      	ldr	r3, [r7, #4]
 8005a5a:	2284      	movs	r2, #132	; 0x84
 8005a5c:	2100      	movs	r1, #0
 8005a5e:	5099      	str	r1, [r3, r2]

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8005a60:	f7fc fce2 	bl	8002428 <HAL_GetTick>
 8005a64:	0003      	movs	r3, r0
 8005a66:	63fb      	str	r3, [r7, #60]	; 0x3c

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8005a68:	687b      	ldr	r3, [r7, #4]
 8005a6a:	681b      	ldr	r3, [r3, #0]
 8005a6c:	681b      	ldr	r3, [r3, #0]
 8005a6e:	2208      	movs	r2, #8
 8005a70:	4013      	ands	r3, r2
 8005a72:	2b08      	cmp	r3, #8
 8005a74:	d12c      	bne.n	8005ad0 <UART_CheckIdleState+0x80>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8005a76:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8005a78:	2280      	movs	r2, #128	; 0x80
 8005a7a:	0391      	lsls	r1, r2, #14
 8005a7c:	6878      	ldr	r0, [r7, #4]
 8005a7e:	4a46      	ldr	r2, [pc, #280]	; (8005b98 <UART_CheckIdleState+0x148>)
 8005a80:	9200      	str	r2, [sp, #0]
 8005a82:	2200      	movs	r2, #0
 8005a84:	f000 f88c 	bl	8005ba0 <UART_WaitOnFlagUntilTimeout>
 8005a88:	1e03      	subs	r3, r0, #0
 8005a8a:	d021      	beq.n	8005ad0 <UART_CheckIdleState+0x80>
 */
__STATIC_FORCEINLINE uint32_t __get_PRIMASK(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8005a8c:	f3ef 8310 	mrs	r3, PRIMASK
 8005a90:	627b      	str	r3, [r7, #36]	; 0x24
  return(result);
 8005a92:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    {
      /* Disable TXE interrupt for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE));
 8005a94:	63bb      	str	r3, [r7, #56]	; 0x38
 8005a96:	2301      	movs	r3, #1
 8005a98:	62bb      	str	r3, [r7, #40]	; 0x28
  \details Assigns the given value to the Priority Mask Register.
  \param [in]    priMask  Priority Mask
 */
__STATIC_FORCEINLINE void __set_PRIMASK(uint32_t priMask)
{
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8005a9a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005a9c:	f383 8810 	msr	PRIMASK, r3
}
 8005aa0:	46c0      	nop			; (mov r8, r8)
 8005aa2:	687b      	ldr	r3, [r7, #4]
 8005aa4:	681b      	ldr	r3, [r3, #0]
 8005aa6:	681a      	ldr	r2, [r3, #0]
 8005aa8:	687b      	ldr	r3, [r7, #4]
 8005aaa:	681b      	ldr	r3, [r3, #0]
 8005aac:	2180      	movs	r1, #128	; 0x80
 8005aae:	438a      	bics	r2, r1
 8005ab0:	601a      	str	r2, [r3, #0]
 8005ab2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005ab4:	62fb      	str	r3, [r7, #44]	; 0x2c
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8005ab6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005ab8:	f383 8810 	msr	PRIMASK, r3
}
 8005abc:	46c0      	nop			; (mov r8, r8)

      huart->gState = HAL_UART_STATE_READY;
 8005abe:	687b      	ldr	r3, [r7, #4]
 8005ac0:	2220      	movs	r2, #32
 8005ac2:	67da      	str	r2, [r3, #124]	; 0x7c

      __HAL_UNLOCK(huart);
 8005ac4:	687b      	ldr	r3, [r7, #4]
 8005ac6:	2278      	movs	r2, #120	; 0x78
 8005ac8:	2100      	movs	r1, #0
 8005aca:	5499      	strb	r1, [r3, r2]

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8005acc:	2303      	movs	r3, #3
 8005ace:	e05f      	b.n	8005b90 <UART_CheckIdleState+0x140>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8005ad0:	687b      	ldr	r3, [r7, #4]
 8005ad2:	681b      	ldr	r3, [r3, #0]
 8005ad4:	681b      	ldr	r3, [r3, #0]
 8005ad6:	2204      	movs	r2, #4
 8005ad8:	4013      	ands	r3, r2
 8005ada:	2b04      	cmp	r3, #4
 8005adc:	d146      	bne.n	8005b6c <UART_CheckIdleState+0x11c>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8005ade:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8005ae0:	2280      	movs	r2, #128	; 0x80
 8005ae2:	03d1      	lsls	r1, r2, #15
 8005ae4:	6878      	ldr	r0, [r7, #4]
 8005ae6:	4a2c      	ldr	r2, [pc, #176]	; (8005b98 <UART_CheckIdleState+0x148>)
 8005ae8:	9200      	str	r2, [sp, #0]
 8005aea:	2200      	movs	r2, #0
 8005aec:	f000 f858 	bl	8005ba0 <UART_WaitOnFlagUntilTimeout>
 8005af0:	1e03      	subs	r3, r0, #0
 8005af2:	d03b      	beq.n	8005b6c <UART_CheckIdleState+0x11c>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8005af4:	f3ef 8310 	mrs	r3, PRIMASK
 8005af8:	60fb      	str	r3, [r7, #12]
  return(result);
 8005afa:	68fb      	ldr	r3, [r7, #12]
    {
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8005afc:	637b      	str	r3, [r7, #52]	; 0x34
 8005afe:	2301      	movs	r3, #1
 8005b00:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8005b02:	693b      	ldr	r3, [r7, #16]
 8005b04:	f383 8810 	msr	PRIMASK, r3
}
 8005b08:	46c0      	nop			; (mov r8, r8)
 8005b0a:	687b      	ldr	r3, [r7, #4]
 8005b0c:	681b      	ldr	r3, [r3, #0]
 8005b0e:	681a      	ldr	r2, [r3, #0]
 8005b10:	687b      	ldr	r3, [r7, #4]
 8005b12:	681b      	ldr	r3, [r3, #0]
 8005b14:	4921      	ldr	r1, [pc, #132]	; (8005b9c <UART_CheckIdleState+0x14c>)
 8005b16:	400a      	ands	r2, r1
 8005b18:	601a      	str	r2, [r3, #0]
 8005b1a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005b1c:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8005b1e:	697b      	ldr	r3, [r7, #20]
 8005b20:	f383 8810 	msr	PRIMASK, r3
}
 8005b24:	46c0      	nop			; (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8005b26:	f3ef 8310 	mrs	r3, PRIMASK
 8005b2a:	61bb      	str	r3, [r7, #24]
  return(result);
 8005b2c:	69bb      	ldr	r3, [r7, #24]
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005b2e:	633b      	str	r3, [r7, #48]	; 0x30
 8005b30:	2301      	movs	r3, #1
 8005b32:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8005b34:	69fb      	ldr	r3, [r7, #28]
 8005b36:	f383 8810 	msr	PRIMASK, r3
}
 8005b3a:	46c0      	nop			; (mov r8, r8)
 8005b3c:	687b      	ldr	r3, [r7, #4]
 8005b3e:	681b      	ldr	r3, [r3, #0]
 8005b40:	689a      	ldr	r2, [r3, #8]
 8005b42:	687b      	ldr	r3, [r7, #4]
 8005b44:	681b      	ldr	r3, [r3, #0]
 8005b46:	2101      	movs	r1, #1
 8005b48:	438a      	bics	r2, r1
 8005b4a:	609a      	str	r2, [r3, #8]
 8005b4c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005b4e:	623b      	str	r3, [r7, #32]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8005b50:	6a3b      	ldr	r3, [r7, #32]
 8005b52:	f383 8810 	msr	PRIMASK, r3
}
 8005b56:	46c0      	nop			; (mov r8, r8)

      huart->RxState = HAL_UART_STATE_READY;
 8005b58:	687b      	ldr	r3, [r7, #4]
 8005b5a:	2280      	movs	r2, #128	; 0x80
 8005b5c:	2120      	movs	r1, #32
 8005b5e:	5099      	str	r1, [r3, r2]

      __HAL_UNLOCK(huart);
 8005b60:	687b      	ldr	r3, [r7, #4]
 8005b62:	2278      	movs	r2, #120	; 0x78
 8005b64:	2100      	movs	r1, #0
 8005b66:	5499      	strb	r1, [r3, r2]

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8005b68:	2303      	movs	r3, #3
 8005b6a:	e011      	b.n	8005b90 <UART_CheckIdleState+0x140>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8005b6c:	687b      	ldr	r3, [r7, #4]
 8005b6e:	2220      	movs	r2, #32
 8005b70:	67da      	str	r2, [r3, #124]	; 0x7c
  huart->RxState = HAL_UART_STATE_READY;
 8005b72:	687b      	ldr	r3, [r7, #4]
 8005b74:	2280      	movs	r2, #128	; 0x80
 8005b76:	2120      	movs	r1, #32
 8005b78:	5099      	str	r1, [r3, r2]
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8005b7a:	687b      	ldr	r3, [r7, #4]
 8005b7c:	2200      	movs	r2, #0
 8005b7e:	661a      	str	r2, [r3, #96]	; 0x60
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8005b80:	687b      	ldr	r3, [r7, #4]
 8005b82:	2200      	movs	r2, #0
 8005b84:	665a      	str	r2, [r3, #100]	; 0x64

  __HAL_UNLOCK(huart);
 8005b86:	687b      	ldr	r3, [r7, #4]
 8005b88:	2278      	movs	r2, #120	; 0x78
 8005b8a:	2100      	movs	r1, #0
 8005b8c:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8005b8e:	2300      	movs	r3, #0
}
 8005b90:	0018      	movs	r0, r3
 8005b92:	46bd      	mov	sp, r7
 8005b94:	b010      	add	sp, #64	; 0x40
 8005b96:	bd80      	pop	{r7, pc}
 8005b98:	01ffffff 	.word	0x01ffffff
 8005b9c:	fffffedf 	.word	0xfffffedf

08005ba0 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8005ba0:	b580      	push	{r7, lr}
 8005ba2:	b084      	sub	sp, #16
 8005ba4:	af00      	add	r7, sp, #0
 8005ba6:	60f8      	str	r0, [r7, #12]
 8005ba8:	60b9      	str	r1, [r7, #8]
 8005baa:	603b      	str	r3, [r7, #0]
 8005bac:	1dfb      	adds	r3, r7, #7
 8005bae:	701a      	strb	r2, [r3, #0]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8005bb0:	e04b      	b.n	8005c4a <UART_WaitOnFlagUntilTimeout+0xaa>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8005bb2:	69bb      	ldr	r3, [r7, #24]
 8005bb4:	3301      	adds	r3, #1
 8005bb6:	d048      	beq.n	8005c4a <UART_WaitOnFlagUntilTimeout+0xaa>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8005bb8:	f7fc fc36 	bl	8002428 <HAL_GetTick>
 8005bbc:	0002      	movs	r2, r0
 8005bbe:	683b      	ldr	r3, [r7, #0]
 8005bc0:	1ad3      	subs	r3, r2, r3
 8005bc2:	69ba      	ldr	r2, [r7, #24]
 8005bc4:	429a      	cmp	r2, r3
 8005bc6:	d302      	bcc.n	8005bce <UART_WaitOnFlagUntilTimeout+0x2e>
 8005bc8:	69bb      	ldr	r3, [r7, #24]
 8005bca:	2b00      	cmp	r3, #0
 8005bcc:	d101      	bne.n	8005bd2 <UART_WaitOnFlagUntilTimeout+0x32>
      {

        return HAL_TIMEOUT;
 8005bce:	2303      	movs	r3, #3
 8005bd0:	e04b      	b.n	8005c6a <UART_WaitOnFlagUntilTimeout+0xca>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 8005bd2:	68fb      	ldr	r3, [r7, #12]
 8005bd4:	681b      	ldr	r3, [r3, #0]
 8005bd6:	681b      	ldr	r3, [r3, #0]
 8005bd8:	2204      	movs	r2, #4
 8005bda:	4013      	ands	r3, r2
 8005bdc:	d035      	beq.n	8005c4a <UART_WaitOnFlagUntilTimeout+0xaa>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 8005bde:	68fb      	ldr	r3, [r7, #12]
 8005be0:	681b      	ldr	r3, [r3, #0]
 8005be2:	69db      	ldr	r3, [r3, #28]
 8005be4:	2208      	movs	r2, #8
 8005be6:	4013      	ands	r3, r2
 8005be8:	2b08      	cmp	r3, #8
 8005bea:	d111      	bne.n	8005c10 <UART_WaitOnFlagUntilTimeout+0x70>
        {
           /* Clear Overrun Error flag*/
           __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8005bec:	68fb      	ldr	r3, [r7, #12]
 8005bee:	681b      	ldr	r3, [r3, #0]
 8005bf0:	2208      	movs	r2, #8
 8005bf2:	621a      	str	r2, [r3, #32]

           /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts if ongoing */
           UART_EndRxTransfer(huart);
 8005bf4:	68fb      	ldr	r3, [r7, #12]
 8005bf6:	0018      	movs	r0, r3
 8005bf8:	f000 f83c 	bl	8005c74 <UART_EndRxTransfer>

           huart->ErrorCode = HAL_UART_ERROR_ORE;
 8005bfc:	68fb      	ldr	r3, [r7, #12]
 8005bfe:	2284      	movs	r2, #132	; 0x84
 8005c00:	2108      	movs	r1, #8
 8005c02:	5099      	str	r1, [r3, r2]

           /* Process Unlocked */
           __HAL_UNLOCK(huart);
 8005c04:	68fb      	ldr	r3, [r7, #12]
 8005c06:	2278      	movs	r2, #120	; 0x78
 8005c08:	2100      	movs	r1, #0
 8005c0a:	5499      	strb	r1, [r3, r2]

           return HAL_ERROR;
 8005c0c:	2301      	movs	r3, #1
 8005c0e:	e02c      	b.n	8005c6a <UART_WaitOnFlagUntilTimeout+0xca>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8005c10:	68fb      	ldr	r3, [r7, #12]
 8005c12:	681b      	ldr	r3, [r3, #0]
 8005c14:	69da      	ldr	r2, [r3, #28]
 8005c16:	2380      	movs	r3, #128	; 0x80
 8005c18:	011b      	lsls	r3, r3, #4
 8005c1a:	401a      	ands	r2, r3
 8005c1c:	2380      	movs	r3, #128	; 0x80
 8005c1e:	011b      	lsls	r3, r3, #4
 8005c20:	429a      	cmp	r2, r3
 8005c22:	d112      	bne.n	8005c4a <UART_WaitOnFlagUntilTimeout+0xaa>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8005c24:	68fb      	ldr	r3, [r7, #12]
 8005c26:	681b      	ldr	r3, [r3, #0]
 8005c28:	2280      	movs	r2, #128	; 0x80
 8005c2a:	0112      	lsls	r2, r2, #4
 8005c2c:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8005c2e:	68fb      	ldr	r3, [r7, #12]
 8005c30:	0018      	movs	r0, r3
 8005c32:	f000 f81f 	bl	8005c74 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8005c36:	68fb      	ldr	r3, [r7, #12]
 8005c38:	2284      	movs	r2, #132	; 0x84
 8005c3a:	2120      	movs	r1, #32
 8005c3c:	5099      	str	r1, [r3, r2]

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8005c3e:	68fb      	ldr	r3, [r7, #12]
 8005c40:	2278      	movs	r2, #120	; 0x78
 8005c42:	2100      	movs	r1, #0
 8005c44:	5499      	strb	r1, [r3, r2]

          return HAL_TIMEOUT;
 8005c46:	2303      	movs	r3, #3
 8005c48:	e00f      	b.n	8005c6a <UART_WaitOnFlagUntilTimeout+0xca>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8005c4a:	68fb      	ldr	r3, [r7, #12]
 8005c4c:	681b      	ldr	r3, [r3, #0]
 8005c4e:	69db      	ldr	r3, [r3, #28]
 8005c50:	68ba      	ldr	r2, [r7, #8]
 8005c52:	4013      	ands	r3, r2
 8005c54:	68ba      	ldr	r2, [r7, #8]
 8005c56:	1ad3      	subs	r3, r2, r3
 8005c58:	425a      	negs	r2, r3
 8005c5a:	4153      	adcs	r3, r2
 8005c5c:	b2db      	uxtb	r3, r3
 8005c5e:	001a      	movs	r2, r3
 8005c60:	1dfb      	adds	r3, r7, #7
 8005c62:	781b      	ldrb	r3, [r3, #0]
 8005c64:	429a      	cmp	r2, r3
 8005c66:	d0a4      	beq.n	8005bb2 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8005c68:	2300      	movs	r3, #0
}
 8005c6a:	0018      	movs	r0, r3
 8005c6c:	46bd      	mov	sp, r7
 8005c6e:	b004      	add	sp, #16
 8005c70:	bd80      	pop	{r7, pc}
	...

08005c74 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8005c74:	b580      	push	{r7, lr}
 8005c76:	b08e      	sub	sp, #56	; 0x38
 8005c78:	af00      	add	r7, sp, #0
 8005c7a:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8005c7c:	f3ef 8310 	mrs	r3, PRIMASK
 8005c80:	617b      	str	r3, [r7, #20]
  return(result);
 8005c82:	697b      	ldr	r3, [r7, #20]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8005c84:	637b      	str	r3, [r7, #52]	; 0x34
 8005c86:	2301      	movs	r3, #1
 8005c88:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8005c8a:	69bb      	ldr	r3, [r7, #24]
 8005c8c:	f383 8810 	msr	PRIMASK, r3
}
 8005c90:	46c0      	nop			; (mov r8, r8)
 8005c92:	687b      	ldr	r3, [r7, #4]
 8005c94:	681b      	ldr	r3, [r3, #0]
 8005c96:	681a      	ldr	r2, [r3, #0]
 8005c98:	687b      	ldr	r3, [r7, #4]
 8005c9a:	681b      	ldr	r3, [r3, #0]
 8005c9c:	4926      	ldr	r1, [pc, #152]	; (8005d38 <UART_EndRxTransfer+0xc4>)
 8005c9e:	400a      	ands	r2, r1
 8005ca0:	601a      	str	r2, [r3, #0]
 8005ca2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005ca4:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8005ca6:	69fb      	ldr	r3, [r7, #28]
 8005ca8:	f383 8810 	msr	PRIMASK, r3
}
 8005cac:	46c0      	nop			; (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8005cae:	f3ef 8310 	mrs	r3, PRIMASK
 8005cb2:	623b      	str	r3, [r7, #32]
  return(result);
 8005cb4:	6a3b      	ldr	r3, [r7, #32]
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005cb6:	633b      	str	r3, [r7, #48]	; 0x30
 8005cb8:	2301      	movs	r3, #1
 8005cba:	627b      	str	r3, [r7, #36]	; 0x24
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8005cbc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005cbe:	f383 8810 	msr	PRIMASK, r3
}
 8005cc2:	46c0      	nop			; (mov r8, r8)
 8005cc4:	687b      	ldr	r3, [r7, #4]
 8005cc6:	681b      	ldr	r3, [r3, #0]
 8005cc8:	689a      	ldr	r2, [r3, #8]
 8005cca:	687b      	ldr	r3, [r7, #4]
 8005ccc:	681b      	ldr	r3, [r3, #0]
 8005cce:	2101      	movs	r1, #1
 8005cd0:	438a      	bics	r2, r1
 8005cd2:	609a      	str	r2, [r3, #8]
 8005cd4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005cd6:	62bb      	str	r3, [r7, #40]	; 0x28
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8005cd8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005cda:	f383 8810 	msr	PRIMASK, r3
}
 8005cde:	46c0      	nop			; (mov r8, r8)

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8005ce0:	687b      	ldr	r3, [r7, #4]
 8005ce2:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8005ce4:	2b01      	cmp	r3, #1
 8005ce6:	d118      	bne.n	8005d1a <UART_EndRxTransfer+0xa6>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8005ce8:	f3ef 8310 	mrs	r3, PRIMASK
 8005cec:	60bb      	str	r3, [r7, #8]
  return(result);
 8005cee:	68bb      	ldr	r3, [r7, #8]
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8005cf0:	62fb      	str	r3, [r7, #44]	; 0x2c
 8005cf2:	2301      	movs	r3, #1
 8005cf4:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8005cf6:	68fb      	ldr	r3, [r7, #12]
 8005cf8:	f383 8810 	msr	PRIMASK, r3
}
 8005cfc:	46c0      	nop			; (mov r8, r8)
 8005cfe:	687b      	ldr	r3, [r7, #4]
 8005d00:	681b      	ldr	r3, [r3, #0]
 8005d02:	681a      	ldr	r2, [r3, #0]
 8005d04:	687b      	ldr	r3, [r7, #4]
 8005d06:	681b      	ldr	r3, [r3, #0]
 8005d08:	2110      	movs	r1, #16
 8005d0a:	438a      	bics	r2, r1
 8005d0c:	601a      	str	r2, [r3, #0]
 8005d0e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005d10:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8005d12:	693b      	ldr	r3, [r7, #16]
 8005d14:	f383 8810 	msr	PRIMASK, r3
}
 8005d18:	46c0      	nop			; (mov r8, r8)
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8005d1a:	687b      	ldr	r3, [r7, #4]
 8005d1c:	2280      	movs	r2, #128	; 0x80
 8005d1e:	2120      	movs	r1, #32
 8005d20:	5099      	str	r1, [r3, r2]
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8005d22:	687b      	ldr	r3, [r7, #4]
 8005d24:	2200      	movs	r2, #0
 8005d26:	661a      	str	r2, [r3, #96]	; 0x60

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 8005d28:	687b      	ldr	r3, [r7, #4]
 8005d2a:	2200      	movs	r2, #0
 8005d2c:	669a      	str	r2, [r3, #104]	; 0x68
}
 8005d2e:	46c0      	nop			; (mov r8, r8)
 8005d30:	46bd      	mov	sp, r7
 8005d32:	b00e      	add	sp, #56	; 0x38
 8005d34:	bd80      	pop	{r7, pc}
 8005d36:	46c0      	nop			; (mov r8, r8)
 8005d38:	fffffedf 	.word	0xfffffedf

08005d3c <__libc_init_array>:
 8005d3c:	b570      	push	{r4, r5, r6, lr}
 8005d3e:	2600      	movs	r6, #0
 8005d40:	4d0c      	ldr	r5, [pc, #48]	; (8005d74 <__libc_init_array+0x38>)
 8005d42:	4c0d      	ldr	r4, [pc, #52]	; (8005d78 <__libc_init_array+0x3c>)
 8005d44:	1b64      	subs	r4, r4, r5
 8005d46:	10a4      	asrs	r4, r4, #2
 8005d48:	42a6      	cmp	r6, r4
 8005d4a:	d109      	bne.n	8005d60 <__libc_init_array+0x24>
 8005d4c:	2600      	movs	r6, #0
 8005d4e:	f000 f821 	bl	8005d94 <_init>
 8005d52:	4d0a      	ldr	r5, [pc, #40]	; (8005d7c <__libc_init_array+0x40>)
 8005d54:	4c0a      	ldr	r4, [pc, #40]	; (8005d80 <__libc_init_array+0x44>)
 8005d56:	1b64      	subs	r4, r4, r5
 8005d58:	10a4      	asrs	r4, r4, #2
 8005d5a:	42a6      	cmp	r6, r4
 8005d5c:	d105      	bne.n	8005d6a <__libc_init_array+0x2e>
 8005d5e:	bd70      	pop	{r4, r5, r6, pc}
 8005d60:	00b3      	lsls	r3, r6, #2
 8005d62:	58eb      	ldr	r3, [r5, r3]
 8005d64:	4798      	blx	r3
 8005d66:	3601      	adds	r6, #1
 8005d68:	e7ee      	b.n	8005d48 <__libc_init_array+0xc>
 8005d6a:	00b3      	lsls	r3, r6, #2
 8005d6c:	58eb      	ldr	r3, [r5, r3]
 8005d6e:	4798      	blx	r3
 8005d70:	3601      	adds	r6, #1
 8005d72:	e7f2      	b.n	8005d5a <__libc_init_array+0x1e>
 8005d74:	08005e24 	.word	0x08005e24
 8005d78:	08005e24 	.word	0x08005e24
 8005d7c:	08005e24 	.word	0x08005e24
 8005d80:	08005e28 	.word	0x08005e28

08005d84 <memset>:
 8005d84:	0003      	movs	r3, r0
 8005d86:	1882      	adds	r2, r0, r2
 8005d88:	4293      	cmp	r3, r2
 8005d8a:	d100      	bne.n	8005d8e <memset+0xa>
 8005d8c:	4770      	bx	lr
 8005d8e:	7019      	strb	r1, [r3, #0]
 8005d90:	3301      	adds	r3, #1
 8005d92:	e7f9      	b.n	8005d88 <memset+0x4>

08005d94 <_init>:
 8005d94:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005d96:	46c0      	nop			; (mov r8, r8)
 8005d98:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8005d9a:	bc08      	pop	{r3}
 8005d9c:	469e      	mov	lr, r3
 8005d9e:	4770      	bx	lr

08005da0 <_fini>:
 8005da0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005da2:	46c0      	nop			; (mov r8, r8)
 8005da4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8005da6:	bc08      	pop	{r3}
 8005da8:	469e      	mov	lr, r3
 8005daa:	4770      	bx	lr
